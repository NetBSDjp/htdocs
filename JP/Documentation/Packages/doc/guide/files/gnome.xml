<!-- $NetBSD: gnome.xml,v 1.6 2006/12/03 01:03:38 kano Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: gnome.xml,v 1.6 2006/12/03 01:03:38 kano Exp   -->

<chapter id="gnome"> <?dbhtml filename="gnome.html"?>
<title>GNOME のパッケージングおよび移植</title>

<para><ulink url="http://www.gnome.org/">GNOME の web
サイト</ulink>によれば、</para>

<blockquote>
  <para>GNOME プロジェクトでは二つのものを提供します: 一つは、
  利用者にとって直観的で魅力的なデスクトップである GNOME デスクトップ環境です。
  もう一つは、アプリケーション構築用の広範な枠組である GNOME
  開発プラットフォームで、その他のデスクトップに統合されています。</para>
</blockquote>

<para>pkgsrc を使うと、<emphasis>多くのプラットフォームのもとで</emphasis>、
完全な GNOME 環境の自動的な構築やインストールを透過的におこなうことができます。
pkgsrc は、buildlink3 技術、ラッパーとツールの枠組や、
設定ファイルの自動処理があることから、
GNOME の構築およびパッケージングシステムとして最も高度なもののひとつであると、
自信を持っていうことができます。
インストールされたソフトウェアの構成要素を、
完全にきれいにアンインストールできるようにするため、
多くの取り組みがおこなわれています。</para>

<para>pkgsrc は <ulink
url="http://www.NetBSD.org/">NetBSD</ulink> の公式パッケージングシステムなので、
上述したことはすなわち、NetBSD のもとで GNOME が機能するようにするために、
多大な取り込みがおこなわれているということです。最近では、<ulink
url="http://www.dragonflybsd.org/">DragonFly BSD</ulink> も
pkgsrc をパッケージングシステムとして採用しており、
同 OS のもとで GNOME の構築やインストールができるようにするため、
移植性に関する修正を数多く寄せてくれています。</para>

<note>
  <title>あなたの力が必要です</title>

  <para>あなたの空き時間を NetBSD のために使っていただけたら、 pkgsrc
  および GNOME は、おもしろげな新機能の導入に注力することができます。まずは<ulink
  url="http://www.NetBSD.org/contrib/projects.html#gnome">保留中の作業
  </ulink>の一覧をご覧ください。NetBSD のもとで
  GNOME デスクトップを完全に機能させるまでには、まだ長い道が残っているため、
  あなたの助けが必要なのです。</para>
</note>

<sect1 id="meta-packages">
<title>メタパッケージ</title>

<para>pkgsrc には、GNOME 関連のメタパッケージが三つあります。</para>

<itemizedlist>
  <listitem>
    <para><filename role="pkg">meta-pkgs/gnome-base</filename>: GNOME
    デスクトップ環境の中核部分を提供します。
    これは GNOME を正常に起動させるために必要なものだけからなっており、
    日々の操作をするうえで重要な機能が足りないかもしれません。
    このパッケージの考え方は、
    末端利用者がこのパッケージの上層で独自の構成をできるようにするためのものであり、
    このメタパッケージをまずインストールして最低限の機能を整えてから、
    個々のアプリケーションを追加するというものです。</para>
  </listitem>

  <listitem>
    <para><filename role="pkg">meta-pkgs/gnome</filename>: GNOME
    プロジェクトが定義する GNOME プラットフォームおよびデスクトップの、
    完全なインストールを提供します。これは、GNOME の公式 FTP サーバーの
    <filename>platform/x.y/x.y.z/sources</filename> および
    <filename>desktop/x.y/x.y.z/sources</filename>
    ディレクトリーで配布されている構成要素にもとづいています。
    このディレクトリーにある開発者専用ツールは、他の構成要素の正常動作のために必要な場合以外は、
    インストールされません。同様に、バインディングセット附属のパッケージ
    (<filename>bindings/x.y/x.y.z/sources</filename>)
    も、末端利用者向けの構成要素からの依存により必要な場合以外は、
    含まれません。このパッケージは、<filename
    role="pkg">meta-pkgs/gnome-base</filename> を「拡張」するものです。</para>
  </listitem>

  <listitem>
    <para><filename role="pkg">meta-pkgs/gnome-devel</filename>:
    GNOME の構成要素を CVS リポジトリーから取得した場合用に、
    その構築のために必要なツールをすべてインストールします。
    これらは
    <command>autogen.sh</command> スクリプトを正常に動かすために必要なものです。</para>
  </listitem>
</itemizedlist>

<para>以上の各パッケージでは、更新を簡単にできるようにするため、
<varname>DEPENDS</varname> 行が依存性にもとづく順序で並べられています。
あるパッケージが、それより前に並んでいるパッケージに依存することはできますが、
後に並んでいるパッケージに依存することはできません。この順序を守ることは、
更新を簡単にするために非常に重要なことです。<emphasis>これを、
アルファベット順に並びかえてはいけません。</emphasis></para>

</sect1>

<sect1 id="new-package">
<title>GNOME アプリケーションをパッケージングする</title>

<para>ほとんどすべての GNOME アプリケーションは C で書かれており、
構築システムとして共通のツール一式を使っています。C 以外の言語 (Python など)
を新たに追加する場合は事情が異なりますが、
最低限必要なツールについては、以下のことが参考になるでしょう。</para>

<itemizedlist>
  <listitem>
    <para>ほとんどすべての GNOME アプリケーションは、構築システムとして
    GNU Autotool を使っています。GNOME に限らない一般的な決めごととして、
    このことをパッケージに教えてやる必要があります。</para>

    <programlisting>GNU_CONFIGURE=yes
USE_LIBTOOL=yes
USE_TOOLS+=gmake</programlisting>
  </listitem>

  <listitem>
    <para>パッケージが pkg-config を使って依存性を決めている場合は、
    必要なユーティリティーのリストに同ツールを追加します。</para>

    <programlisting>USE_TOOLS+=pkg-config</programlisting>

    <para>さらに、構築の過程の最後で
    <filename role="pkg">pkgtools/verifypc</filename> を使って、
    作ったパッケージのなかで指定した依存性に間違いがなく、
    要求バージョンもすべて正しいことを確認します。</para>
  </listitem>

  <listitem>
    <para>パッケージが intltool を使う場合は、依存性を処理するため、また、
    利用可能な最新バージョンを使うようにするため、かならず
    <literal>intltool</literal> を <varname>USE_TOOLS</varname>
    に追加します。</para>
  </listitem>

  <listitem>
    <para>パッケージが gtk-doc (ドキュメンテーション生成ユーティリティー)
    を使う場合は、依存性を追加しては<emphasis>いけません</emphasis>。
    このツールは巨大なものですし、
    パッケージの distfile には生成済みのドキュメンテーションが附属しているはずだからです
    (そうなっていない場合はバグですので、報告してください)。
    このようなパッケージでは、以下のようにして gtk-doc を無効化するようにします
    (標準で無効になっている場合を除く)。</para>

    <programlisting>CONFIGURE_ARGS+=--disable-gtk-doc</programlisting>
    
    <para>HTML ファイルの標準でのインストール場所
    (<filename>share/gtk-doc/&lt;package-name&gt;</filename>) は適切なものなので、
    パッケージが別の場所へのインストールを要求した場合以外は変更しないようにします。
    場所を変更すると、<command>devhelp</command>
    などのプログラムがファイルを開けなくなってしまいます。
    場所の変更は、以下のようにしておこなうことができます。</para>

    <programlisting>CONFIGURE_ARGS+=--with-html-dir=${PREFIX}/share/gtk-doc/...</programlisting>
  </listitem>
</itemizedlist>

<para>GNOME は、インストール用プレフィックスの下に複数の
<emphasis>共有</emphasis>ディレクトリーおよびファイルをもっており、
データベースの保守のために使っています。ここでいう共有とは、
同じディレクトリーやファイルを複数の異なるパッケージが使うことであり、
<filename>PLIST</filename> の内容の衝突を起こします。
現在、pkgsrc にはもっともありがちな部類の事例を扱うための仕組みがあるので、
ファイルのリストには必ず
<literal>@unexec ${RMDIR}</literal> という行を書くようにし、
共有のファイルは書かないようにしてください。
この仕組みを使わずに独自の処理をしてしまうと、
<emphasis>作成したパッケージが、正しくないものになってしまうでしょう</emphasis>。</para>

<para>以下の表は、共有ディレクトリーまたはファイルを使うような、
ありがちな状況を挙げたものです。各状況について、適切な処置を示しています。
ここで示した処置を適用した後は、
<command>make print-PLIST</command> を使って
<emphasis>パッケージのファイルのリストを作り直し</emphasis>、
それが正しいことを確認してください。</para>

<table id="plist-handling">
  <title>GNOME パッケージ用の PLIST の扱い</title>

  <tgroup cols="2">
    <thead>
      <row>
        <entry>パッケージの挙動</entry>
        <entry>処置</entry>
      </row>
    </thead>

    <tbody>
      <row>
        <entry><filename>share/omf</filename> 以下に OMF ファイルをインストールする。</entry>
        <entry><xref linkend="scrollkeeper-data-files" />参照。</entry>
      </row>

      <row>
        <entry><filename>share/icons/hicolor</filename>
        階層以下にアイコンをインストールする、または
        <filename>share/icons/hicolor/icon-theme.cache</filename> を更新する。</entry>
        <entry><xref linkend="hicolor-theme" />参照。</entry>
      </row>

      <row>
        <entry><filename>share/mime/packages</filename>
        以下にファイルをインストールする。</entry>
        <entry><xref linkend="mime-database" />参照。</entry>
      </row>

      <row>
        <entry><filename>share/applications</filename> 以下に
        <filename>.desktop</filename> ファイルをインストールし、かつそのファイルに MIME
        情報が含まれる。</entry>
        <entry><xref linkend="desktop-files" />参照。</entry>
      </row>
    </tbody>
  </tgroup>
</table>

</sect1>

<sect1 id="full-update">
<title>GNOME を新バージョンに更新する</title>

<para>GNOME を全体として見た場合、
二種類の更新があります。</para>

<variablelist>
  <varlistentry>
    <term>メジャーアップデート</term>
    
    <listitem>
      <para>GNOME 3 (がいつか登場したとして) への道程は、まだ相当長いものなので、
      ここでは、バージョンが <literal>2.X</literal> から <literal>2.Y</literal>
      (<literal>Y</literal> は <literal>X</literal> より大きい偶数)
      に上がることをメジャーアップデートということにします。
      メジャーアップデートでは構成要素のコードに多くの変更がおこなわれており、
      GNOME のほとんどすべての distfile が新しいバージョンに更新されているため、
      更新は面倒な作業になります。変更のなかには、
      以前のバージョン系列との API や ABI の互換性を損なうものがあることもあります。
      このような事情があるので、破損を最小限にするために、
      更新は一度にまとめておこなう必要があります。</para>

      <para>通常、メジャーアップデートでは、
      約 80 個のパッケージが更新されるほか、新しいパッケージがいくつか追加されます。</para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>マイナーアップデート</term>
    
    <listitem>
      <para>ここでは、バージョンが <literal>2.A.X</literal> から <literal>2.A.Y</literal>
      (<literal>Y</literal> は <literal>X</literal> より大きい数)
      に上がることをマイナーアップデートということにします。
      GNOME の構成要素すべてが更新されるわけではないことや、
      枝内でのバージョン増大に沿った形でおこなうことができ、
      API や ABI の互換性が失われないことなどから、
      更新は簡単におこなうことができます。</para>

      <para>マイナーアップデートで更新されるパッケージ数は、
      大きく変動することがありますが、通常は約 50 個です。</para>
    </listitem>
  </varlistentry>
</variablelist>

<para>pkgsrc の GNOME 構成要素を新しい安定版リリース
(メジャーまたはマイナー) に更新するためには、
以下の手順に沿っておこなうようにします。</para>

<orderedlist>
  <listitem>
    <para>以下のコマンドを使って、新しいリリースを構成する tarball
    の一覧を作ります。
    こうすると、構成要素の distfile の全一覧が
    <filename>list.txt</filename> ファイルに得られます。</para>

    <screen>&cprompt; <userinput>echo ls "*.tar.bz2" | \
    ftp -V ftp://ftp.gnome.org/pub/gnome/platform/x.y/x.y.z/sources/ | \
    awk '{ print $9 }' &gt;list.txt</userinput>
&cprompt; <userinput>echo ls "*.tar.bz2" | \
    ftp -V ftp://ftp.gnome.org/pub/gnome/desktop/x.y/x.y.z/sources/ | \
    awk '{ print $9 }' &gt;&gt;list.txt</userinput></screen>
  </listitem>

  <listitem>
    <para>各メタパッケージの <filename>Makefile</filename> を開き、
    バージョンを更新後のリリースのものに上げます。
    3 個のメタパッケージは常にバージョンに整合性をもたせるようにします。
    <varname>PKGREVISION</varname> がある場合は、
    当然、削除します。</para>
  </listitem>
 
  <listitem>
    <para>各メタパッケージについて、
    <varname>DEPENDS</varname> 行を更新して、
    前掲のコマンドで得られた最新バージョンと合致するようにします。
    これより新しいバージョンにしては (たとえそれが FTP サーバーにあったとしても)
    <emphasis>いけません</emphasis>。このメタパッケージは、
    特定の GNOME リリースを構成するバージョンだけを揃えることを意図したものだからです。
    ただし、統合デスクトップを使用する上での深刻な問題が新しいバージョンで解決する場合には、
    例外的に認められます。これは、たいていの場合、
    GNOME による新しいバージョンは使わずに、
    pkgsrc 内でのリビジョンを上げる形をとります。</para>

    <para><filename>list.txt</filename> ファイルに現れないパッケージは、
    利用可能な最新バージョンに (pkgsrc にそれがあれば) アップデートするようにします。
    たとえば、<filename
    role="pkg">meta-pkgs/gnome-devel</filename> メタパッケージに含まれるパッケージのうち
    GNU Autotools に依存するパッケージがこれに該当します。</para>
  </listitem>

  <listitem>
    <para>変更後のメタパッケージからパッチを作り、そこから「新規の」行を抽出します。
    この結果から、pkgsrc のどのパッケージをどの順序でアップデートする必要があるか、
    概要がわかります。</para>

    <screen>&cprompt; <userinput>cvs diff -u gnome-devel gnome-base gnome | grep '^+D' &gt;todo.txt</userinput></screen>
  </listitem>

  <listitem>
    <para>デスクトップのメジャーアップデートの場合は、
    インストールされているパッケージをすべて削除し、まっさらな状態から始めることをおすすめします。</para>
  </listitem>

  <listitem>
    <para>ここが、もっとも長い作業が必要なところです。
    <filename>todo.txt</filename> に書き出された各パッケージを、
    並んでいる順序どおりに更新するという作業を繰り返します。
    デスクトップのメジャーアップデートの場合は、
    全パッケージの更新が完了するまで commit してはいけません。
    未更新のパッケージを壊す可能性があるからです。</para>
  </listitem>

  <listitem>
    <para>パッケージが新しいものになり動作する状態になったら、
    個々のパッケージを一つずつ、適切な log メッセージをつけて commit してゆきます。
    最後に、3 個のメタパッケージの更新と、これらに対応する
    <filename>doc/CHANGES-&lt;YEAR&gt;</filename> および
    <filename role="cvsweb">pkgsrc/doc/TODO</filename> ファイルの変更を
    commit します。</para>
  </listitem>
</orderedlist>

</sect1>

<sect1 id="patching">
<title>修正の指針</title>

<para>GNOME は 100 のパッケージを擁する、pkgsrc の大きな構成要素です。
GNOME パッケージに移植性に関する修正を施した場合は、常に、常に、
<emphasis role="strong">常に</emphasis>、
GNOME 本家の開発者に還元していただくということが重要です (<xref
linkend="components.patches.feedback" />参照)。
彼らに移植性についての注意を喚起して、将来のバージョンが無修正で
NetBSD で構築できるようにするためには、そうするしかないのです。
pkgsrc 独自のパッチを少なくすればするほど、将来の更新は楽になります。
GNOME のメジャーアップデート対応に取り組む開発者としては、
皆さんにそのようにしていただけるとありがたく思います。</para>

<para>最もありふれたバグの報告先は、<ulink
url="http://bugzilla.gnome.org/">GNOME の Bugzilla</ulink> と <ulink
url="http://bugzilla.freedesktop.org/">freedesktop.org の
Bugzilla</ulink> です。GNOME の構成要素すべてがこれらをバグ追跡用に使っているわけではありませんが、
ほとんどはこれらを使っています。バグ報告に際しては、常に、
現在起きている問題や、移植性を最大限にするためにはどのように改良したらよいかについて、
詳細に説明するようにし、また、可能であれば CVS の head に対するパッチをつけてください。
詳しく書けば書くほど、パッチが採用される可能性が高くなります。</para>

<para>また、プリプロセッサーを使った細工で移植性の問題を修正するようなことはしないでください。
FreeBSD で GNOME に取り組む人たちは、彼らのオペレーティングシステムへの GNOME の移植にあたり大きな仕事をしていますが、
このせいで、公式の GNOME のソースに <varname>__FreeBSD__</varname>
や、これと同類のマクロの検査が蔓延してしまっています。これは移植性を損なうものです。
詳細は、私たちのパッチ作成の指針
(<xref linkend="components.patches.guidelines" />)
をご覧ください。</para>

</sect1>

</chapter>
