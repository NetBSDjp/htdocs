<!-- $NetBSD: using.xml,v 1.25 2006/09/10 19:33:05 wiz Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: using.xml,v 1.25 2006/09/10 19:33:05 wiz Exp   -->

<chapter id="using"> <?dbhtml filename="using.html"?>
<title>pkgsrc を使う</title>

	<para>基本的に、pkgsrc には二通りの使い方があります。
	一つ目の使い方は、パッケージ用のツールだけをインストールして、
	他の人が用意したバイナリーパッケージを使うものです。
	これは、pkgsrc のうち <quote>pkg</quote> に相当します。
	二つ目の使い方は、pkgsrc の <quote>src</quote> もインストールするものです。
	こうすると、自分でパッケージを構築することができますし、
	他の人が用意したバイナリーパッケージを使うこともできます。</para>

<sect1 id="using-pkg">
<title>バイナリーパッケージを使う</title>

	<para>バイナリーパッケージを使うためには、管理用のツールがいくつか必要になります。
	NetBSD では、管理用のツールはあらかじめインストールされています。
	NetBSD 以外の各オペレーティングシステムでは、
	まず、管理用のツールをインストールする必要があります。
	以下のプラットフォーム用には、
	パッケージ用のツールをあらかじめ構築したものが用意されており、ダウンロードして
	<filename>/</filename> ディレクトリーに展開するだけで使うことができます。</para>

	<informaltable id="binary-bootstrap-kits">
	<tgroup cols="2">
	<thead><row><entry>プラットフォーム</entry><entry>URL</entry></row></thead>
	<tbody>
	<row><entry>Solaris 9</entry><entry><filename>ftp://ftp0.mh.bbc.co.uk/pub/pkgsrc/packages/bootstrap-pkgsrc/</filename></entry></row>
	<row><entry>Solaris 10</entry><entry><filename>http://public.enst.fr/pkgsrc/packages/bootstrap-pkgsrc/</filename></entry></row>
	</tbody>
	</tgroup>
	</informaltable>

	<para>この構築済みパッケージ用ツールは、基点ディレクトリーとして
	<filename>/usr/pkg</filename> を使い、
	インストールされているパッケージのデータベースとして
	<filename>/var/db/pkg</filename> を使います。
	何らかの理由 (root 権限がないなど) でこの各ディレクトリーが使えない場合は、
	パッケージ用ツールを自分で構築する必要があります。これについては<xref
	linkend="bootstrapping-pkgsrc" />に説明があります。</para>

<sect2 id="finding-binary-packages">
<title>バイナリーパッケージの配布場所</title>

	<para>バイナリーパッケージをインストールするためには、
	まず、バイナリーパッケージがどこで入手できるか知っている必要があります。
	バイナリーパッケージは CD-ROM, DVD や、FTP 
	または HTTP 経由で入手することができます。</para>

	<para>バイナリーパッケージは、
	以下の場所にあります。</para>

	<informaltable id="binary-packages">
	<tgroup cols="2">
	<thead><row><entry>プラットフォーム</entry><entry>URL</entry></row></thead>
	<tbody>
	<row><entry>NetBSD</entry><entry><filename>ftp://ftp.NetBSD.org/pub/NetBSD/packages/</filename></entry></row>
	<row><entry>Solaris 9</entry><entry><filename>ftp://ftp0.mh.bbc.co.uk/pub/pkgsrc/packages/</filename></entry></row>
	<row><entry>Solaris 10</entry><entry><filename>http://public.enst.fr/pkgsrc/packages/</filename></entry></row>
	</tbody>
	</tgroup>
	</informaltable>

	<para>これらのディレクトリーはたいてい、複数のプラットフォーム用の
	バイナリーパッケージを含んでいます。<filename>All</filename>
	というディレクトリーがみつかるまで、
	お使いのマシンのアーキテクチャーやオペレーティングシステムに応じて、
	適切なサブディレクトリーを選んでいってください。
	<filename>All</filename> ディレクトリーは、すべてのバイナリーパッケージを含んでいます。
	さらに、カテゴリー別のサブディレクトリーがあり、
	<filename>../All</filename>
	にあるバイナリーパッケージの実体へのシンボリックリンクを含んでいます。
	このディレクトリー配置は、アクセス方法が HTTP, FTP, NFS, CD-ROM
	あるいはローカルファイルシステムのいずれであるかにかかわらず、
	すべてのパッケージの置場に共通のものです。</para>

</sect2>
<sect2 id="installing-binary-packages">
<title>バイナリーパッケージをインストールする</title>

      <para>もし、コンパイル済みのパッケージのファイルがCD-ROM上にある、あるいはハードディ
        スク上にダウンロードされているのであれば、以下のコマンドでインストールする
        ことができます(最初にrootに
        <command>su</command>している事を確認してください):</para>

        <screen><prompt>#</prompt> <userinput>pkg_add /path/to/package.tgz</userinput></screen>

      <para>もし、FTPアクセスが可能で、インストール前にFTPを使ってパッケージをダウンロー
        ドしたくないのであれば、<command>pkg_add</command>にFTPのURLを指定して自動でダウンロードさせる
        事もできます。</para>

      <screen><prompt>#</prompt> <userinput>pkg_add ftp://ftp.NetBSD.org/pub/NetBSD/packages/&lt;OSVERSION&gt;/&lt;ARCH&gt;/All/package</userinput></screen>

      <para>パッケージを実行するためにあらかじめ必要な他のパッケージがインストー
        ルされるかもしれない事にも注意してください。一緒にインストールされる他のパッ
        ケージも同じ場所に存在していると仮定されます。</para>

      <para>タイプを少なくするために、パス (リモート URL を含む)
        をセミコロンで区切ったものを <varname>PKG_PATH</varname>
        環境変数に設定することができます。
        このパスの末尾にスラッシュをつけることはできません。</para>

      <para><filename>All</filename> ディレクトリーのほかに、
        脆弱性が知られているバイナリーパッケージの移動先である
        <filename>vulnerable</filename> ディレクトリーが存在します。
        バイナリーパッケージを削除してしまうと、
        依存性が失われることがあるため、移動するのです。
        ここに移動されたパッケージを使うためには、<varname>PKG_PATH</varname>
        に <filename>vulnerable</filename> ディレクトリーを追加します。ただし、
        <filename role="pkg">security/audit-packages</filename> を定期的に
	(特に、パッケージを新たにインストールした後には) 実行して、
	脆弱性の影響がある構成となっているかどうかを確認するようにしてください。
        <varname>PKG_PATH</varname> はたとえば以下のようになります:
      <filename>ftp://ftp.NetBSD.org/pub/NetBSD/packages/&lt;OSVERSION&gt;/&lt;ARCH&gt;/All;ftp://ftp.NetBSD.org/pub/NetBSD/packages/&lt;OSVERSION&gt;/&lt;ARCH&gt;/vulnerable</filename>
        なお、セミコロン (';') はシェルにとって特別な意味を持つ文字ですので、
        クォートする必要があるでしょう。</para>

      <para>パッケージをインストールした後に、<varname>PATH</varname>に
        <filename>/usr/pkg/bin</filename> と <filename>/usr/pkg/sbin</filename> が含まれている事を確
        認してください。これで、インストールされたプログラムを実際に使い始めること
        ができます。</para>
    </sect2>

<sect2 id="using.pkg_delete">
<title>パッケージをアンインストールする</title>

	<para>パッケージをアンインストールする方法は、そのパッケージを、
	ソースコードからインストールしたかバイナリーパッケージからインストールしたかにかかわらず同じです。
	どちらの方法でインストールされたかは、<command>pkg_delete</command> コマンドは一切関知しません。
	パッケージの削除は、<command>pkg_delete
	<replaceable>package-name</replaceable></command> を実行するだけでおこなうことができます。
	パッケージ名はバージョン番号をつけてもつけなくてもかまいません。
	一連のパッケージをアンインストールするために、
	たとえば <literal>*emacs*</literal> のようにワイルドカードを使うこともできます。
	この場合、ワイルドカードが
	<literal>pkg_delete</literal> に渡る前にシェルに展開されないようにするため、
	ワイルドカードはかならずクォートするようにします。</para>

	<para><option>-r</option> オプションは非常に強力です。これを使うと、
	指定したパッケージに依存しているパッケージをすべて削除してから、
	指定したパッケージそのものを削除します。たとえば、

<screen>
    &rprompt; <userinput>pkg_delete -r jpeg</userinput>
</screen>

	は、jpeg および jpeg を使うすべてのパッケージを削除します。これにより、
	jpeg パッケージをアップグレードすることが可能になります。</para>

</sect2>

<sect2 id="using.pkg_info">
<title>インストールされているパッケージの情報を得る</title>

	<para><command>pkg_info</command> は、インストールされているパッケージや、
	バイナリーパッケージのファイルに関する情報を表示します。</para>

</sect2>

<sect2 id="vulnerabilities">
<title>インストール済パッケージの脆弱性チェック</title>

<para>
NetBSD セキュリティーオフィサーとパッケージグループでは、
pkgsrc に含まれる (あるいは含まれていた) パッケージの既知の脆弱性のリストを
保守しています。このリストは、 NetBSD FTP サイトの
<ulink url="ftp://ftp.NetBSD.org/pub/pkgsrc/distfiles/vulnerabilities"/>
から入手できます
</para>

<para>
<filename role="pkg">security/audit-packages</filename> を使うと、
このリストを自動的にダウンロードし、
システムにインストールされているパッケージすべてについて
セキュリティー検証をすることができます。
</para>

<para>
<filename role="pkg">security/audit-packages</filename>
は、ふたつの部分からできています。
ひとつは <quote>download-vulnerability-list</quote> で、 NetBSD FTP サイトから
脆弱性のリストをダウンロードするものです。もうひとつは
<quote>audit-packages</quote> で、インストールされているパッケージに脆弱性が
ないかどうか検証するものです。脆弱性のあるパッケージがあった場合、
次のように出力してくれます:
</para>

<screen>Package samba-2.0.9 has a local-root-shell vulnerability, see
http://www.samba.org/samba/whatsnew/macroexploit.html</screen>

<para>
<filename 
role="pkg">security/audit-packages</filename>
では、
<ulink url="ftp://ftp.NetBSD.org/pub/pkgsrc/distfiles/vulnerabilities">vulnerabilities</ulink>
ファイルを毎日ダウンロードして、さらに、パッケージの検証を
daily security script で行なうように設定することができます。
これについての詳細は、 <filename role="pkg">security/audit-packages</filename> の <ulink
url="http://cvsweb.NetBSD.org/bsdweb.cgi/pkgsrc/security/audit-packages/MESSAGE?rev=HEAD&amp;content-type=text/x-cvsweb-markup">MESSAGE</ulink>
ファイルに書かれています。
</para>
</sect2>

<sect2 id="pkg_versions">
<title>インストール済パッケージのより新しいバージョンが pkgsrc にあるかどうか調べる</title>
<para>
インストール済パッケージが最新かどうかを確認するには、
<filename role="pkg">pkgtools/pkglint</filename> をインストールして、
<command>lintpkgsrc</command> に <quote>-i</quote> を付けて実行します。たとえば以下のようになります。
</para>
<screen><prompt>%</prompt> <userinput>lintpkgsrc -i</userinput>
...
Version mismatch: 'tcsh' 6.09.00 vs 6.10.00</screen>
<para>このようになった場合、パッケージを更新し、そのパッケージに依存しているパッケージをすべて再構築するために、
<command>make update</command> を使うことができます。
</para>
</sect2>

<sect2 id="using.pkg_admin">
<title>その他の管理用機能</title>

	<para><command>pkg_admin</command> は、パッケージシステムにおける、
	各種の管理用機能を実行します。</para>

</sect2>

    <sect2 id="a-word-of-warning">
      <title>警告</title>

      <para>&man.pkg.add.1; マニュアルページで警告されている、自分自身で作ったものでないバイナリー
        パッケージをインストールすることが孕む危険性、無思慮にこのようなファイルを
        インストールすることにより、あなたのシステムにセキュリティーホールが生じる
        事についてよく注意してください。</para>

      <para>もちろん、パッケージ、パッケージの構築用のコンパイラー、
      その他、呼び出されるすべてのツールのソースコードを完全に読んで理解したわけではない場合は、
      ソースからインストールしたパッケージにもすべて、
      同じ警告があてはまります。</para>

    </sect2>
  </sect1>

  <sect1 id="building-packages-from-source">
    <title>ソースからパッケージを構築する</title>

<para>pkgsrc を入手すると、 <filename>pkgsrc</filename> ディレクトリーには、
カテゴリー別に整理されたパッケージ一式が含まれます。
オンラインでパッケージの索引を見られますし、また、 <filename>pkgsrc</filename>
ディレクトリーで <command>make readme</command> してローカルで <filename>README.html</filename>
を作って、 <filename role="pkg">www/lynx</filename> や
<filename role="pkg">www/firefox</filename> などの好みの
web ブラウザーで見られるようにすることもできます。</para>

<para>パッケージのインストール先の<emphasis>プレフィックス</emphasis>は、
デフォルトでは <filename>/usr/pkg</filename> です。これを変えたい場合は、
<filename>mk.conf</filename> で <varname>LOCALBASE</varname>
を設定してください。一つのシステム内で複数の
<varname>LOCALBASE</varname> を定義して使い分けるようなことはしないでください
(chroot 環境内は除く)。 </para>

    <para>以下、本章では、パッケージがすでに pkgsrc に含まれていると仮定
      しています。もし、そうでなれば、<xref linkend="developers-guide"/>で、
      パッケージを新たに作る方法をご覧ください。</para>

    <sect2 id="requirements">
      <title>必要なもの</title>

      <para>ソースからパッケージを構築するためには、機能する C
      コンパイラーが必要です。NetBSD の場合は、
      <quote>comp</quote> および <quote>text</quote>
      配布物一式をインストールしておく必要があります。X11関連のパッケージを
      構築する場合は、さらに<quote>xbase</quote>および<quote>xcomp</quote>
      配布物一式も必要です。</para>
      <!-- FIXME: what about installing x11/XFree86-*? -->
    </sect2>


    <sect2 id="fetching-distfiles">
      <title>配布ファイルの取得</title>

      <para>パッケージを構築するうえで最初にすることは、配布ファイル (未変更のソース)
      のダウンロードです。配布ファイルがまだダウンロードされていない場合、
      pkgsrc は自動的に配布ファイルを取得します。</para>

<para>
<filename>distfiles</filename> ディレクトリー
に必要なファイルが
すでに存在していれば、インターネットに接続する必要はありません。
CD-ROMなどにdistfilesがある場合には、CD-ROMを <filename>/cdrom</filename> にmountし、
<screen>DISTDIR=/cdrom/pkgsrc/distfiles</screen>
を <filename>mk.conf</filename>
に加えて、使うことができます。
</para>

      <para>主要な配布サイトをあなたのところに近いサイトで上書きす
        ることができます。
        <filename>pkgsrc/mk/defaults/mk.conf</filename>の例の、特に<varname>MASTER_SORT</varname>,
        <varname>MASTER_SORT_REGEX</varname>,
        <varname>INET_COUNTRY</varname> 定義を参照してください。これにより、帯域幅
        と時間が節約できるかもしれません。</para>

      <para>これらの設定は、シェルの環境変数でも変更できますし、その設定を今後も有効に
        したければ、
        <filename>/etc/mk.conf</filename>
        ファイルにその定義を書き加えておくこともできます。</para>

<para>
パッケージが他のパッケージ(例えば <filename role="pkg">meta-pkgs/kde3</filename> など)
に依存している場合、
ダウンロードとコンパイルを交互に繰り返すことがあります。
最初に必要なすべてのソースを確実にダウンロードするには、
次のコマンドを使用します:
<screen><prompt>%</prompt> <userinput>make fetch-list | sh</userinput></screen>
このコマンドは必要なファイルを取ってきて<filename>distfiles</filename> ディレクトリー
に保存するためのシェルコマンドを出力、実行します。必要なファイルを手動で
ダウンロードするという方法もあります。
</para>

    </sect2>

    <sect2 id="how-to-build-and-install">
      <title>構築とインストール方法</title>

<para>
ソフトウェアがダウンロードされると、パッチが適用された上で、
コンパイルされます。それにかかる時間はあなたのコンピューターによりますし、
そのソフトウェアが依存している他のパッケージの数とそれらのコンパイルに
かかる時間にもよります。
</para>

      <note><para>bootstrap または pkgsrc を NetBSD 以外のシステムで使う場合は、
        この手引きで例示されている <quote>make</quote> ではなく
        pkgsrc の <command>bmake</command> コマンドを使ってください。</para></note>

     <para>たとえば、パッケージの各構成要素を構築するには、シェルプロンプトで</para>

      <screen>&cprompt; <userinput>cd misc/figlet</userinput>
&cprompt; <userinput>make</userinput></screen>

      <para>とします。</para>

	<para>次は新たにコンパイルされたプログラムを、
	実際にあなたのシステムにインストールします。
	インストールしようとしているパッケージのディレクトリーにいる間に

<screen>
    <prompt>%</prompt> <userinput>make install</userinput>
</screen>

	と入力してください。</para>

	<para>パッケージをシステムにインストールするには root 権限が必要なことがあります。
        ただし、pkgsrc には<emphasis>必要な時のみ  su する</emphasis>機能があり、
        実際のインストール時にのみ root になることができます。</para>

<para>そのソフトウェアは今まさにインストールされ、
使用できるようにセットアップされたことになります。
もうこれ以上コンパイル後の作業ファイルは必要とされないので、

<screen>
    <prompt>%</prompt> <userinput>make clean</userinput>
</screen>

	と入力し作業ディレクトリー内のファイルを削除してしまってもかまいません。
	もし、プログラムをコンパイルするときに、
	依存関係により他のパッケージがコンパイル/インストールされたならば、
	それらも次のコマンドにより、きちんと削除することができます。</para>

<screen>
    <prompt>%</prompt> <userinput>make clean-depends</userinput>
</screen>

      <para>figlet ユーティリティーを例にあげると、<xref linkend="logs"/>のように構築することに
        より、システムにインストールすることができます。</para>

      <para>プログラムはパッケージツリーのデフォルトルート- <filename>/usr/pkg</filename>にインストール
        されます。もし、このディレクトリーが趣味にあわないのであれば、環境変数
        <varname>LOCALBASE</varname>
        を設定してください。この値はパッケージツリーのルートとして使用さ
        れます。例えば、<filename>/usr/local</filename>を使う場合、
        <varname>LOCALBASE=/usr/local</varname> と設定してください。
        なお、これにはパッケージ専用のディレクトリーを使い、他のプログ
        ラムと共有させないようにします(つまり、 <varname>LOCALBASE=/usr</varname> などとしてはいけませ
        ん)。また、<varname>LOCALBASE</varname>ツリー内には、独自のファイルやディレクトリー
        (<filename>src/</filename>,
        <filename>obj/</filename>, <filename>pkgsrc/</filename>
        のようなもの)は一切追加しないようにしてください。これは、パッ
        ケージシステムがインストールするプログラムなどのファイルが、そこにインストー
        ルされているかもしれない別のファイルと衝突することがないようにするためです。</para>

      <para>いくつかのパッケージは、構築時にいくつかのコンフィギュレーションオプション
        を変えるために<filename>/etc/mk.conf</filename>を参照します。デフォルトの設定項目については、
        <filename>pkgsrc/mk/defaults/mk.conf</filename>をのぞいてみてください。<varname>LOCALBASE</varname>
        といっ
        た環境変数は、pkgsrc使用時に毎回使えるように<filename>/etc/mk.conf</filename>で設定しておくこと
        ができます。</para>

      <para>時々、 パッケージの構築やインストールの際に、<quote>水面下</quote>で何が起きているかを
        見たいことがあります。これは、デバッグのためなのかもしれませんし、好奇心が
        高じたものかもしれません。このような用途に使うための変数がいくつも用意され
        ています。</para>

      <orderedlist>
        <listitem>
          <para>&man.make.1;コマンドを<varname>PKG_DEBUG_LEVEL=2</varname>付きで呼び出すと、大量の情報が表示さ
            れるようになります。たとえば、</para>

          <screen><userinput>make patch PKG_DEBUG_LEVEL=2</userinput></screen>

          <para>は、<quote>patch</quote>の段階および、そこに至るまでに呼び出されるコマンドをすべて表示し
            ます。</para>
        </listitem>

        <listitem>
          <para>特定の&man.make.1;定義の値を知りたい場合は、show-varターゲットとともに、
            <varname>VARNAME</varname>定義を使います。たとえば、
            &man.make.1;変数
            <varname>LOCALBASE</varname>の展開結果を表示するには、以下のようにします。</para>

          <screen>&cprompt; <userinput>make show-var VARNAME=LOCALBASE</userinput>
/usr/pkg
&cprompt;
          </screen>

        </listitem>
      </orderedlist>

      <para>自分で作った(次章参照)、手動でpkgsrc/packagesに置いた、またはリモートFTPサー
        バーに置かれたバイナリーパッケージをインストール
        したい場合は、"bin-install"ターゲットを使うことができます。このターゲットは、
        - もし可能ならば - &man.pkg.add.1;を使ってバイナリーパッケージをインストールするほ
        か、<command>make package</command>をおこないます。検索先リモートFTPサーバーのリストは
        <varname>BINPKG_SITES</varname>変数に保持され、デフォルトはftp.NetBSD.orgです。&man.pkg.add.1;に与え
        るべきフラグはすべて、<varname>BIN_INSTALL_FLAGS</varname>変数で保持することができます。詳細は
        <filename>pkgsrc/mk/defaults/mk.conf</filename>をご覧ください。</para>

      <para>最後に警告: 標準でない<varname>LOCALBASE</varname>
        の設定をしたシステムの場合は、
        各パッケージのインストール前にこれらを設定するようにしてください。複数のディ
        レクトリーを同じ目的用に分散して使うことはできないからです。そのようなこと
        をすると、pkgsrcはインストール済みのパッケージを正しく検出することができず、
        無惨に失敗することになるでしょう。また、コンパイル済バイナリーパッケージは、
        通常はデフォルトの<varname>LOCALBASE</varname>である
        <filename>/usr/pkg</filename>を使って構築されているので、標準で
        ない<varname>LOCALBASE</varname>を使っている場合は、とにかくコンパイル済バイナリーパッケージを
        インストールしては<emphasis>いけません</emphasis>。</para>
    </sect2>

    <sect2 id="selecting-the-compiler">
      <title>コンパイラーを選ぶ</title>

      <para>pkgsrc は、標準では GCC を使ってパッケージを構築します。
        これは /etc/mk.conf で以下の変数を設定して変えることができます。</para>

      <variablelist>
        <varlistentry>
          <term><varname>PKGSRC_COMPILER</varname>:</term>

          <listitem>
            <para>パッケージ構築時に使われる一連のコンパイラーを指定する値を並べたものです。
              以下の値を使うことができます。</para>

<!-- TODO: update this list after jlam's changes in May 2005 -->
            <itemizedlist>
              <listitem><para><varname>distcc</varname>:
                分散 C/C++ コンパイラー (連鎖可能)</para>
              </listitem>

              <listitem><para><varname>ccache</varname>:
                コンパイラーキャッシュ (連鎖可能)</para>
              </listitem>

              <listitem><para><varname>gcc</varname>:
                GNU C/C++ コンパイラー</para>
              </listitem>

              <listitem><para><varname>mipspro</varname>:
                Silicon Graphics, Inc. MIPSpro (n32/n64)</para>
              </listitem>

              <listitem><para><varname>mipspro</varname>:
                Silicon Graphics, Inc. MIPSpro (o32)</para>
              </listitem>

              <listitem><para><varname>sunpro</varname>:
                Sun Microsystems, Inc. WorkShip/Forte/Sun ONE Studio</para>
              </listitem>
            </itemizedlist>

            <para>標準では
              <quote><varname>gcc</varname></quote> になります。
              <varname>PKGSRC_COMPILER</varname> の設定には、適切なコンパイラー本体とともに、
              <varname>ccache</varname> と
              <varname>distcc</varname> のいずれかまたは両方を併用することができます。
              たとえば <quote><varname>ccache gcc</varname></quote> のようにします。
              この変数の設定では、コンパイラー本体を示す値を最後に置くようにします。</para>
	  </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>GCC_REQD</varname>:</term>
<!--
   TODO: what are the effects of setting GCC_REQD if PKGSRC_COMPILER
   is not gcc?
-->
          <listitem>
            <para>パッケージの構築用として、最低限必要な
              GCC のバージョンを指定します。システム附属の GCC
              がこの条件を満たさない場合、pkgsrc はそのかわりに使うため、
              GCC のパッケージを構築してインストールします。</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

</sect1>
</chapter>
