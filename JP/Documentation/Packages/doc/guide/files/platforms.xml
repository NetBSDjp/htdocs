<!-- $NetBSD: platforms.xml,v 1.62 2010/04/25 13:15:48 obache Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: platforms.xml,v 1.62 2010/04/25 13:15:48 obache Exp   -->

<chapter id="platforms">
  <title>&os; 以外のシステムで pkgsrc を使う</title>

<sect1 id="binarydist">
<title>バイナリー配布</title>

<para><xref linkend="using-pkg"/>をご覧ください。</para>

</sect1>

  <sect1 id="bootstrapping-pkgsrc">
    <title>pkgsrc を使う準備をする</title>

    <para>ブートストラップキットは、以下のようにして簡単にソースからインストールすることができます。</para>

    <screen>
&rprompt; <userinput>env CVS_RSH=ssh cvs -d anoncvs@anoncvs.NetBSD.org:/cvsroot checkout pkgsrc</userinput>
&rprompt; <userinput>cd pkgsrc/bootstrap</userinput>
&rprompt; <userinput>./bootstrap</userinput>
    </screen>

    <para>bootstrap を実行する前に、上で例示した方法以外で
    pkgsrc を取得する方法については、<xref linkend="getting"/>を参照してください。
    上で例示した <command>bootstrap</command> コマンドでは、
    <emphasis>prefix</emphasis> (プログラムのインストール先) をデフォルトの
    <filename>/usr/pkg</filename> とし、
    パッケージデータベースのディレクトリー (pkgsrc 内部の記録用) を
    <filename>/var/db/pkg</filename> とします。
    これらをコマンドライン引数で設定することもできます。</para>

    <note>
      <para>bootstrap は  <command>bmake</command> ツールをインストールします。
      pkgsrc で構築をおこなう際には、この <command>bmake</command> を使ってください。
      たとえばこの手引きにおいて <quote>make</quote> は
      <command>bmake</command> に読み替えてください。</para>
    </note>

  </sect1>

  <sect1 id="platform-specific-notes">
    <title>プラットフォーム別の覚書</title>

    <para>いくつかのプラットフォームについては、以下のことを知っておくとよいでしょう。</para>

    <sect2 id="darwin">
      <title>Darwin (Mac OS X)</title>

      <para>対応は、 Darwin 5.x 以上に対しておこなわれています。
      始める前に、Apple Developer Connection から Mac OS X Developer
      Tools をダウンロードしてインストールする必要があります。詳細は
      <ulink url="http://developer.apple.com/macosx/">http://developer.apple.com/macosx/</ulink>
      をご覧ください。また、X11 Window System を使うパッケージを構築したい場合は、
      X11 (Developer Tools に附属するオプションパッケージ) をインストールしておくことも必要です。</para>
    </sect2>

    <sect2 id="freebsd">
      <title>FreeBSD</title>

      <para>確認および対応は、 FreeBSD 4.7 および 5.0 に対しておこなわれています。
      これら以外のバージョンでも動くかもしれません。</para>

      <para>ブートストラップキットのインストールに際しては、
      FreeBSD のユーザーランドのツールと衝突することがないように注意を払ってください。以下のような複数の事項があります。</para>

      <orderedlist>
	<listitem>
	  <para>FreeBSD の ports は、 <filename>/var/db/pkg</filename>
	  以下にパッケージデータベースを置きます。このため、
	  ブートストラップスクリプトの --pkgdbdir オプションで、
	  別の場所 (たとえば <filename>/usr/pkgdb</filename>)
	  を指定することをおすすめします。</para>
	</listitem>

	<listitem>
	  <para>FreeBSD ports のツールを使う予定がない場合は、混同を避けるために、
	  それらを移動してしまってもいいかもしれません。たとえば以下のようにします。</para>

	  <screen>
&rprompt; <userinput>cd /usr/sbin</userinput>
&rprompt; <userinput>mv pkg_add pkg_add.orig</userinput>
&rprompt; <userinput>mv pkg_create pkg_create.orig</userinput>
&rprompt; <userinput>mv pkg_delete pkg_delete.orig</userinput>
&rprompt; <userinput>mv pkg_info pkg_info.orig</userinput>
	  </screen>
	</listitem>

	<listitem>
	  <para>ブートストラップスクリプトを使った際、
	  &mk.conf; ファイルの例は
	  <filename>/etc/mk.conf.example</filename> ファイルに置かれます。</para>
	</listitem>
      </orderedlist>
    </sect2>

    <sect2 id="interix">
      <title>Interix</title>

      <para>Interix は Windows NT カーネルの POSIX 準拠のサブシステムで、
      Cygwin よりも密接にカーネルと統合された Unix 風の環境を提供します。
      Interix は Windows Services for Unix パッケージの一部であり、
      ライセンスされた Windows 2000, XP (XP Home は含まず), 2003 のコピー用として、
      無料で使うことができます。SFU は、<ulink
      url="http://www.microsoft.com/windows/sfu/">http://www.microsoft.com/windows/sfu/</ulink> からダウンロードできます。</para>

      <para>確認は、Services for Unix 3.5 に対しておこなわれています。 3.0
      や 3.1 でも動作するかもしれませんが、公式には対応していません。  (3.0/3.1 の主な違いは、
      pthreads がないことですが、このほかにも libc に欠けているものがあるかもしれません。)</para>

      <para>Services for Unix Applications (別名 SUA) は、Windows Server 2003 R2
      (5.2), Windows Vista および Windows Server 2008
      (6.0), Windows 7 および Windows Server 2008 R2 (6.1)
      に統合されている構成要素です。本稿執筆時点において、
      SUA の Interix 6.0 (32 ビット) サブシステムで確認がおこなわれています。6.0 (64 ビット) および 6.1
      (32 ビットおよび 64 ビット) でも動作するかもしれません。
      および Windows Vista に統合されている構成要素です。本稿執筆時点において、
      Interix 5.x サブシステムで、pkgsrc を使った確認はまだおこなわれていません。</para>

      <sect3 id="platform.interix-sfu-install">
	<title>Interix/SFU のインストールに際して</title>

	<para>pkgsrc を使うためには、Windows Services for Unix 3.5 の配布物のうち、
	最低限、以下のパッケージをインストールする必要があります。</para>

	<itemizedlist>
	  <listitem><para>Utilities -&gt; Base Utilities</para></listitem>
	  <listitem><para>Interix GNU Components -&gt; (all)</para></listitem>
	  <listitem><para>Remote Connectivity</para></listitem>
	  <listitem><para>Interix SDK</para></listitem>
	</itemizedlist>

	<para>Interix 上で pkgsrc を使う場合、Utilities 以下の "UNIX Perl"
	はインストールしないでください。これは共有モジュールに対応していない Perl 5.6 で、
	/usr/local にインストールされますが、混乱を起こすだけです。これのかわりに、
	pkgsrc (またはバイナリーパッケージ) の Perl 5.8 をインストールします。</para>

	<para>Remote Connectivity 以下の "Windows Remote Shell Service"
	のインストールは必須ではありませんが、inetd を動作させるために Remote Connectivity
	そのものはインストールすることをおすすめします。</para>

	<para>インストール中に、Interix のプログラムに対して setuid を有効にするかどうか、
	また、パス名の大文字と小文字を標準で区別するかどうかを尋ねられるかもしれません。
	setuid は有効にするようにし、また大文字と小文字はかならず区別するようにします。
	(大文字と小文字を区別しないと、
	perl をはじめ多くのプログラムが構築できなくなります。)</para>

	<para>註:  最近の Windows サービスパックでは、
	バイナリーを実行する方法を (データ実行防止機能を使ったものに) 変更します。
	pkgsrc その他の gcc でコンパイルされたバイナリーを信頼して使うためには、
	POSIX.EXE, PSXDLL.DLL, PSXRUN.EXE, PSXSS.EXE (899522 またはこれより新しいもの)
	を含んだホットフィックスをインストールする必要があります。
	ホットフィックスは Microsoft からサポート窓口を通じて提供されていますが、
	Debian Interix Port が、ほとんどの Interix ホットフィックスを個人的に使えるように <ulink
	url="http://www.debian-interix.net/hotfixes/">http://www.debian-interix.net/hotfixes/</ulink>
	に用意しています。</para>

	<para>Interix を使えるようにするためには、上述のホットフィックスのほか、
	Data Execution Prevention を完全に無効化する必要があるかもしれません。
	これが必要となるのは、ある種の CPU を使っている場合だけです。
	上述のホットフィックスのいずれかひとつをインストールした後にも
	gcc その他のアプリケーションが依然として繰り返し segfault する場合には、
	Windows ブートドライブ上の適切な "boot.ini" 行に、
	以下のオプションを追加することができます: /NoExecute=AlwaysOff
	(警告: これは DEP を完全に無効化するものであり、
	Administrators グループのユーザーとしてアプリケーションをよく実行する場合には、
	セキュリティー上の危険となる可能性があります。)</para>

      </sect3>

      <sect3 id="platform.interix-sfu-postinstall">
	<title>Interix/SFU がインストール済みの場合はどうすればよいか</title>

	<para>SFU がすでにインストールされており、その設定を変更して
	pkgsrc が動作するようにしたい場合は、以下のことに気をつけてください。</para>

	<itemizedlist>
	  <listitem>
	    <para>UNIX Perl をアンインストールするため、Add/Remove Programs を使い、Microsoft
	    Windows Services for UNIX を選んで Change をクリックします。インストーラーで
	    Add or Remove を選んでから Utilities-&gt;UNIX Perl のチェックを外します。</para>
	  </listitem>
	  <listitem>
	    <para>ファイルシステムの大文字と小文字の区別を有効にするため、REGEDIT.EXE を実行して
	    以下のレジストリーキーを変更します。</para>
	    <para>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\kernel</para>
	    <para>DWORD 値 "obcaseinsensitive" を 0 に設定した後、リブートします。</para>
	  </listitem>
	  <listitem>
	    <para>setuid バイナリーを有効にするため (これは必須ではありません)、REGEDIT.EXE を実行して
	    以下のレジストリーキーを変更します。</para>
	    <para>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Services for UNIX</para>
	    <para>DWORD 値 "EnableSetuidBinaries" を 1 に設定した後、リブートします。</para>
	  </listitem>
	</itemizedlist>

      </sect3>
      <sect3 id="platform.interix-notes">
	<title>pkgsrc を使ううえで重要な覚書</title>

	<para>パッケージの管理者 (pkgsrc の "su" ユーザーと
	"pkg_add" を実行するユーザーのいずれかまたは両方) は、ローカルの Administrators
	グループに所属している必要があります。bootstrap を実行するユーザーも同様です。これは、通常の
	pkgsrc が "root" を要求するのにくらべ、若干緩い条件です。</para>

	<para>パッケージの管理者は umask を 002 に設定するようにします。そうしておかないと、
	自動的に "make install" が文句をいうようになります。こう設定することで、
	/var/db/pkg 以下に書かれるディレクトリーに Administrators グループが確実に書き込み可能とできます。</para>

	<para>http://www.interopsystems.com/ にある人気のある Interix バイナリーパッケージは、
	古いバージョンの pkgsrc の pkg_* ツールを使います。
	理想的には、これらは pkgsrc と混用しないほうがよいものです。
	これらを pkgsrc のパッケージと同時に使う場合は、かならず、
	それぞれのバイナリーパッケージに応じて適切な pkg_* ツールを使うようにしてください。</para>

	<para>DOS 型のコンソールウィンドウ (csh および ksh
	のスタートアップショートカットから起動されるものを含む)
	用の TERM の設定は "interix" です。
	たいていのシステムには、そのような termcap/terminfo エントリーがありませんが、
	ほとんどの場合、以下のような .termcap エントリーを用意すれば十分です。</para>

	<programlisting>
interix:kP=\E[S:kN=\E[T:kH=\E[U:dc@:DC@:tc=pcansi:
	</programlisting>

      </sect3>
      <sect3 id="platform.interix-limits">
	<title>Interix プラットフォームの制約</title>

	<para>Interix は、完全な Unix 風のプラットフォームの
	とっつきやすく柔軟な代替品としては十分なものですが、Interix
	を最大限に活用したい場合は、若干の制約があることを知っておくとよいでしょう。</para>

	<itemizedlist>

	  <listitem><para><emphasis role="strong">X11:</emphasis></para>
	  <para>Interix には標準的な X11R6 クライアントライブラリー一式が附属しており、
	  X11 にもとづくアプリケーションを実行することができますが、
	  X サーバーは附属<emphasis>しません</emphasis>。X サーバーの選択肢としては、
	  <ulink url="http://www.starnet.com/products/xwin32/">StarNet X-Win32</ulink>,
	  <ulink url="http://connectivity.hummingbird.com/products/nc/exceed/">Hummingbird Exceed</ulink>
	  (Interix 用に調整された
	  <ulink url="http://www.interopsystems.com/InteropXserver.htm">Interop X Server</ulink>
	  というものを、Interop Systems が提供しています) や、
	  <ulink url="http://x.cygwin.com/">Cygwin</ulink>
	  に含まれるフリーの X11 サーバーがあります。</para>
	  </listitem>

	  <listitem><para><emphasis role="strong">X11 アクセラレーション:</emphasis></para>
	  <para>Interix は、Win32 アプリケーションとは完全に別の
	  NT サブシステム内で動いているため、現在のところ、アクセラレーションのための
	  X11 プロトコルの各種拡張 (MIT-SHM や DGA など) には対応していません。
	  ローカルの X サーバーを使った対話的なアプリケーションのほとんどは、
	  そこそこ速く動きますが、フルモーションビデオなど画像に特化したアプリケーションを動かすには、
	  思ったよりも速い CPU が必要になるかもしれません。</para></listitem>

	  <listitem><para><emphasis role="strong">オーディオ:</emphasis></para>
	  <para>Interix は、オーディオ出力にネイティブで対応していません。
	  オーディオに対応するため、pkgsrc では Interix 上で <command>esound</command>
	  クライアントサーバー型オーディオシステムを使っています。
	  他のほとんどのプラットフォームとは異なり、
	  <filename role="pkg">audio/esound</filename> パッケージには、
	  <command>esd</command> サーバーが含まれません。
	  Interix ホストを経由してオーディオを出力するには、
	  <filename role="pkg">emulators/cygwin_esound</filename>
	  パッケージもあわせてインストールする必要があります。</para></listitem>

	  <listitem><para><emphasis role="strong">CD/DVD, USB, SCSI:</emphasis></para>
	  <para>現在のところ、Interix はデバイスへの直接のアクセスに対応していませんので、
	  CD/DVD ドライブ、USB デバイス、SCSI デバイスを、
	  ファイルシステム経由以外の方法で使うことはできません。このため、
	  Interix を使って、直接 CD/DVD を焼くことなどはできません。</para></listitem>

	  <listitem><para><emphasis role="strong">テープドライブ:</emphasis></para>
	  <para>CD-ROM や SCSI デバイスと同様の制約があるため、
	  Interix ではテープドライブに直接アクセスすることもできません。ただし、
	  Cygwin を介して使うことで (Cygwin の esound
	  サーバーを介してオーディオを使えるように)
	  テープドライブにアクセスできるようにするための作業がおこなわれています。</para></listitem>

	</itemizedlist>
      </sect3>
      <sect3 id="platform.interix-knownissues">
	<title>Interix 上での pkgsrc に関する、既知の問題</title>

	<para>一般的に、Windows システム上に "root" ユーザーを用意することは必須ではありません。
	ユーザーがローカルの Administrators グループに属してさえいれば、それで十分です。
	ただし、現在のところ、パッケージのなかには
	"root" という名前のユーザーが特権ユーザーであることを前提にしているものがあります。
	そのようなパッケージのために、"root" という名前のユーザーを作ってもかまいませんが、
	ローカルの Administrators グループ (または、お使いの言語でこれに対応するもの)
	に属させるようにしてください。</para>

	<para><command>pkg_add</command> は、<filename>$PKG_DBDIR</filename> 内のディレクトリーを、モード 0775 ではなく
	0755 で作成します。この問題を回避するため、当面は、ローカルの
	Administrator (または、お使いの言語でこれに対応するもの)
	としてパッケージをインストールするか、
	各パッケージのインストール後に以下のコマンドを実行してください。</para>

	<screen>
&rprompt; <userinput>chmod -R g+w $PKG_DBDIR</userinput>
	</screen>

      </sect3>
    </sect2>

    <sect2 id="irix">
      <title>IRIX</title>

      <para>機能する C コンパイラー、つまり、 gcc または SGI の MIPS
      および MIPSpro コンパイラー (cc/c89) が必要です。 <varname>CC</varname> 環境変数を、
      使用するコンパイラーに応じて設定してください。
      MIPSpro コンパイラースイートのライセンスがない場合は、<ulink
      url="http://freeware.sgi.com/">http://freeware.sgi.com/</ulink>
      から gcc の tar 配布ファイルをダウンロードすることができます。</para>

      <para>IRIX 6.5.17 以上が必要です。
      このバージョンの IRIX で &man.if.indextoname.3;, &man.if.nametoindex.3;
      などへの対応がおこなわれたからです。</para>

      <para>現在のところ、pkgsrc は同時には一つの ABI にしか対応しません。つまり、
	古い 32 ビット ABI、新しい 32 ビット ABI、64 ビット ABI を切り替えることはできません。
	最初に "abi=n32" を使って始めた場合は、
	すべてのパッケージがこれを使って構築されることになります。</para>

      <para>このため、環境変数または &mk.conf; の
      <varname>CFLAGS</varname> が衝突しないようにしてください。
      特に、 n32 オブジェクトファイルに lib64 を、また、その逆の組合せを、
      リンクしないようにしてください。
      <filename>/etc/compiler.defaults</filename> を確認してください。</para>

      <para>pkgsrc ツリーの実体を別ホストから NFS を使ってマウントしている場合は、必ず
      <varname>WRKOBJDIR</varname> をローカルのディレクトリーに設定しておいてください。
      IRIX のリンカーは、ネットワーク経由でマウントされたファイルシステム越しにリンクするときに
      問題を起こすことが時々あるからです。</para>

      <para>事前準備の過程では、imake(1) などのプログラムにすべて正しいオプションが設定されるはずですが、
      ローカルの設定に依存するオプションを設定したい場合があるかもしれません。
      詳細は、<filename>pkgsrc/mk/defaults/mk.conf</filename> をご覧ください。
      そしてもちろん、お使いのコンパイラーのマニュアルページもご覧ください。</para>

      <para>SGI の MIPSPro コンパイラーを使っている場合は、
         &mk.conf; で

      <programlisting>
PKGSRC_COMPILER=        mipspro
      </programlisting>

      を設定してください。これを設定しないと、
      pkgsrc は gcc を使っていることを仮定するので、コンパイラーに不適切なフラグを渡すことがあります。
      なお、標準状態では、bootstrap は適切な <filename>mk.conf.example</filename>
      を作成するはずです。</para>

      <para>gcc と MIPSPro コンパイラーチェインの両方をインストールしているが、
      必ず MIPSPro を使うようにしたい場合は、<varname>PATH</varname>
      に gcc の場所 (ありがちなのは
      <filename>/usr/freeware/bin</filename>) を<emphasis>含めない</emphasis>でください。さらに (重要)、
      '--preserve-path' フラグを bootstrap に渡してください。</para>
    </sect2>

    <sect2 id="linux">
      <title>Linux</title>

      <para>Linux のなかには、libtermcap と libcurses (libncurses) のいずれかを必要とするものがあります
      (たとえば Debian GNU/Linux など)。そのようなディストリビューションでは
      libncurses-dev パッケージ (または相当品) をインストールすれば問題なくなるはずです。</para>

      <para>pkgsrc は gcc (GNU Compiler Collection) と icc
      (Intel C++ Compiler) のどちらにも対応しています。gcc が標準で使われます。
      icc は i386 上の icc 8.0 と 8.1 で確認がおこなわれています。      </para>

      <para>icc を使って bootstrap をおこなうには、以下のようにします
      (icc は標準のディレクトリーにインストールされているものとします)。</para>

      <programlisting>
env CC=/opt/intel_cc_80/bin/icc LDFLAGS=-static-libcxa \
ac_cv___attribute__=yes ./bootstrap
      </programlisting>

      <note>
	<para>icc 8.1 では、引数の -static-libcxa を `-i-static' にする必要があります。</para>
      </note>

      <para>icc は __attribute__ に対応していますが、GNU configure のテストではネストした関数を使っており、
      icc はネストした関数に対応していません。__attribute__ を #undef してしまうと、
      Linux の多くのヘッダーファイルが __attribute__ なしでは正しくコンパイルできず、
      壊れてしまうという副作用があります。このため、テストは、コンパイラーが
      __attribute__ に対応しているとしたもので上書きする必要があります。</para>

      <para>bootstrap した後に、&mk.conf; で
      <varname>PKGSRC_COMPILER</varname> を設定します。</para>

      <programlisting>
PKGSRC_COMPILER=        icc
      </programlisting>

      <para>icc がインストールされるディレクトリーは標準では
      <filename>/opt/intel_cc_80</filename> であり、pkgsrc
      でもこのディレクトリーを標準としています。これ以外のディレクトリーに
      icc をインストールしている場合は、&mk.conf; で
      <varname>ICCBASE</varname> を設定してください。</para>

      <programlisting>
ICCBASE=                /opt/icc
      </programlisting>

      <para>pkgsrc は、icc が提供する実行時ライブラリーを静的リンクするので、
      作られたバイナリーはその共有ライブラリーがインストールされていないシステムでも
      動かすことができます。</para>

      <para>ただし、libtool は、C++ の共有ライブラリーをリンクして記録する時に実行された
      (ライブラリーごとに -Bstatic や -Bdynamic オプションの指定がまちまちな)
      &man.ld.1; コマンドをもとにライブラリーの一覧を展開します
      このことから、libtool でリンクされた C++ の共有ライブラリーは、libtool が修正されない限り、
      icc のライブラリーに対して実行時依存性を持った状態になります。</para>

    </sect2>

    <sect2 id="openbsd">
      <title>OpenBSD</title>

      <para>確認および対応は、 OpenBSD 3.0 および 3.2 に対しておこなわれています。</para>

      <para>ブートストラップキットのインストールに際しては、
	OpenBSD のユーザーランドのツールと衝突することがないように注意を払ってください。以下のような複数の事項があります。</para>

      <orderedlist>
	<listitem>
	  <para>OpenBSD の ports は、 <filename>/var/db/pkg</filename>
	  以下にパッケージデータベースを置きます。このため、
	  ブートストラップスクリプトの --pkgdbdir オプションで、
	  別の場所 (たとえば <filename>/usr/pkgdb</filename>)
	  を指定することをおすすめします。</para>
	</listitem>

	<listitem>
	  <para>OpenBSD ports のツールを使う予定がない場合は、混同を避けるために、
	  それらを移動してしまってもいいかもしれません。たとえば以下のようにします。</para>

	  <screen>
&rprompt; <userinput>cd /usr/sbin</userinput>
&rprompt; <userinput>mv pkg_add pkg_add.orig</userinput>
&rprompt; <userinput>mv pkg_create pkg_create.orig</userinput>
&rprompt; <userinput>mv pkg_delete pkg_delete.orig</userinput>
&rprompt; <userinput>mv pkg_info pkg_info.orig</userinput>
	  </screen>
	</listitem>

	<listitem>
	  <para>ブートストラップスクリプトを使った際、
	    &mk.conf; ファイルの例は
	    <filename>/etc/mk.conf.example</filename> ファイルに置かれます。
	    OpenBSD の make プログラムは
	    &mk.conf; も使います。
	    このファイル中の pkgsrc 特有の記述を以下のように括ることで、
	    回避することができます。</para>

	  <programlisting>
.ifdef BSD_PKG_MK
# pkgsrc の記述。たとえば defaults/mk.conf の挿入など
.else
# OpenBSD の記述
.endif
	  </programlisting>
	</listitem>
      </orderedlist>
    </sect2>

    <sect2 id="solaris">
      <title>Solaris</title>

      <para>対応は x86 と sparc それぞれの Solaris 2.6 から 9 までに対しておこなわれています。
      機能する C コンパイラーが必要です。 gcc 2.95.3 および
      Sun WorkShop 5 の両者で確認がおこなわれています。</para>

      <para>Solaris 8 でのブートストラップ過程およびパッケージの構築では、
      以下の各パッケージが必要になります。</para>

      <itemizedlist>
	<listitem><para>SUNWsprot</para></listitem>
	<listitem><para>SUNWarc</para></listitem>
	<listitem><para>SUNWbtool</para></listitem>
	<listitem><para>SUNWtoo</para></listitem>
	<listitem><para>SUNWlibm</para></listitem>
      </itemizedlist>

      <para>なお、2006 年 6 月現在、Solaris 上では GNU binutils
      はサポートされて<emphasis>いません</emphasis>。</para>

      <para>どのコンパイラーを使うにせよ、コンパイラーツールと
      $prefix を、必ず <varname>PATH</varname> に含めてください。
      これは、<filename>/usr/ccs/{bin,lib}</filename>
      や、たとえば <filename>/usr/pkg/{bin,sbin}</filename> などです。</para>

      <sect3 id="solaris-gcc-note">
	<title>gcc を使う場合</title>

	<para>どのパッケージの構築にも同じ gcc だけを使うようにすると、
	話が簡単になります。</para>

	<para>外部から導入した gcc を使うのはブートストラップの時だけにして、
	その後は gcc を
	<filename role="pkg">lang/gcc</filename> から構築するかバイナリーパッケージをインストールして、
	ブートストラップで使った gcc は削除することをおすすめします。</para>

	<para>gcc のバイナリーパッケージは、<ulink
	url="http://www.sunfreeware.com/"/> から辿れます。</para>
      </sect3>

      <sect3 id="solaris-sun-workshop-note">
	<title>Sun WorkShop を使う場合</title>

	<para>少なくとも、以下の各パッケージを (WorkShop 5.0 から)
	インストールしておく必要があります。</para>

	<itemizedlist>
	  <listitem><para>SPROcc
	  - Sun WorkShop Compiler C 5.0</para></listitem>
	  <listitem><para>SPROcpl
	  - Sun WorkShop Compiler C++ 5.0</para></listitem>
	  <listitem><para>SPROild
	  - Sun WorkShop Incremental Linker</para></listitem>
	  <listitem><para>SPROlang
	  - Sun WorkShop Compilers common components</para></listitem>
	</itemizedlist>

	<para>&mk.conf;
	で、以下の変数を設定します。</para>

<programlisting>
CC=     cc
CXX=    CC
CPP=    cc -E
CXXCPP= CC -E
</programlisting>

	<note><para>C プリプロセッサーを使って
	C のソースコード以外のものを処理するパッケージのなかには、
	この <varname>CPP</varname> の設定では問題が起きるものがあるかもしれません。</para></note>

      </sect3>
      <sect3 id="solaris-sunpro-64">
	<title>SunPro を使って 64 ビットバイナリーを構築する</title>

	<para>64 ビットパッケージを構築する場合に必要なことは、
	&mk.conf; ファイルに以下の行を追加するだけです。</para>

<programlisting>
PKGSRC_COMPILER=        sunpro
ABI=                    64
</programlisting>

	<note><para>この設定は、SPARC アーキテクチャーについてのみ確認がおこなわれています。
	Intel および AMD マシンでは、
	必要な作業がまだ残っています。</para></note>

      </sect3>
      <sect3 id="plat.sunos.problems"><title>ありがちな問題</title>

      <para><command>libtool</command> を使っていると、時々、<filename>/bin/ksh</filename>
      がセグメンテーションフォールトを起こしてクラッシュすることがあります。
      回避策は、たとえば <filename
      role="pkg">shells/bash</filename> をインストールして、
      以下の各行を &mk.conf; に追加するなどして、
      別のシェルを configure スクリプト用に使うことです。</para>

      <programlisting>
CONFIG_SHELL=   ${LOCALBASE}/bin/bash
WRAPPER_SHELL=  ${LOCALBASE}/bin/bash
      </programlisting>

      <para>こうしてから、<filename
      role="pkg">devel/libtool-base</filename> パッケージを構築しなおします。</para>

      </sect3>
    </sect2>
  </sect1>
</chapter>
