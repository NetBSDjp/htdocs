<!-- $NetBSD: platforms.xml,v 1.2 2004/10/22 00:24:48 hubertf Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: platforms.xml,v 1.2 2004/10/22 00:24:48 hubertf Exp   -->

<chapter id="platforms">
  <title>&os; 以外のシステムで pkgsrc を使う</title>

  <sect1>
    <title>pkgsrc を使う準備をする</title>

    <para>&os; 以外のオペレーティングシステム用に、必要なツールを構築して pkgsrc を使えるようにするため、
      ブートストラップキットを提供しています。
      pkgsrc とブートストラップキットは、
      ネイティブの &os; のほか、以下のオペレーティングシステムに対応しています。</para>

    <itemizedlist>
      <listitem>
	<para>Darwin (Mac OS X)</para>
      </listitem>

      <listitem>
	<para>FreeBSD</para>
      </listitem>

      <listitem>
	<para>Interix (Windows 2000, XP, 2003)</para>
      </listitem>

      <listitem>
	<para>IRIX</para>
      </listitem>

      <listitem>
	<para>Linux</para>
      </listitem>

      <listitem>
	<para>OpenBSD</para>
      </listitem>

      <listitem>
	<para>Solaris</para>
      </listitem>
    </itemizedlist>

    <para>その他のプラットフォームへの対応は、開発中です。</para>

    <para>ブートストラップキットは、以下のようにして簡単にインストールすることができます。</para>

    <screen>
&rprompt; <userinput>env CVS_RSH=ssh cvs -d anoncvs@anoncvs.NetBSD.org:/cvsroot checkout pkgsrc</userinput>
&rprompt; <userinput>cd pkgsrc/bootstrap</userinput>
&rprompt; <userinput>./bootstrap</userinput></screen>

    <para>bootstrap を実行する前に、上で例示した方法以外で
      pkgsrc を取得する方法については、<xref linkend="getting"/>を参照してください。
      上で例示した <command>bootstrap</command> コマンドでは、
      <emphasis>prefix</emphasis> (プログラムのインストール先) をデフォルトの
      <filename>/usr/pkg</filename> とし、
      パッケージデータベースのディレクトリー (pkgsrc 内部の記録用) を
      <filename>/var/db/pkg</filename> とします。
      これらをコマンドライン引数で設定することもできます。</para>

    <para>対応プラットフォーム用に、 pkgsrc のツールと初期導入パッケージ一式を
      バイナリーパッケージにしたものを用意してあります。
      最新の一覧は <ulink url="http://www.pkgsrc.org/">www.pkgsrc.org</ulink> にあります。</para>
  </sect1>

  <sect1>
    <title>プラットフォーム別の覚書</title>

    <para>いくつかのプラットフォームについては、以下のことを知っておくとよいでしょう。</para>

    <sect2>
      <title>Darwin (Mac OS X)</title>

      <para>対応は、 Darwin 5.x および 6.x に対しておこなわれています。
	Mac OS X で pkgsrc を使う方法としては、<link linkend="platform.osx-image">ディスクイメージ
	</link>を使う方法と<link linkend="platform.osx-ufs">UFS
	  パーティション</link>を使う方法の二種類があります。</para>

      <para>始める前に、Apple Developer Connection から Mac OS X Developer
	Tools をダウンロードしてインストールする必要があります。詳細は <ulink
	  url="http://developer.apple.com/macosx/">http://developer.apple.com/macosx/</ulink>
	をご覧ください。また、X11 Window System を使うパッケージを構築したい場合は、<ulink
	  url="http://www.apple.com/macosx/x11/download/">http://www.apple.com/macosx/x11/download/</ulink>
	から X11 for Mac OS X および X11 SDK をインストールしておくことも必要です。</para>

      <para>UFS パーティションがすでにある場合、または、
	UFS でフォーマット可能な未使用のパーティションがある場合は、
	ディスクイメージではなくそれを使うことをおすすめします。
	多少速くなりますし、ブート時に自動的にマウントすることができます
	(ディスクイメージは手動でマウントすることが必要です)。</para>

      <note>
	<para>HFS+ ファイルシステムを pkgsrc 用に使うことはできません。pkgsrc は現在のところ、
	  大文字と小文字を区別するファイルシステムを必要とするのですが、HFS+ は大文字と小文字を区別しないからです。</para>
      </note>

      <sect3 id="platform.osx-image">
	<title>ディスクイメージを使う</title>

	<para>ディスクイメージを作ります。</para>

	<screen>&rprompt; <userinput>cd pkgsrc/bootstrap</userinput>
&rprompt; <userinput>./ufsdiskimage create ~/Documents/NetBSD 512</userinput> # megabytes - season to taste
&rprompt; <userinput>./ufsdiskimage mount ~/Documents/NetBSD</userinput>
&rprompt; <userinput>sudo chown `id -u`:`id -g` /Volumes/NetBSD</userinput></screen>

	<para>これで、できあがりです。</para>
      </sect3>

      <sect3 id="platform.osx-ufs">
	<title>UFS パーティションを使う</title>

	<para>標準状態では、 <filename>/usr</filename> がルートファイルシステム
	  (通常は HFS+) 上にあるでしょう。<filename>/usr/pkg</filename> を
	  UFS 上にあるディレクトリーへのシンボリックリンクにすれば、
	  無指定時の <emphasis>prefix</emphasis> である <filename>/usr/pkg</filename>
	  を使うことができます。また、パッケージデータベースディレクトリーを
	  <emphasis>prefix</emphasis> 以外の場所にしたい場合は、
	  明らかに別のシンボリックリンクが必要になります。たとえば、</para>

	<screen>&rprompt; <userinput>./bootstrap --pkgdbdir=/usr/pkg/pkgdb --pkgsrcdir=/Volumes/ufs/pkgsrc</userinput></screen>

	<para>Mac OS X のインストール時にパーティションを作り、
	  UFS でフォーマットした場合は、ブート時に自動的に
	  <filename>/Volumes/&lt;volume name&gt;</filename>
	  にマウントされるはずです。パーティションを UFS で
	  (再)フォーマットする場合は、パーティションマップが
	  <quote>Apple_HFS</quote> ではなく <quote>Apple_UFS</quote>
	  を適切に反映していることを確認する必要があります。</para>

	<para>問題は、ディスクツールではブートに使ったディスクを変更できないことです。
	  パーティションをアンマウントすることはできますが、たとえこのパーティションを
	  newfs したとしても、パーティションの型が間違ったものになり、
	  automounter はこのパーティションをマウントしません。
	  手動でマウントすることはできますが、 Finder では見られません。</para>

	<para>OS X Installation (User) CD からブートする必要があります。
	  インストールプログラムが起動したら、メニューから Disk
	  Utility を選択します。これで、 UFS にしたいパーティションを選んで
	  Apple UFS でフォーマットすることができます。
	  Disk Utility を終了し、インストーラーを終了するとコンピューターが再起動します。
	  これで、新しい UFS パーティションが Finder で見られます</para>

	<para>新しいパーティション上のパーミッションは、
	  root のみが書き込み可能となることにご注意ください。</para>

	<para>この覚書は 10.2 (Jaguar) にもとづくもので、これより前のバージョンも該当します。
	  うまくいけば、Apple は 10.3 (Panther) で Disk Utility を修正してくれるでしょう。</para>
      </sect3>
    </sect2>

    <sect2>
      <title>FreeBSD</title>

      <para>
	確認および対応は、 FreeBSD 4.7 および 5.0 に対しておこなわれています。
	これら以外のバージョンでも動くかもしれません。</para>

      <para>ブートストラップキットのインストールに際しては、
	FreeBSD のユーザーランドのツールと衝突することがないように注意を払ってください。以下のような複数の事項があります。</para>

      <orderedlist>
	<listitem>
	  <para>FreeBSD の ports は、 <filename>/var/db/pkg</filename>
	    以下にパッケージデータベースを置きます。このため、
	    ブートストラップスクリプトの --pkgdbdir オプションで、
	    別の場所 (たとえば <filename>/usr/pkgdb</filename>)
	    を指定することをおすすめします。</para>
	</listitem>

	<listitem>
	  <para>FreeBSD ports のツールを使う予定がない場合は、混同を避けるために、
	    それらを移動してしまってもいいかもしれません。たとえば以下のようにします。</para>

	  <screen>&rprompt; <userinput>cd /usr/sbin</userinput>
&rprompt; <userinput>mv pkg_add pkg_add.orig</userinput>
&rprompt; <userinput>mv pkg_create pkg_create.orig</userinput>
&rprompt; <userinput>mv pkg_delete pkg_delete.orig</userinput>
&rprompt; <userinput>mv pkg_info pkg_info.orig</userinput></screen>
</listitem>

	<listitem>
	  <para>ブートストラップスクリプトを使った際、
	    <filename>/etc/mk.conf</filename> ファイルの例は
	    <filename>/etc/mk.conf.example</filename> ファイルに置かれます。</para>
	</listitem>
      </orderedlist>
    </sect2>

    <sect2>
      <title>Interix</title>

      <para>Interix は Windows NT カーネルの POSIX 準拠のサブシステムで、
	Cygwin よりも密接にカーネルと統合された Unix 風の環境を提供します。
	Interix は Windows Services for Unix パッケージの一部であり、
	ライセンスされた Windows 2000, XP, 2003 のコピー用として、
	無料で使うことができます。SFU は、<ulink
	url="http://www.microsoft.com/windows/sfu/">http://www.microsoft.com/windows/sfu/</ulink> からダウンロードできます。</para>

      <para>確認は、執筆時点の最新版である Services for Unix 3.5 に対しておこなわれています。 3.0
	や 3.1 でも動作するかもしれませんが、公式には対応していません。  (3.0/3.1 の主な違いは、
	pthreads がないことです。)</para>

      <sect3 id="platform.interix-sfu-install">
	<title>Interix/SFU のインストールに際して</title>

	<para>pkgsrc を使うためには、Windows Services for Unix 3.5 の配布物のうち、
	  最低限、以下のパッケージをインストールする必要があります。</para>

	<itemizedlist>
	  <listitem><para>Utilities -&gt; Base Utilities</para></listitem>
	  <listitem><para>Interix GNU Components -&gt; (all)</para></listitem>
	  <listitem><para>Remote Connectivity</para></listitem>
	  <listitem><para>Interix SDK</para></listitem>
	</itemizedlist>

	<para>Interix 上で pkgsrc を使う場合、Utilities 以下の "UNIX Perl"
	  はインストールしないでください。これは共有モジュールに対応していない Perl 5.6 で、
	  /usr/local にインストールされますが、混乱を起こすだけです。これのかわりに、
	  pkgsrc (またはバイナリーパッケージ) の Perl 5.8 をインストールします。</para>

	<para>Remote Connectivity 以下の "Windows Remote Shell Service"
	  のインストールは必須ではありませんが、inetd を動作させるために Remote Connectivity
	  そのものはインストールすることをおすすめします。</para>

	<para>最後に、インストール中に、Interix のプログラムに対して setuid を有効にするかどうか、
	  また、パス名の大文字と小文字を標準で区別するかどうかを尋ねられるかもしれません。
	  setuid は有効にするようにし、また大文字と小文字はかならず区別するようにします。
	  (大文字と小文字を区別しないと、
	  perl をはじめ多くのプログラムが構築できなくなります。)</para>

      </sect3>

      <sect3 id="platform.interix-sfu-postinstall">
	<title>Interix/SFU がインストール済みの場合はどうすればよいか</title>

	<para>SFU がすでにインストールされており、その設定を変更して
	  pkgsrc が動作するようにしたい場合は、以下のことに気をつけてください。</para>

	<itemizedlist>
	  <listitem>
	    <para>UNIX Perl をアンインストールするため、Add/Remove Programs を使い、Microsoft
	      Windows Services for UNIX を選んで Change をクリックします。インストーラーで
	      Add or Remove を選んでから Utilities-&gt;UNIX Perl のチェックを外します。</para>
	  </listitem>
	  <listitem>
	    <para>ファイルシステムの大文字と小文字の区別を有効にするため、REGEDIT.EXE を実行して
	      以下のレジストリーキーを変更します。</para>
	    <para>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\kernel</para>
	    <para>DWORD 値 "obcaseinsensitive" を 0 に設定した後、リブートします。</para>
	  </listitem>
	  <listitem>
	    <para>setuid バイナリーを有効にするため (これは必須ではありません)、REGEDIT.EXE を実行して
	      以下のレジストリーキーを変更します。</para>
	    <para>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Services for UNIX</para>
	    <para>DWORD 値 "EnableSetuidBinaries" を 1 に設定した後、リブートします。</para>
	  </listitem>
	</itemizedlist>

      </sect3>      
      <sect3 id="platform.interix-notes">
	<title>pkgsrc を使ううえで重要な覚書</title>

	<para>パッケージの管理者 (pkgsrc の "su" ユーザーと
	  "pkg_add" を実行するユーザーのいずれかまたは両方) は、ローカルの Administrators
	  グループに所属している必要があります。bootstrap を実行するユーザーも同様です。これは、通常の
	  pkgsrc が "root" を要求するのにくらべ、若干緩い条件です。</para>

	<para>パッケージの管理者は umask を 002 に設定するようにします。そうしておかないと、
	  自動的に "make install" が文句をいうようになります。こう設定することで、
	  /var/db/pkg 以下に書かれるディレクトリーに Administrators グループが確実に書き込み可能とできます。</para>

	<para>http://www.interopsystems.com/ にある人気のある Interix バイナリーパッケージは、
	  古いバージョンの pkgsrc の pkg_* ツールを使います。
	  理想的には、これらは pkgsrc と混用しないほうがよいものです。
	  これらを pkgsrc のパッケージと同時に使う場合は、かならず、
	  それぞれのバイナリーパッケージに応じて適切な pkg_* ツールを使うようにしてください。</para>

      </sect3>
    </sect2>

    <sect2>
      <title>IRIX</title>

      <para>機能する C コンパイラー、つまり、 gcc または SGI の MIPS
	および MIPSpro コンパイラー (cc/c89) が必要です。 <varname>CC</varname> 環境変数を、
	使用するコンパイラーに応じて設定してください。
	MIPSpro コンパイラースイートのライセンスがない場合は、<ulink
	  url="http://freeware.sgi.com/">http://freeware.sgi.com/</ulink>
	から gcc の tar 配布ファイルをダウンロードすることができます。</para>

      <para>IRIX 6.5.17 以上が必要です。
	このバージョンの IRIX で if_indextoname(3), if_nametoindex(3)
	などへの対応がおこなわれたからです。</para>

      <para>現在のところ、pkgsrc は一つの ABI にしか対応しません。つまり、
	古い 32 ビット ABI、新しい 32 ビット ABI、64 ビット ABI を切り替えることはできません。
	最初に "abi=n32" を使って始めた場合は、
	すべてのパッケージがこれを使って構築されることになります。</para>

      <para>このため、環境変数または <filename>/etc/mk.conf</filename> の
	<varname>CFLAGS</varname> が衝突しないようにしてください。
	特に、 n32 オブジェクトファイルに lib64 を、また、その逆の組合せを、
	リンクしないようにしてください。
	<filename>/etc/compiler.defaults</filename> を確認してください。</para>

      <para>pkgsrc ツリーの実体を別ホストから NFS を使ってマウントしている場合は、必ず
	<varname>WRKOBJDIR</varname> をローカルのディレクトリーに設定しておいてください。
	IRIX のリンカーは、ネットワーク経由でマウントされたファイルシステム越しにリンクするときに
	問題を起こすことが時々あるからです。</para>

      <para>事前準備の過程では、imake(1) などのプログラムにすべて正しいオプションが設定されるはずですが、
	ローカルの設定に依存するオプションを設定したい場合があるかもしれません。
	詳細は、<filename>pkgsrc/mk/bsd.pkg.defaults.mk</filename> をご覧ください。
	そしてもちろん、お使いのコンパイラーのマニュアルページもご覧ください。</para>
    </sect2>

<!--
<sect2>
<title>Linux</title>
<para>
... XXX
</para>
</sect2>
-->

    <sect2>
      <title>OpenBSD</title>

      <para>確認および対応は、 OpenBSD 3.0 および 3.2 に対しておこなわれています。</para>

      <para>ブートストラップキットのインストールに際しては、
	OpenBSD のユーザーランドのツールと衝突することがないように注意を払ってください。以下のような複数の事項があります。</para>

      <orderedlist>
	<listitem>
	  <para>OpenBSD の ports は、 <filename>/var/db/pkg</filename>
	    以下にパッケージデータベースを置きます。このため、
	    ブートストラップスクリプトの --pkgdbdir オプションで、
	    別の場所 (たとえば <filename>/usr/pkgdb</filename>)
	    を指定することをおすすめします。</para>
	</listitem>

	<listitem>
	  <para>OpenBSD ports のツールを使う予定がない場合は、混同を避けるために、
	    それらを移動してしまってもいいかもしれません。たとえば以下のようにします。</para>

	  <screen>&rprompt; <userinput>cd /usr/sbin</userinput>
&rprompt; <userinput>mv pkg_add pkg_add.orig</userinput>
&rprompt; <userinput>mv pkg_create pkg_create.orig</userinput>
&rprompt; <userinput>mv pkg_delete pkg_delete.orig</userinput>
&rprompt; <userinput>mv pkg_info pkg_info.orig</userinput></screen>
	</listitem>

	<listitem>
	  <para>ブートストラップスクリプトを使った際、
	    <filename>/etc/mk.conf</filename> ファイルの例は
	    <filename>/etc/mk.conf.example</filename> ファイルに置かれます。
	    OpenBSD の make プログラムは
	    <filename>/etc/mk.conf</filename> も使います。
	    このファイル中の pkgsrc 特有の記述を以下のように括ることで、
	    回避することができます。</para>

	  <programlisting>.ifdef BSD_PKG_MK
# pkgsrc の記述。たとえば bsd.pkg.defaults.mk の挿入など
.else
# OpenBSD の記述
.endif</programlisting>
	</listitem>
      </orderedlist>
    </sect2>

    <sect2>
      <title>Solaris</title>

      <para>対応は x86 と sparc それぞれの Solaris 2.6 から 9 までに対しておこなわれています。
	機能する C コンパイラーが必要です。 gcc 2.95.3 および Sun WorkShop 5 の両者で確認がおこなわれています。</para>

      <para>Solaris 8 でのブートストラップ過程およびパッケージの構築では、
	以下の各パッケージが必要になります。</para>

      <itemizedlist>
	<listitem>
	  <para>SUNWsprot</para>
	</listitem>

	<listitem>
	  <para>SUNWarc</para>
	</listitem>

	<listitem>
	  <para>SUNWbtool</para>
	</listitem>

	<listitem>
	  <para>SUNWtoo</para>
	</listitem>

	<listitem>
	  <para>SUNWlibm</para>
	</listitem>
      </itemizedlist>

      <para>なお、 Solaris 上では GNU binutils
	はサポートされて<emphasis>いません</emphasis>。</para>

      <sect3>
	<title>gcc を使う場合</title>

	<para>どのパッケージの構築にも同じ gcc だけを使うようにすると、
	  話が簡単になります。</para>

	<para>外部から導入した gcc を使うのはブートストラップの時だけにして、
	  その後は gcc を<pkg>lang/gcc</pkg> から構築するかバイナリーパッケージをインストールして、
	  ブートストラップで使った gcc は削除することをおすすめします。</para>

	<para>gcc のバイナリーパッケージは、<ulink
	    url="http://www.sun.com/bigadmin/common/freewareSearch.html">http://www.sun.com/bigadmin/common/freewareSearch.html</ulink> から辿れます。</para>
      </sect3>

      <sect3>
	<title>Sun WorkShop を使う場合</title>

	<para>少なくとも、以下の各パッケージを (WorkShop 5.0 から)
	  インストールしておく必要があります。</para>

	<itemizedlist>
	  <listitem>
	    <para>SPROcc - Sun WorkShop Compiler C 5.0</para>
	  </listitem>

	  <listitem>
	    <para>SPROcpl - Sun WorkShop Compiler C++ 5.0</para>
	  </listitem>

	  <listitem>
	    <para>SPROild - Sun WorkShop Incremental Linker</para>
	  </listitem>

	  <listitem>
	    <para>SPROlang - Sun WorkShop Compilers common components</para>
	  </listitem>
	</itemizedlist>

	<para><filename>/etc/mk.conf</filename> で <varname>CC</varname> および <varname>CXX</varname>
	  を設定します。<varname>CPP</varname> もここで設定して結構です。
	  たとえば以下のようにします。</para>

	<programlisting>CC=	cc
CXX=	CC
CPP=	/usr/ccs/lib/cpp</programlisting>

	<para>64 ビットバイナリーを構築したい場合は、以下のようにします。</para>

	<programlisting>CFLAGS=	-xtarget=ultra -xarch=v9</programlisting>

	<para>どのコンパイラーを使うにせよ、コンパイラーのツールと
	  $prefix が <varname>PATH</varname> にあることを確認してください。
	  これは <filename>/usr/ccs/{bin,lib}</filename> と、
	  たとえば <filename>/usr/pkg/{bin,sbin}</filename> などです。</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>
