<!-- $NetBSD: configuring.xml,v 1.21 2006/09/18 12:52:20 rillig Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: configuring.xml,v 1.21 2006/09/18 12:52:20 rillig Exp   -->

<chapter id="configuring">
  <title>pkgsrc を設定する</title>

<para>pkgsrc システム全体の設定は、ひとつのファイル (通常は
<filename>mk.conf</filename>) でおこなわれます。pkgsrc
がこのファイルをどのディレクトリーから探すかは、
インストールの時に決まります。NetBSD で、ベースシステムの
&man.make.1; を使う場合は、<filename>/etc/</filename>
ディレクトリーとなります。これ以外の場合はすべて、
<literal>${PREFIX}/etc/</literal> が標準の場所となり、これは
bootstrap プログラムに指示したバイナリーパッケージのインストール先に依存します。</para>

<para>bootstrap の実行中に、設定ファイルの例が作成されます。
このファイルを使うには、
<filename>${PREFIX}/etc</filename> ディレクトリーを作って、
その中にこのファイルをコピーする必要があります。</para>

<para>この設定ファイルの書式は、通常の BSD 形式の
<filename>Makefile</filename> の書式です。pkgsrc 全体の設定は、
このファイルで変数を設定することでおこなわれます。なお、
ここではあらゆる種類の変数を定義することができ、また、
特別なエラーの検査 (たとえば、綴りの誤り) はおこなわれないので、
設定が有効かどうか調べるには、
いろいろ試す必要があるということに注意してください。</para>

  <sect1 id="general-configuration">
    <title>全般的な設定</title>

    <para>本節では、pkgsrc の全パッケージに影響する変数をいくつか掲げます。
    ユーザーが設定可能な変数の完全な一覧は、
    <filename>mk/defaults/mk.conf</filename> にあり、
    各変数の目的もコメントで説明されています。</para>

      <itemizedlist>
	<listitem><para><varname>LOCALBASE</varname>:
	    パッケージをどこにインストールするか。標準では
	    <filename>/usr/pkg</filename> になります。異なる <varname>LOCALBASE</varname>
	    をもつバイナリーパッケージを混在させないでください。</para>
	</listitem>
	<listitem><para><varname>CROSSBASE</varname>:
	    <quote>cross</quote> カテゴリーのパッケージをどこにインストールするか。
	    標準では
	    <filename>${LOCALBASE}/cross</filename> になります。</para>
	</listitem>
	<listitem><para><varname>X11BASE</varname>:
	    当該システムで X11 がどこにインストールされているか。標準では
	    <filename>/usr/X11R6</filename> になります。</para>
	</listitem>
	<listitem><para><varname>DISTDIR</varname>: pkgsrc のパッケージ構築用にダウンロードしたままの状態の
	    ソース配布物をどこに置くか。標準では
	    <filename>${PKGSRCDIR}/distfiles</filename> になります。</para>
	</listitem>
	<listitem><para><varname>MASTER_SITE_OVERRIDE</varname>:
	    設定した場合、その値でパッケージの
	    <varname>MASTER_SITES</varname> が上書きされます。</para>
	</listitem>
	<listitem><para><varname>MASTER_SITE_BACKUP</varname>:
	    配布ファイルおよびパッチファイルが、ローカルにも、
	    <filename>${MASTER_SITES}</filename> や
	    <filename>${PATCH_SITES}</filename> にもなかった場合のための予備の場所 (複数可)。
	    標準では
	    <filename>ftp://ftp.NetBSD.org/pub/NetBSD/packages/distfiles/${DIST_SUBDIR}/</filename>
	    と
	    <filename>ftp://ftp.freebsd.org/pub/FreeBSD/distfiles/${DIST_SUBDIR}/</filename> になります。</para>
	</listitem>
	<listitem><para><varname>BINPKG_SITES</varname>:
	    バイナリーパッケージの配布サイトのリストです。</para>
	</listitem>
	<listitem><para><varname>ACCEPTABLE_LICENSES</varname>:
	    受け入れ可能なライセンスのリストです。
	    このリストにないライセンスが適用されるパッケージを構築しようとするたびに、
	    エラーメッセージ (この値の変更方法の説明を含む) が表示されます。</para>
	</listitem>
      </itemizedlist>
  </sect1>

  <sect1 id="variables-affecting-build">
    <title>構築の過程に影響を及ぼす変数</title>
    <para>XXX
      <itemizedlist>
	<listitem><para><varname>PACKAGES</varname>: バイナリーパッケージ用のディレクトリーの最上層。
	    標準では
	    <filename>${PKGSRCDIR}/packages</filename> になります。</para>
	</listitem>
	<listitem><para><varname>WRKOBJDIR</varname>:
	    設定した場合、この値を最上層として、
	    別に分離された作業ディレクトリーが作られて
	    <filename>${WRKDIR}</filename> (前述) からシンボリックリンクされます。
	    これは、複数のアーキテクチャー用のパッケージを構築する際に便利です。
	    さらに、<filename>${PKGSRCDIR}</filename> を NFS マウントして、
	    <filename>${WRKOBJDIR}</filename>
	    は各アーキテクチャーのローカルに置くということができます。(なお、
	    <varname>PKGSRCDIR</varname>
	    は利用者が設定するようなものではないことを断っておきます
	    &mdash;これは pkgsrc ツリーのルートを参照する内部的な定義です。
	    ここでいう pkgsrc ツリーは、多くの文脈がありえます。)</para>
	</listitem>
	<listitem><para><varname>LOCALPATCHES</varname>:
	    pkgsrc に含まれていないローカルなパッチ用のディレクトリーです。
	    さらなる情報は、<xref linkend="components.patches" />
	    をご覧ください。<replaceable>rel</replaceable> および
	    <replaceable>arch</replaceable> は、ぞれぞれ OS
	    リリース (<quote>2.0</quote> など) およびアーキテクチャー
	    (<quote>mipsel</quote> など) で置き換えられます。</para>
	</listitem>
	<listitem><para><varname>PKGMAKECONF</varname>: パッケージの
	    BSD 形式の Makefile が使用する <filename>mk.conf</filename>
	    ファイルの場所です。この変数が設定されていない場合は、
	    <filename>/usr/src</filename> 以下の構築用の設定を見ることのないようにするために、
	    <varname>MAKECONF</varname> が
	    <filename>/dev/null</filename> に設定されます。</para>
	</listitem>
	<listitem><para><varname>DEPENDS_TARGET</varname>:
	    標準では、依存するパッケージはインストールされるだけで、
	    バイナリーパッケージの作成まではおこなわれません。
	    この変数を <literal>package</literal> に設定して、
	    依存パッケージのインストール後にバイナリーパッケージを自動的に作成することができます。</para>
	</listitem>

	<!--	DISTDIR -->
	<!--	FAILOVER_FETCH -->
      </itemizedlist></para>
  </sect1>

<sect1 id="conf.compiler">
<title>コンパイラーの選択と設定</title>

  <!--	PKGSRC_COMPILER -->

<sect2 id="conf.cflags">
<title>コンパイラーへのフラグの追加 (<varname>CFLAGS</varname>)</title>

	<para><varname>CFLAGS</varname> 変数を設定したい場合は、
	<literal>=</literal> 演算子は使わずに、
	かならず <literal>+=</literal> 演算子を使ってください。</para>

<programlisting>
    CFLAGS+=        -your -flags
</programlisting>

	<para><varname>CFLAGS=</varname> のようにする (つまり、<quote>+</quote>を付けない) と、
	独自のフラグを追加する必要があるパッケージで問題を起こすことがあります。
	また、CPUにあわせた最適化に関心がある場合は、
	<filename role="pkg">devel/cpuflags</filename>
	パッケージを見ておくとよいでしょう。</para>

</sect2>

<sect2 id="conf.ldflags">
<title>リンカーへのフラグの追加 (<varname>LDFLAGS</varname>)</title>

<para>configure および build の各段階において、リンカーにフラグを渡したい場合、
二通りの方法を使うことができます。すなわち、
<varname>LDFLAGS</varname> または <varname>LIBS</varname> のいずれかを設定します。
両者の違いは、<varname>LIBS</varname> はコマンドラインに付け加えられますが、
<varname>LDFLAGS</varname> はそれより早く現れます。
<varname>LDFLAGS</varname> はあらかじめ読み込まれ、
<varname>USE_IMAKE</varname> の設定や
<filename>mk/x11.buildlink3.mk</filename> のインクルードの有無に応じた
ELF マシン向けの rpath の設定が追加されます。
<varname>CFLAGS</varname> と同様に、この設定を上書きしたいわけでなければ、
<literal>+=</literal> 演算子を使います。</para>
<programlisting>
    LDFLAGS+=        -your -linkerflags
</programlisting>
</sect2>
</sect1>

  <!-- Configuration files -->
  <!--	PKG_SYSCONFBASE -->
  <!--	PKG_SYSCONFDIR.foobar -->

  <!-- Security -->
  <!--	PKGVULNDIR -->

  <sect1 id="developer-advanced-settings">
    <title>開発者および上級者向けの設定</title>

    <!--	USE_ABI_DEPENDS -->
    <para>XXX
      <itemizedlist>
	<listitem><para><varname>PKG_DEVELOPER</varname>:
	    パッケージ開発者向けに、いくつかの正当性検査を実行します。
	    <itemizedlist>
	      <listitem><para>パッチが曖昧さゼロで適用できることを確認する
	      </para></listitem>
	      <listitem><para>check-shlibs を実行して、
	      すべてのバイナリーパッケージが共有ライブラリーを見つけられることを確認する。</para>
	      <!-- XXX: some more stuff -->
	      </listitem>
	    </itemizedlist>
	</para>
	</listitem>
	<listitem><para><varname>PKG_DEBUG_LEVEL</varname>:
	パッケージの構築およびインストールの際に表示される、
	デバッグ用出力の水準です。標準の値は 0 です。この場合、コマンドは
	(通常の、標準状態で、静粛な操作で) 実行されるだけで、表示されません。
	値が 1 の場合、すべてのシェルコマンドを実行前に表示します。
	値が 2 の場合、すべてのシェルコマンドを実行前に表示するほか、
	実際に実行される経過を <command>set
	-x</command> により表示します。</para></listitem>
      </itemizedlist>
    </para>
  </sect1>

  <!-- pkginstall-related variables -->
  <!--	PKG_REGISTER_SHELLS -->
  <!--	PKG_RCD_SCRIPTS -->

  <sect1 id="selecting-build-options">
    <title>構築オプションの選択</title>

    <para>パッケージのなかには、構築時にオプションがあるものがあります。
    通常は、数通りの依存性からいずれかを選択、大きな依存性を伴うオプション対応の有効化、
    実験的な機能の有効化などです。</para>

    <para>パッケージがどんなオプションに対応しているか (対応している場合)、
    また、どのオプション同士が排他的かを調べるには、<command>make
    show-options</command> を実行します。結果は、たとえば以下のようになります。</para>

<programlisting>
    The following options are supported by this package:
        ssl      Enable SSL support.
    Exactly one of the following gecko options is required:
        firefox  Use firefox as gecko rendering engine.
        mozilla  Use mozilla as gecko rendering engine.
    At most one of the following database options may be selected:
        mysql    Enable support for MySQL database.
        pgsql    Enable support for PostgreSQL database.

    These options are enabled by default: firefox
    These options are currently enabled: mozilla ssl
</programlisting>

    <para>以下の変数を <filename>/etc/mk.conf</filename> で定義して、
    パッケージに対してどのオプションを有効にするかを選んでおくことができます:
    <varname>PKG_DEFAULT_OPTIONS</varname> は、対応している全パッケージを対象に、
    オプションを選択または無効化するために使うことができます。
    <varname>PKG_OPTIONS.<replaceable>pkgbase</replaceable></varname>
    は、特定のパッケージ <replaceable>pkgbase</replaceable> を対象に、
    オプションを選択または無効化するために使うことができます。
    この両変数で列挙された各変数が選択され、<quote>-</quote>
    が先頭についた変数は無効化されます。いくつか例を示します。</para>

    <screen>
&uprompt; <command>grep "PKG.*OPTION" /etc/mk.conf</command>
PKG_DEFAULT_OPTIONS=    -arts -dvdread -esound
PKG_OPTIONS.kdebase=    debug -sasl
PKG_OPTIONS.apache=     suexec </screen>

    <para>以下の各設定は、以下に掲げた順に適用されます。
    このため、あるオプションは、
    それが最後に選択または無効化された設定に従って選択または無効化されます。</para>

    <orderedlist>
      <listitem><para>パッケージのメンテナーが提示した、
      標準状態のオプション</para></listitem>

      <listitem><para>旧式の変数 (後述)
      の設定から導かれるオプション</para></listitem>

      <listitem><para><varname>PKG_DEFAULT_OPTIONS</varname></para></listitem>

      <listitem><para><varname>PKG_OPTIONS.<replaceable>pkgbase</replaceable></varname></para></listitem>
    </orderedlist>

    <para>互いに排他的なオプション群からは、
    最後に選択されたオプションが使われ、それ以外のオプションは自動的に無効化されます。
    オプション群のあるオプションが明示的に無効化された場合は、
    その前に選択されたオプションがあれば、それが使われます。
    必須のオプション群からどのオプションも選択されなかった場合は、
    エラーとなり、パッケージの構築は失敗します。</para>

    <para>このオプションの枠組が導入される前は、
    構築オプションは <filename>/etc/mk.conf</filename>
    で各オプションごとの変数 (たいていは
    <varname>USE_<replaceable>FOO</replaceable></varname> という名前)
    を設定することで選択していました。
    利用者が現在のオプションの枠組に容易に移行できるようにするため、
    このような旧式の変数は、適切なオプションの設定
    (<varname>PKG_OPTIONS.<replaceable>pkgbase</replaceable></varname>)
    に自動的に変換されます。利用者に対しては、
    <filename>/etc/mk.conf</filename>
    を更新してオプションの枠組を直接使うよう促す警告が表示されます。
    旧式の変数への対応は、いずれ打ち切られる予定です。</para>
  </sect1>

</chapter>
