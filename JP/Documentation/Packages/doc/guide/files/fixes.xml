<!-- $NetBSD: fixes.xml,v 1.4 2004/12/09 18:23:27 wiz Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: fixes.xml,v 1.4 2004/12/09 18:23:27 wiz Exp   -->

<chapter id="fixes"> <?dbhtml filename="fixes.html"?>
  <title>パッケージの修正に関する注意</title>

  <sect1>
    <title>一般的な操作</title>

    <sect2>
      <title>/etc/mk.confから変数を捕まえる方法</title>
    
      <para> <varname>MAKECONF</varname>や<filename>/etc/mk.conf</filename>
        で上書き可能な、パッケージで定義された変数には問題が
        あります。それは、変数は &man.make.1; がそれを使う時に展開されるが、プリプロセッサー
        風の文(.if、.ifdefそして.ifndef)は読み込み時に評価される事です。したがって、
        .if*文内で変数(<filename>/etc/mk.conf</filename>でセットされる可能性のある)を使う時は、その.if*
        ステートメントの前に<filename>/etc/mk.conf</filename>をインクルードしておかなくていけません。  </para>
    
      <para> <filename>/etc/mk.conf</filename>や<varname>MAKECONF</varname>が存在したら、それらをインクルードするというad-hocな
        方法をとらずに、すべてのプリプロセッサー風の.if、.ifdef、または.ifndef文の
        前で、<filename>pkgsrc/mk/bsd.prefs.mk</filename>をインクルードしてください。 </para>
    
      <programlisting>.include "../../mk/bsd.prefs.mk"
    
    .if defined(USE_MENUS)
      ...
    .endif</programlisting>
    
      <para>  <filename>/etc/mk.conf</filename> で <varname>CFLAGS</varname> 変数を設定したい場合は、
        以下のような形で使うようにしてください。
    
        <programlisting>CFLAGS+=  -your -flags</programlisting>
    
        <varname>CFLAGS=</varname> のようにする (つまり、'+'を付けない) と、
        独自のフラグを追加する必要があるパッケージで問題を起こすことがあります。
        また、CPUにあわせた最適化に関心がある場合は、
        <pkg>devel/cpuflags</pkg> パッケージを見ておくとよいでしょう。  </para>
    </sect2>


    <sect2>
      <title>制限つきパッケージ</title>
    
      <para> ライセンスによっては、ソフトウェアの再配布方法に制限があります。このような
        制限を満たすようにするため、パッケージシステムでは以下のような制限を設定で
        きる5個のmake変数を定義しています: </para>
    
      <itemizedlist>
        <listitem>
          <para><varname>RESTRICTED</varname></para>
          
          <para> なにか制限がある場合は常に、(制限の種類にかかわらず)この変数を設定します。
            この変数を、その制限の理由を含む文字列に設定してください。  </para>
        </listitem>
    
        <listitem> 
          <para><varname>NO_BIN_ON_CDROM</varname></para>
          
          <para>     バイナリーをCD-ROMに収録してはいけません。バイナリーパッケージを
            CD-ROMに含めることができない場合は常に、この変数を<varname>${RESTRICTED}</varname>に設定
            してください。  </para>
        </listitem>
    
        <listitem>
          <para><varname>NO_BIN_ON_FTP</varname></para>
          
          <para>     バイナリーをFTPサーバーに置いてはいけません。バイナリーパッケージをイ
            ンターネット上で公開することができない場合は常に、この変数を
            <varname>${RESTRICTED}</varname>に設定してください。  </para>
        </listitem>
    
        <listitem>
          <para><varname>NO_SRC_ON_CDROM</varname></para>
          
          <para> distfileをCD-ROMに収録してはいけません。ソースコードやその他の
            distfileのCD-ROMによる再配布が許可されていない場合は、この変数を
            <varname>${RESTRICTED}</varname>に設定してください。  </para>
        </listitem>
    
        <listitem>
          <para><varname>NO_SRC_ON_FTP</varname></para>
          
          <para> distfileをFTPに置いてはいけません。ソースコードやその他のdistfileのイ
            ンターネット経由での再配布が許可されていない場合は、この変数を
            <varname>${RESTRICTED}</varname>に設定してください。  </para>
        </listitem>
      </itemizedlist>
    
      <para> <varname>NO_PACKAGE</varname>,
        <varname>IGNORE</varname>, <varname>NO_CDROM</varname> など、制限を意味する上記以外の汎用make変数は使
        わないようにしてください。これらは、ユーザーのバイナリーパッケージ作成を、
        無条件にできないようにするからです。  </para>
    </sect2>

    
    <sect2 id="dependencies">
      <title>依存性の処理</title>
    
      <para> パッケージは他のパッケージに依存するかもしれません。そして、この依存性を定
        義するためのいろいろな方法があります。pkgsrc は、<filename>buildlink3.mk</filename>を使った依存関
        係 (依存性の処理用としては、こちらが望ましい方法です。
        この方法では以下の各変数を使っています。さらなる情報は<xref
          linkend="buildlink"/>を参照してください)
        のほか、
        <varname>BUILD_DEPENDS</varname>、<varname>DEPENDS</varname>定義をサポートしています。 </para>
    
      <para> 両変数の基本的な差異は、以下の通りです: <varname>DEPENDS</varname>定義では、
        その依存性がバイナリーパッケージ内に記録されるので、
        後でバイナリーパッケージをインストールする時に依存性が呼び出されます。
        一方、<varname>BUILD_DEPENDS</varname>定義ではバイナリーパッケージにそのような記録はされず、
        パッケージの構築に際して依存性があることが示されているだけです。
        </para>
    
      <para> つまり、あるパッケージが必要となるのが構築時だけである場合、そのパッケージ
        は<varname>BUILD_DEPENDS</varname>として書きます。 </para>
    
      <para> <varname>BUILD_DEPENDS</varname>および
        <varname>DEPENDS</varname>定義の書式は以下の通りです: </para>
    
      <programlisting>&lt;pre-req-package-name&gt;:../../&lt;category&gt;/&lt;pre-req-package&gt;</programlisting>
    
      <para> なお、この<quote>pre-req-package-name</quote> のバージョン番号には、&man.pkg.info.1; で説明され
        ている各ワイルドカードを含めることができます。 </para>
    
      <orderedlist>
        <listitem>
          <para> パッケージを構築または実行するために他のパッケージのバイナリーやライブラリーが必要で、
            そのパッケージに <filename>buildlink3.mk</filename> ファイルがある場合は、
            それを使ってください。 </para>

            <programlisting>
    .include "../../graphics/jpeg/buildlink3.mk"
    </programlisting>
        </listitem>
    
        <listitem>
          <para> パッケージを構築するために他のパッケージが必要で、
            そのパッケージに <filename>buildlink3.mk</filename> ファイルがない場合は、
            <varname>BUILD_DEPENDS</varname>定義を使ってください。 </para>
    
          <programlisting>BUILD_DEPENDS+=  autoconf-2.13:../../devel/autoconf</programlisting>
        </listitem>
    
        <listitem>
          <para> パッケージがリンクのためのライブラリーを必要とし、
            そのパッケージにやはり <filename>buildlink3.mk</filename> ファイルがない場合は、
            <varname>DEPENDS</varname>定義を使ってください。たとえば、
            <pkg>print/lyx</pkg>パッケージは、作成のためにxpm
            ライブラリーのバージョン3.4jを使用します。 </para>
    
          <programlisting>DEPENDS+=       xpm-3.4j:../../graphics/xpm</programlisting>
    
          <para> また、パッケージ依存関係にはワイルドカードを使うことができます。
            </para>
    
          <programlisting>DEPENDS+=       xpm-[0-9]*:../../graphics/xpm</programlisting>
    
          <para> ワイルドカード依存関係は、バイナリーパッケージを作る時には保持されること
            に注意してください。依存関係はバイナリーパッケージのインストール時にチェッ
            クされ、パターンにマッチするパッケージが使われます。ワイルドカード依存関係
            は、注意を払って使うよう気を付けてください。 </para>
    
          <para> <quote>tk-postgresql</quote>が<quote>tk-*</quote>という
            <varname>DEPENDS</varname>にマッチするなどの曖昧なマッチの可能性を排除
            するため、<quote>-*</quote>ではなく
            <quote>-[0-9]*</quote>を使うことをおすすめします。 </para>
    
          <para>ワイルドカードは、
            依存パッケージがあるバージョン以上でないと構築できないことを指定するのにも使えます。</para>
              
          <programlisting>DEPENDS+=       tiff>=3.5.4:../../graphics/tiff</programlisting>
    
          <para> 以上のように書いた場合、このパッケージは tiff ライブラリーのバージョン 3.5.4
            以降とともに構築されることを意味します。このような形式の依存関係は、たとえば、
            tiff ライブラリーの API が 3.5.4 で変更されたため、それより前のバージョンの tiff
            ではパッケージがコンパイルできないような場合に、構築できることを保証することができます。 </para>
    
          <para> なお、このような形式の依存関係は、新しい依存関係が必要となった場合のみに更新してください。
            セキュリティー上の更新あるいは ABI の変更などであって、構築自体は正常におこなうことができる場合、
            その推奨のために依存関係を更新したりしないでください。
            後者の場合は <varname>RECOMMENDED</varname> を使って推奨を示すことができます。 </para>
    
          <programlisting>RECOMMENDED+=   tiff>=3.6.1:../../graphics/tiff</programlisting>
    
          <para> これを上述の <varname>DEPENDS</varname> 行に追加することで、
            パッケージの構築は tiff&gt;=3.5.4 でおこなうことができるが、
            少なくともバージョン 3.6.1 を推奨するということを意味します。
            <varname>RECOMMENDED</varname> の内容は、(警告が表示された際に)
            明示的に無視された場合を除き、依存関係に反映されます。
            推奨を無視して構築されたパッケージは、開発者が ftp.NetBSD.org
            へアップロードしてはいけません。また、そのようなパッケージを別のシステムで使うと、
            別バージョンのバイナリーパッケージが複数インストールされる可能性があるので、
            そのようなこともしないようにしてください。  </para>
    
          <para> セキュリティー上の修正があった場合は、<varname>RECOMMENDED</varname>
            を設定するとともに、パッケージ脆弱性ファイルを更新してください。
            さらなる情報は、<xref
            linkend="security-handling"/>を参照してください。 </para>
	</listitem>
    
        <listitem>
          <para> パッケージを実行するために、いくつかの実行可能ファイルが必要であり、かつ
            <filename>buildlink3.mk</filename> ファイルが存在しない場合は、
            <varname>DEPENDS</varname>変数を使ってください。<pkg>print/lyx</pkg>パッケージを実行する時には、
            teTeXパッケージ由来のlatex のバイナリーが実行可能でなければなりません。これ
            は、以下のように指定します。 </para>
    
          <programlisting>DEPENDS+=        teTeX-[0-9]*:../../print/teTeX</programlisting>
    
          <para> 上述した、ワイルドカード依存関係に関する注意は、ここにも当てはまります。 </para>
        </listitem>
      </orderedlist>
    
      <para> パッケージの構築用に別のパッケージに含まれるファイルが必要な場合は、
        <pkg>print/ghostscript5</pkg>パッケージの<quote>do-configure</quote>ターゲットの最初の部分を
        ご覧ください(このパッケージは、構築の際にjpegのソースがソースの状態で存在す
        ることに依存しています)。 </para>
    
      <programlisting>if [ ! -e ${_PKGSRCDIR}/graphics/jpeg/${WRKDIR:T}/jpeg-6b ]; then \
          cd ${_PKGSRCDIR}/../../graphics/jpeg &amp;&amp; ${MAKE} extract;              \
    fi</programlisting>
    
      <para> このように、別のパッケージの構築用にソースを展開する場合は、構築するパッケー
        ジの作業ファイルの削除時に、展開した依存先パッケージの作業ファイルも削除す
        るようにしてください。そうするための一番簡単な方法は、pre-cleanターゲットを
        追加することです。 </para>
    
      <programlisting>pre-clean:
          cd ${_PKGSRCDIR}/../../graphics/jpeg &amp;&amp; ${MAKE} clean</programlisting>
    
      <para> また、便利に使うことができる<varname>BUILD_USES_MSGFMT</varname>および
        <varname>BUILD_USES_GETTEXT_M4</varname>定
        義にも注意してください。前者は、基本システムに msgfmt(1) があるかどうか調べて、
        ない場合は<pkg>devel/gettext</pkg>パッケージをインストールします。後者は、構築
        の際に、旧バージョンのgettextパッケージがインストールされていることに依存す
        るようにし、これがインストールされていない場合は<pkg>devel/gettext-m4</pkg>パッ
        ケージをインストールします。 </para>
    </sect2>


    <sect2>
      <title>他のパッケージとの衝突の処理</title>
    
      <para> パッケージは、すでにインストール済みの別のパッケージと衝突する可能性があり
        ます。例えば、パッケージが、pkgsrcの中の別のパッケージと同じファイルをイン
        ストールするような場合です。 </para>
    
      <para> この場合、衝突するパッケージ(バージョン文字列を含む)のリストをスペースで区
        切って<varname>CONFLICTS</varname>にセットすることができます。 </para>
    
      <para> 例えば、<pkg>x11/Xaw3d</pkg>および<pkg>x11/Xaw-Xpm</pkg>は同じ共有ライブラリーをイ
        ンストールします。したがって、<filename>pkgsrc/x11/Xaw3d/Makefile</filename>に以下のような設定を
        おこなってください。 </para>
    
      <programlisting>CONFLICTS=      Xaw-Xpm-[0-9]*</programlisting>
    
      <para> そして、<filename>pkgsrc/x11/Xaw-Xpm/Makefile</filename>には以下の設定が必要です。
        </para>
    
      <programlisting>CONFLICTS=      Xaw3d-[0-9]*</programlisting>
    
      <para> パッケージは、名前のプレフィックスが同じで、異なるバージョン文字列をもつ別
        のパッケージと自動的に衝突します。例えば<quote>Xaw3d-1.5</quote>は、古いバージョンの
        <quote>Xaw3d-1.3</quote>と衝突するでしょう。
        </para> 
    </sect2>


    <sect2>
      <title>構築することができない、あるいはすべきでないパッケージ</title>
    
      <para>
        環境によってはパッケージを構築しないよう指示するような理由がいくつかありま
        す。パッケージが、ほとんどのプラットフォームで構築および実行できる場合は、
        <varname>NOT_FOR_PLATFORM</varname>として例外を記述します。逆に、パッケージが一部のプラットフォー
        ムでしか構築および実行できない場合は、<varname>ONLY_FOR_PLATFORM</varname>を設定します。パッケー
        ジをとばすべき場合(たとえば、そのパッケージが提供する機能が、すでにシステム
        で提供されている場合)は、
        <varname>PKG_SKIP_REASON</varname>にそのことを説明するメッセージを設
        定します。必要な条件が満たされていないせいでパッケージの構築が失敗するであ
        ろう場合は、<varname>PKG_FAIL_REASON</varname>にそのことを説明するメッセージを設定します。
        </para> 
    
      <para> <varname>IGNORE</varname>は、構築失敗の理由を特定するために十分な情報を提供しないので、使わな
        いでください。
      </para>  
    </sect2>
    
    
    <sect2>
      <title>一旦インストールしたら削除すべきでないパッケージ</title>
    
      <para>あるパッケージを、一旦インストールしたら削除できないようにするためには、
        そのパッケージの Makefile で <varname>PKG_PRESERVE</varname>
        定義を設定します。この定義を設定した
        pkgsrc エントリーから作られたバイナリーパッケージには、その旨が記録されます。
        <quote>preserved</quote> 付きのパッケージは、
        &man.pkg.delete.1; を使っても、
        <quote>-f</quote> オプションを付けない限りは削除されません。</para>
    </sect2>
    
    
    <sect2 id="security-handling">
      <title>セキュリティー問題を持つパッケージへの対処</title>
      
      <para> 脆弱性が発見された場合、そのことを
        <filename>localsrc/security/advisories/pkg-vulnerabilities</filename>に記載してcommitしてくださ
        い。このファイルを commit した後、
        <filename>localsrc/security/advisories/Makefile</filename>
        を使って、ftp.NetBSD.orgの
        <filename>/pub/NetBSD/packages/distfiles/pkg-vulnerabilities</filename>
        と
        <filename>/pub/NetBSD/packages/distfiles/vulnerabilities</filename> にコピーしてください。
        さらに、脆弱性の影響を受けるパッケージに <filename>buildlink3.mk</filename>
        ファイルが存在する場合は、<varname>PKGREVISION</varname> を上げて、対応する 
        <varname>BUILDLINK_RECOMMENDED.<replaceable>pkg</replaceable></varname>
        エントリーを作ってください。
        <filename>buildlink3.mk</filename> ファイルや
        <varname>BUILDLINK_*</varname> 定義の書き方の詳細については、
        <xref linkend="buildlink"/>を参考にしてください。 </para>

      <para> また、修正を安定版 pkgsrc 枝に適用したほうがよい場合は、
        pullup 要求を提出してください。 </para>
    </sect2>


    <sect2>
      <title>コンパイラーのバグへの対処方法</title>
    
      <para>  ソースファイルのなかには、コンパイラーのバージョンとアーキテクチャーの組合
        せによって、また、ほとんどの場合は、最適化を有効にしたことも関係して、コン
        パイラーのバグを発現させるものがあります。よくある症状は、gccの内部エラーや、
        ファイルのコンパイルが完了しないというものです。
        </para> 
    
      <para>  たいていは、回避策として、<varname>MACHINE_ARCH</varname>
        とコンパイラーのバージョンを確認し、
        問題のあるファイル/<varname>MACHINE_ARCH</varname>/コンパイラーの組合せに対して最適化を無効に
        し、そのことを<filename>pkgsrc/doc/HACKS</filename>に文書化しておくことが必要となります。
        このファイルに多くの例が載っているので、参照してください。 </para>
    </sect2>
            

    <sect2>
      <title>既存パッケージ修正時に、バージョンを上げるにはどうするか</title>
    
      <para> 既存のパッケージに修正を加えたときに、<varname>PKGNAME</varname>のバージョン番号を変えると便利
        な場合があります。元の作者による将来のバージョンと衝突しないようにするため、
        <varname>PKGREVISION=1</varname> (2, ...)を設定して、パッケージのバージョンに
        <quote>nb1</quote>, <quote>nb2</quote>, ...
        という接尾辞をつけることができます。この<quote>nb</quote>は、pkgツール群からは<quote>.</quote>と
        同様の扱いを受けます。たとえば、  </para>
    
      <programlisting>  DISTNAME= foo-17.42
    PKGREVISION=  9</programlisting>
    
      <para> とすると、<varname>PKGNAME</varname>は<quote>foo-17.42nb9</quote>になります。  </para>
    
      <para> このパッケージの新しいリリース版が出た際には、
        <varname>PKGREVISION</varname>は消してください。
        たとえば、上で例示したパッケージの新しいマイナーリリースに際しては、以下の
        ようにします。
        </para>
    
      <programlisting>DISTNAME=   foo-17.43</programlisting>
    </sect2>
    
    
    <sect2>
      <title>パッケージの移植性</title>

      <para>pkgsrc の目玉の一つは、多くのプラットフォームで動作することです。
        そのため、pkgsrc のパッケージの移植性をできるかぎり高めることが重要になります。
        pkgsrc の作業に際して、
        具体的には以下のような事項に注意してください。</para>

      <sect3>
        <title>${INSTALL}, ${INSTALL_DATA_DIR}, ...</title>

        <para>一部のプラットフォームに附属する BSD 互換の <command>install</command> は、
          一度に複数の操作をおこなうことができません。
          このため、 <quote>${INSTALL}</quote> などを使うときは、以下のようにします。</para>

          <programlisting>${INSTALL_DATA_DIR} ${PREFIX}/dir1
${INSTALL_DATA_DIR} ${PREFIX}/dir2</programlisting>
      </sect3>

    </sect2>
  </sect1>
  
  
  <sect1>
    <title>ダウンロードで起こりうる問題</title>

    <sect2>
      <title>distfileのダウンロードが単純にできないパッケージ</title>
    
      <para> 動的なURLからダウンロードする必要がある場合は、
        <varname>DYNAMIC_MASTER_SITES</varname>
        を設定す
        ることができます。すると、<command>make fetch</command>は、ダウンロードすべき各ファイルを引
        数として<filename>files/getsite.sh</filename>を呼び出します。このスクリプトは、ファイルをダウン
        ロードするディレクトリーのURLを出力することが前提となっています。
        <pkg>graphics/ns-cult3d</pkg>が、この使い方の例となっています。
        </para>
    
      <para> パスワード用に個人情報の登録が必要だったり、ソースに代金を払う必要があった
        り、その他もろもろの理由により、ダウンロードが自動化できない場合は、
        <varname>_FETCH_MESSAGE</varname>に、説明文を表示するマクロを設定することができます。
        <varname>_FETCH_MESSAGE</varname>は、説明文そのものではなく、実行可能なシェルコマンドである必
        要があります。(一般的には、
        <varname>${ECHO}</varname>を実行します)。本稿執筆時点で、この方法を
        使っているパッケージは、 <pkg>audio/realplayer</pkg>,
        <pkg>cad/simian</pkg>, <pkg>devel/ipv6socket</pkg>,
        <pkg>emulators/vmware-module</pkg>,
        <pkg>fonts/acroread-jpnfont</pkg>,
        <pkg>sysutils/storage-manager</pkg>,
        <pkg>www/ap-aolserver</pkg>, <pkg>www/openacs</pkg> です。これらと一貫性のある使い方をしてください。  </para>
    </sect2>
    

    <sect2>
      <title>'古い'名前のまま更新されたdistfileの取り扱い</title>
    
      <para> 時々、ソフトウェアパッケージの作者がソフトウェアのリリース後に変更を加え、
        変更後のdistfileを、バージョン番号を変えずに公開することがあります。このと
        き、pkgsrcにそのパッケージがすでに入っていると、md5チェックサムが一致しない
        ことになります。この問題の正しい回避策は、パッケージのmd5チェックサムをマス
        ターサイト(ミラーサイトでは更新されていないことがあります!)のパッケージに合
        わせて変更し、古いdistfileを ftp.NetBSD.org の<filename>/pub/NetBSD/packages/distfiles</filename>
        ディレクトリーから削除することです。さらに、パッケージの正当な作者にメール
        を出して、distfileの更新が意図されたものであって、トロイの木馬などが仕込ま
        れたのではないことを確認します。  </para>
    </sect2>
  </sect1>


  <sect1>
    <title>コンフィギュレーションの技巧</title>

    <sect2 id="fixes.libtool">
      <title>共有ライブラリー - libtool</title>

      <para>pkgsrcはさまざまな種類のマシンをサポートします。それらはa.outとELFのような
        異なるオブジェクトフォーマットを使い、共有ライブラリー、ダイナミックローディ
        ングの有無すらも異なります。これに対応するためにコマンドそのもの、およびオ
        プションがコンパイラー、リンカーなどに渡される必要があります。すべてのマシ
        ンで正しく動作させることは非常にむずかしく、テストのためにすべてのマシンを
        持っていない場合は特にそうでしょう。<pkg>devel/libtool</pkg>パッケージはこれを助けます。
        <pkg>devel/libtool</pkg>はプラットフォームによらずに、
        ソースファイルから、静的、動的なライブラリー両方を構築する方法
        を<quote>知って</quote>いるからです。</para>

      <para>以下に、libtoolをパッケージで使用するための7つの手順を記述します。</para>

      <orderedlist>
        <listitem>
          <para><varname>USE_LIBTOOL=yes</varname>をパッケージのMakefileへ追加します。</para>
        </listitem>

        <listitem>
          <para>ライブラリーオブジェクトのために、<quote>${LIBTOOL} --mode=compile ${CC}</quote>を<quote>${CC}</quote>
            に設定します。ライブラリーが、提供されたMakefileだけを使用して構築される
            のであれば、<varname>CC</varname>の定義にこれを追加するだけです。このコマンドひとつだけで、
            PICと非PICのライブラリーオブジェクトを作成します。したがって、共有ライブ
            ラリーとそうでないライブラリーの構築規則を別々に記述する必要はありません。</para>
        </listitem>

        <listitem>
          <para>ライブラリーのリンクのための<quote>ar</quote>、<quote>ranlib</quote>、<quote>ld -Bshareable</quote>コマン
            ドを削除してください。そしてその代わりに以下のコマンドを使用してください。</para>

          <programlisting>${LIBTOOL} --mode=link ${CC} -o ${.TARGET:.a=.la} ${OBJS:.o=.lo} -rpath ${PREFIX}/lib -version-info major:minor</programlisting>

          <para>ライブラリーの拡張子は<filename>.la</filename>に、オブジェクトの拡張子は
            <filename>.lo</filename>に変更されることに
            注意してください。<varname>OBJS</varname>
            を必要に応じて変更してください。このコマンドは、必
            要なものすべて、
            <filename>.a</filename>、<filename>.so.major.minor</filename>、
            そしてELFのシンボリックリンク(必要
            なら)を自動的にカレントディレクトリーに作成します。特に、メジャー番号と
            マイナー番号がゼロの場合は、<quote>-version-info</quote>をかならず含めるようにしてくだ
            さい。そうしないとlibtoolは共有ライブラリーのバージョンを取り除きます。</para>

          <para> libtool のマニュアルより:</para>

          <programlisting>
     libtool のライブラリーのバージョンは、以下の三つの整数で表されます。

CURRENT
       このライブラリーが実装しているインターフェース番号のうち最新のもの。

REVISION
       CURRENT インターフェースの実装番号。

AGE
       このライブラリーが実装しているインターフェースの最新のものと最古のものの間の差。
       すなわち、このライブラリーが実装しているのは、
        `CURRENT - AGE' から `CURRENT' までの番号の範囲にある、
       すべてのインターフェース番号です。
       
     二つのファイブラリーの CURRENT と AGE 番号がいずれも同じ場合、
ダイナミックリンカーは REVISION 番号が大きいほうのライブラリーを選びます。</programlisting>

          <para>また、<quote>-release</quote>オプションは、ある一つの場合に限って、a.outとELF(シンボ
            リックリンクを除く)との間で異なる結果をもたらします。
            <quote>libfoo-release.so.<emphasis>x</emphasis>.<emphasis>y</emphasis></quote>
            の形式のELFライブラリーは、a.outプラットフォーム上
            では
            <quote>libfoo.so.<emphasis>x</emphasis>.<emphasis>y</emphasis></quote>
            のシンボリックリンクを持ちます。これは自動的に処理され
            ます。</para>

          <para><quote>-rpath引数</quote>は構築されたライブラリーのインストール先ディレクトリーです。</para>

          <para><filename>PLIST</filename>には、
            <filename>.a</filename>, <filename>.la</filename> および、
            <filename>.so</filename>,
            <filename>.so.<replaceable>major</replaceable></filename> と
            <filename>.so.<replaceable>major</replaceable>.<replaceable>minor</replaceable></filename>
            ファイルをすべて含めます。</para>
        </listitem>

        <listitem>
          <para>共有オブジェクト(<filename>.so</filename>)ファイル(すなわち、dlopen(3)でロードされるファイル
            であって、共有ライブラリーでは*ありません*)のリンク時には、ファイルにバー
            ジョンが加えられないようにするため、<quote>-module -avoid-version</quote>を使ってくだ
            さい。</para>

          <para><filename>PLIST</filename>ファイルには<filename>foo.so</filename>
            の一覧が加わります。</para>
        </listitem>

        <listitem>
          <para>インストールする<emphasis>前</emphasis>のライブラリーに依存するプログラムをリンクする時に、
            &man.cc.1;か&man.ld.1;の前に
            <quote>${LIBTOOL} --mode=link</quote>を書いてください。このコマンドは、正
            しいライブラリー(静的、または共有)を見つけます。ただし、libtoolを使う時
            には-Lオプションで相対パスを指定すること(<quote>-L../somelib</quote>のように)ができない
            ことに注意してください。引数として<filename>.la</filename>ファイルを使うように修正しなければ
            なりません。例えば、</para>

          <programlisting>${LIBTOOL} --mode=link ${CC} -o someprog -L../somelib -lsomelib</programlisting>

          <para>は、以下のように変更する必要があります。</para>

          <programlisting>${LIBTOOL} --mode=link ${CC} -o <replaceable>someprog</replaceable> <replaceable>../somelib/somelib.la</replaceable></programlisting>

          <para>これで、ライブラリーを正しく扱う事ができます。</para>
        </listitem>

        <listitem>
          <para>ライブラリーをインストールするときに、&man.install.1;
            あるいは&man.cp.1;コマンドの前に
            <quote>${LIBTOOL} --mode=install</quote>を書いて下さい。そしてライブラリーの名前を
            <filename>.la</filename>に変えてください。例えば、以下のように書く必要があります。</para>

          <programlisting>${LIBTOOL} --mode=install ${BSD_INSTALL_DATA} ${SOMELIB:.a=.la} ${PREFIX}/lib</programlisting>

          <para>これは、静的リンクのための<filename>.a</filename>、共有ライブラリー、必要なシンボリックリンク
            をインストールし、&man.ldconfig.8;を実行します。</para>
        </listitem>

        <listitem>
          <para> <filename>PLIST</filename> に、
            <filename>.a</filename>, <filename>.la</filename>,
            <filename>.so</filename>, <filename>.so.CURRENT</filename>, 
            <filename>.so.CURRENT.REVISION</filename> ファイルをすべて含めます
            (これは、以前のものから変わった点です)。 </para>        
        </listitem>
      </orderedlist>
    </sect2>

    
    <sect2>
      <title>すでにlibtoolをサポートしているGNUパッケージでlibtoolを使う</title>

      <para><varname>USE_LIBTOOL=yes</varname> をパッケージの
        Makefile に追加します。こうするとほとんどの場合、パッケージ固有の
        libtool を無視します。古い libtool を使っているパッケージでは、
        libtool はdo-configureターゲットでltconfigスクリプトにより作られます。<command>make
        configure; find work*/ -name libtool</command>
        のようにして、libtool スクリプトの場所を確認することができます。</para>

      <para> <varname>LIBTOOL_OVERRIDE</varname> で、どの libtool
        スクリプトを無視するかを、<varname>WRKSRC</varname> からの相対位置で指定します。
        指定しなかった場合、<quote>libtool */libtool
        */*/libtool</quote> に設定されますので、パッケージ固有の libtool
        スクリプトの場所がこのいずれとも異なる場合は、適宜設定してください。 </para>

      <para> 静的ライブラリー <filename>*.a</filename>
        の構築やインストールが必要ない場合は、かわりに
        <varname>SHLIBTOOL_OVERRIDE</varname> を使います。 </para>

      <para>パッケージが動的共有オブジェクトのロードに、libtool (libltdl)のプラットフォー
        ム独立なライブラリーを使う場合は、libtoolのbuildlink3.mkをインクルード(さら
        に、<varname>USE_BUILDLINK3=YES</varname>を設定)してください。</para>

      <para>パッケージによっては、環境により動作や構築ができなくなるような、正しくない
        libtoolの使い方をしているものがあります。ありがちな間違いは以下のようなもの
        です。</para>

      <itemizedlist>
        <listitem>
          <para>実行形式やライブラリーで、共有オブジェクト(-module)を依存ライブラリーと
            してインクルードする。このこと自体は、以下の二つのうちいずれかが行なわれ
            ている場合は、問題になりません。</para>

          <orderedlist>
            <listitem>
              <para>その共有オブジェクトが正しく命名されている。すなわち、
                <filename>libfoo.la</filename>ではなく
                <filename>libfoo.la</filename>となっている。</para>
            </listitem>

            <listitem>
              <para>-dlopenオプションが実行形式のリンク時に使われている。</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>ルーチンの初期化を適切に呼ばずにlibltdlを使う。関数lt_dlinit()を呼んで、
            マクロ
            <varname>LTDL_SET_PRELOADED_SYMBOLS</varname>を実行形式にインクルードするようにしましょ
            う。</para>
        </listitem>
      </itemizedlist>
    </sect2>

    
    <sect2>
      <title>GNU Autoconf/Automake</title>

      <para>パッケージが、configureスクリプトやmakefileの雛型Makefile.inを再生成するた
        めにGNU autoconfまたはautomakeを実行する必要がある場合、これらの実行は
        pre-configureターゲットでおこないます。これらのツールの扱いを補助するための
        Makefileの断片が二つ、
        <filename>pkgsrc/mk/autoconf.mk</filename>および
        <filename>pkgsrc/mk/automake.mk</filename>で用
        意されています。詳細は、このファイル中のコメントをご覧ください。</para>

        <para>autoconfのみを必要とするパッケージでは以下のようになります: </para>

        <programlisting>AUTOCONF_REQD=    2.50    # if default version is not good enough
...

pre-configure:
          cd ${WRKSRC}; ${AUTOCONF}

...
.include "../../mk/autoconf.mk"</programlisting>

        <para> また、automakeとautoconfを必要とするパッケージでは以下のようになります: </para> 

<programlisting>AUTOMAKE_REQD=  1.7.1   # if default version is not good enough
...

pre-configure:
          cd ${WRKSRC};                                           \
          ${ACLOCAL};                                             \
          ${AUTOHEADER};                                          \
          ${AUTOMAKE} -a --foreign -i;                            \
          ${AUTOCONF}

...
.include "../mk/automake.mk"</programlisting>

        <para> GNU Automake を使うパッケージは、ほぼ確実に
          GNU Make を必要としますが、この依存関係は
          <filename>mk/automake.mk</filename> で自動的に処理されます。 </para> 

        <para> 生成されたファイルに対して、configureプロセスがさらに変更を加える時がありま
          すが、この時には構築プロセスが一連のautomakeの手順を再実行しようとします。
          configureの段階でさまざまなファイルに手を加えると、この挙動は止められます。
          この挙動が問題が起こす場合は、そのパッケージのMakefileで
          <varname>AUTOMAKE_OVERRIDE=NO</varname>を設定することができます。 </para>
    </sect2>
  </sect1>
  
  
  <sect1>
    <title>構築の考察</title>

    <sect2>
      <title>CPP定義</title>
    
      <para>
        アプリケーションをNetBSDに移植するためには、コンパイラーがコンパイルしてい
        るシステムを判断する必要があります。したがって、Cのプリプロセッサーがシステ
        ムを判断できるように、CPPの定義を使います。
      </para>

      <para>
        4.4 BSDから派生したシステム上で作業しているかどうかをテストするためには、
        BSD定義を使用します。これは
        <filename>&lt;sys/param.h&gt;</filename>で定義されています。
      </para>

      <programlisting><![CDATA[#include <sys/param.h>]]></programlisting>

      <para>また、パッケージの C や C++ のコードのうち BSDに固有の部分を、
        以下の条件でかこむこともできます。</para>

      <programlisting><![CDATA[#if (defined(BSD) && BSD >= 199306)
    ...
#endif]]></programlisting>

      <para>どうか注意して<quote>__NetBSD__</quote>定義を使って下さい。4.4-liteから派生した他のBSDにな
        い&os;固有の特徴にのみ適用してください。</para>
    </sect2>
  </sect1>
  
  
  <sect1>
    <title>パッケージ特有の機能</title>

    <sect2>
      <title>パッケージの設定ファイル</title>
      
      <para> パッケージの設定ファイルの場所は、<varname>${PKG_SYSCONFDIR}</varname>として指示され、この値は
        configureおよびbuildのプロセスに渡されます。
        <varname>PKG_SYSCONFDIR</varname>は、他のmake変数
        のさまざまな設定によってカスタマイズすることができます: </para>

      <itemizedlist>
        <listitem>
          <para> <varname>PKG_SYSCONFBASE</varname>は主たる設定ディレクトリーで、パッケージ用の設定ファイルす
            べてがこれ以下に置かれます。デフォルトは<filename>${PREFIX}/etc</filename>ですが、
            <filename>/etc/mk.conf</filename>で上書きすることができます。 </para>
        </listitem>

        <listitem>
          <para>  <varname>PKG_SYSCONFSUBDIR</varname>は
            <varname>PKG_SYSCONFBASE</varname>のサブディレクトリーで、個々のパッケー
            ジ用の設定ファイルはこの下に置かれます。たとえば、Apacheの設定ファイルは
            すべて、
            <varname>${PKG_SYSCONFBASE}</varname>のサブディレクトリー
            <filename>httpd/</filename>の下に置かれます。こ
            れは、パッケージのMakefileで設定することを想定しています。
            </para>
        </listitem>

        <listitem>
          <para> デフォルトでは
            <varname>PKG_SYSCONFDIR</varname> は
            <varname>${PKG_SYSCONFBASE}/${PKG_SYSCONFSUBDIR}</varname> に設定されますが、
            このデフォルト値は、個々のパッケージに対して
            <varname>PKG_SYSCONFDIR.${PKG_SYSCONFVAR}</varname> を設定することで上書きすることができます。
            この<varname>PKG_SYSCONFVAR</varname>
            は、デフォルトでは<varname>${PKGBASE}</varname>です。これは、パッケージの
            Makefileで設定するためのものではなく、ユーザーが個々のパッケージについて
            <varname>PKG_SYSCONFDIR</varname>の設定を特別な場所に上書きするために予約されているものです。
            </para>
          </listitem>
        </itemizedlist>

      <para> ユーザーがカスタマイズすべき変数は、
          <varname>PKG_SYSCONFBASE</varname>と <varname>PKG_SYSCONFDIR.${PKG_SYSCONFVAR}</varname>だけです。
          通常、ユーザーは
          <varname>PKG_SYSCONFBASE</varname>を
          <filename>/etc</filename>に設定するか、またはデフォルトの場所の
          <filename>${PREFIX}/etc</filename>のままにするでしょう。 </para>
    </sect2>

    <sect2>
      <title>ユーザーとの対話</title>

      <para>時々、パッケージがユーザーとの対話を必要とする場合がありますが、そのような
        状況は何通りもありえます:</para>

      <itemizedlist>
        <listitem>
          <para>distfileの取得に関する補助</para>
        </listitem>

        <listitem>
          <para>パッケージの構築前の設定の補助</para>
        </listitem>

        <listitem>
          <para>構築過程の最中の補助</para>
        </listitem>

        <listitem>
          <para>パッケージのインストール中の補助</para>
        </listitem>
      </itemizedlist>

      <para>どの段階で対話が必要になるかをpkgsrcの機構に知らせるため、<varname>INTERACTIVE_STAGE</varname>
        定義が用意されており、パッケージの<filename>Makefile</filename>で定義します。たとえば以下のよう
        にします。</para>

      <programlisting>INTERACTIVE_STAGE= build</programlisting>

      <para>複数の段階を指定することもできます:</para>

      <programlisting>INTERACTIVE_STAGE= configure install</programlisting>
    </sect2>


    <sect2>
      <title>ライセンスの処理</title>

      <para>パッケージに適用されるライセンスのなかには、
        利用者によって同意できたり同意できなかったりするものがあるかもしれません。
        通常、よく知られたオープンソースライセンス (たとえば GNU Public License,
        GPL) が適用されているパッケージでは、
        特に同意するための行為を利用者におこなわせるための特別な印は
        pkgsrc にはついていません。ですが、それら以外のライセンスのなかには、
        利用者が何らかの理由で同意しない可能性があるようなものが相当数あります。
        このような場合のために、
        pkgsrc には、パッケージが特殊なライセンスの下にあることを記すための仕組みがあり、
        これを使うと、利用者がライセンスに同意しない限りインストールできないようになります。 </para>

      <para>
        パッケージが特殊なライセンスの下にあることを指定するには、
        <varname>LICENSE</varname> をライセンスを特定する文字列に設定します。
        たとえば、<pkg>graphics/graphviz</pkg> では以下のようになります。
        </para>

      <programlisting>LICENSE=        graphviz-license</programlisting>

      <para>
        構築しようとすると、利用者はそのパッケージのライセンスに
        (まだ) 同意していないことを知らされます。
        </para>
	
      <programlisting>
&cprompt; <userinput>make</userinput>
===> graphviz-1.12 has an unacceptable license: graphviz-license.
===>     To build this package, add this line to your /etc/mk.conf:
===>     ACCEPTABLE_LICENSES+=graphviz-license
===>     To view the license, enter "/usr/bin/make show-license".
*** Error code 1</programlisting>

        <para> ライセンス自体は <command>make
          show-license</command> すると見ることができます。
          そのライセンスが妥当なものであると判断した場合は、
          ライセンスに同意していることを表すために、
          上の表示中で指示されている行を <filename>/etc/mk.conf</filename>
          に追加することができます。</para>

	<programlisting>ACCEPTABLE_LICENSES+=graphviz-license</programlisting>

	<para>新しいライセンスが適用されているパッケージを追加する場合、
          表示用のライセンスのテキストを <filename>pkgsrc/licenses</filename>
          に追加します。既知のライセンスの一覧は、
          <filename>pkgsrc/mk/bsd.pkg.defaults.mk</filename>
          で (コメントアウトされている)
          <varname>ACCEPTABLE_LICENSES</varname> 変数の設定の一覧で見られるほか、
          このディレクトリーで見ることができます。</para>

	<para> すべての distfile をダウンロードあるいはミラーしたり、
          pkgsrc のすべてのパッケージの構築テストのためにバルクビルドを実行するときなど、
          すべてのライセンスにまとめて同意する必要が<emphasis>本当に</emphasis>ある場合は、
          <varname>_ACCEPTABLE=yes</varname>
          を設定すれば、まとめて同意することができます。
	  </para>
      </sect2>
    

    <sect2>
      <title>パッケージでアカウントを作成する</title>
    
      <para> パッケージ特有のグループやユーザーをpre-install時に作成するよう制御するため、
        二つのmake変数があります。一つ目は
        <varname>PKG_GROUPS</varname>で、group[:groupid]という要素
        (グループIDはあってもなくてもかまいません)を列挙したものです。二つ目は
        <varname>PKG_USERS</varname>で、以下のような形式の要素を列挙したものです: </para>
    
      <programlisting>user:group[:[userid][:[description][:[home][:shell]]]]</programlisting>
    
      <para> userとgroupのみが必須であり、それ以外はあってもなくてもかまいません。簡単な
        例は、以下のとおりです: </para>
    
      <programlisting>  PKG_GROUPS=       foogroup
    PKG_USERS=    foouser:foogroup</programlisting>
    
      <para> もっと複雑な、二つのグループと二つのユーザーを作成する例は、以下のとおりで
        す: </para>
    
      <programlisting>  PKG_GROUPS=       group1 group2:1005
    PKG_USERS=    first:group1::First\\ User                      \
                  second:group2::Second\\ User:/home/second:${SH}</programlisting>
    
      <para> ユーザーのホームディレクトリーやログインシェルを指定しなかった場合の、デフォ
        ルトのホームディレクトリーは
        <filename>/nonexistent</filename>、ログインシェルは
        <filename>/sbin/nologin</filename>です。 </para>
    
      <para> これらの変数を指定するほか、パッケージの<filename>Makefile</filename>で、
        <varname>USE_PKGINSTALL=YES</varname> を設定する必要があります。こ
        れにより、pre-install時にユーザーとグループが作成されるようになり、
        post-deinstall時にはこのユーザーとグループの削除を管理者に促すようになりま
        す。パッケージのインストールの前に <varname>PKG_CREATE_USERGROUP</varname> 変数をonかoffに
        設定しておくと、ユーザーとグループを自動で作成するかどうかを切替えることが
        できます。 </para>
    </sect2>
    
    
    <sect2>
      <title>得点ファイルをインストールする</title>
    
      <para> パッケージによっては (ほとんどは games カテゴリーのもの)、
        システム上の各ユーザーが最高得点を記録できるように、
        得点ファイルをインストールします。これを実現するために、
        バイナリーは setgid してインストールし、得点ファイルは
        グループとオーナーのいずれかまたは両方を当該グループやオーナー
        (伝統的には "games" ユーザーおよびグループ) の所有とする必要があります。
        <varname>SETGIDGAME</varname>,
        <varname>GAMEDATAMODE</varname>, <varname>GAMEGRP</varname>,
        <varname>GAMEMODE</varname>, <varname>GAMEOWN</varname>
        の各変数でこの挙動を制御します。詳細は
        <filename>mk/bsd.pkg.defaults.mk</filename> に書かれています。 </para>
    
      <para> なお、games に setgid されたインストールは、標準では有効になっていません。
        <varname>SETGIDGAME=YES</varname> を設定すると、
        これに応じて他の各変数が設定されます。 </para>
    
      <para> このため、パッケージではファイルの所有やアクセス許可属性を決してハードコードせずに、
        <varname>INSTALL_GAME</varname> および
        <varname>INSTALL_GAME_DATA</varname>
        の設定に応じて適切に設定されるようにします。 </para>
    </sect2>
    
    
    <sect2>
      <title>ログインシェルを提供するパッケージ</title>
    
      <para> パッケージの目的がログインシェルの提供である場合は、
        <varname>PKG_SHELL</varname>変数を、このパッ
        ケージでインストールされるシェルの実行ファイルのフルパス名とします。また、
        自動生成される
        <filename>INSTALL</filename>/<filename>DEINSTALL</filename>スクリプトを使うために、パッケージの
        <filename>Makefile</filename>
        で、<varname>USE_PKGINSTALL=YES</varname>を設定する必要も
        あります。  </para>
          
      <para> 以下はshells/zshでの例です。 </para>
    
      <programlisting>  USE_PKGINSTALL=   YES
    PKG_SHELL=    ${PREFIX}/bin/zsh</programlisting>
    
      <para>
        インストールされたシェルは、post-installの段階で、
        生成された<filename>INSTALL</filename>スク
        リプトによって自動的に<filename>/etc/shells</filename>ファイルに登録されます。また、deinstallの
        段階で、<filename>DEINSTALL</filename>スクリプトによって<filename>/etc/shells</filename>から削除されます。  </para>
    </sect2>
    
    
    <sect2>
      <title>perlスクリプトを含むパッケージ</title>
    
      <para>
        perlスクリプトがパッケージに含まれる場合は、
        インタープリターのパスが適切に設定されるようにするために、
        <varname>REPLACE_PERL</varname>を設定します。
        <varname>REPLACE_PERL</varname>の設定値は、調整の対象となるスクリプトを<varname>WRKSRC</varname>からの相対位置で列挙したものにし
        ます。  </para>
    </sect2>
    
    
    <sect2>
      <title>その他のインタープリターへのパスがハードコードされているパッケージ</title>
    
      <para>
        パッケージには perl 以外のインタープリターへのパスがハードコードされていることもあります。
        スクリプトのインタープリターへのフルパスを適切なものにするため、
        当該パッケージの <filename>Makefile</filename> で、
        以下のような定義をする必要があります
        (ここでは例として <command>tclsh</command> を使います)。</para>
    
      <programlisting>  REPLACE_INTERPRETER+=     tcl
    _REPLACE.tcl.old=     .*/bin/tclsh
    _REPLACE.tcl.new=     ${PREFIX}/bin/tclsh
    _REPLACE_FILES.tcl=   …パスを修正する必要がある tcl スクリプトを列挙します
                          REPLACE_PERL と同様に、${WRKSRC} からの相対位置とします</programlisting>
    </sect2>

    
    <sect2>
      <title>perl モジュールをインストールするパッケージ</title>
  
      <para>perl5モジュールを提供するパッケージでは、MakefileにMakefileの断片
        <filename>../../lang/perl5/module.mk</filename>をインクルードしてください。このファイルには、perl5モ
        ジュール用の標準的なperlの構成をする<command>do-configure</command>ターゲットのほか、その構成
        を調整するためのさまざまなフックが含まれています。詳細は、このファイル中の
        コメントをご覧ください。</para>
  
      <para>perl5 のモジュールがインストールされる場所は、構築プロセスで使われるperl の
        バージョンに応じて変わります。これを扱うために、pkgsrc は、
        インストールされた<filename>.packlist</filename>ファイル(ほとんどの perl5 モジュールが生成します)
        に列挙された各ファイルに対応する行を、<filename>PLIST</filename> に追加します。これは、packlist
        ファイルへのパスをスペースで区切ったリストを<varname>PERL5_PACKLIST</varname>として定義するこ
        とで行なわれるようになります。たとえば以下のように定義します。</para>
  
      <programlisting>PERL5_PACKLIST=   ${PERL5_SITEARCH}/auto/Pg/.packlist</programlisting>
  
      <para><varname>PERL5_SITELIB</varname>, <varname>PERL5_SITEARCH</varname>,
        <varname>PERL5_ARCHLIB</varname>の各変数は、perl5モジュールがイ
        ンストールされうる三つの場所を表すもので、packlistを持たないperl5パッケージ
        で使うことができます。この3変数の置換は、<filename>PLIST</filename>でもおこなわれます。</para>
      </sect2>


    <sect2 id="faq.info-files">
      <title>infoファイルをインストールするパッケージ</title>
    
      <para> パッケージによっては、infoファイルをインストールしたり、<quote>makeinfo</quote>または
        <quote>install-info</quote>コマンドを使ったりします。各 info ファイルは、 </para>
    
      <itemizedlist>
        <listitem>
          <para><filename>${PREFIX}/${INFO_DIR}</filename>
            ディレクトリーにインストールされるものとして扱われます。</para>
        </listitem>
        
        <listitem>
          <para>Info ディレクトリーファイル
            <filename>${PREFIX}/${INFO_DIR}/dir</filename> に登録されます。</para>
        </listitem>
        
        <listitem>
          <para>パッケージの Makefile で、
            <varname>INFO_FILES</varname> 変数に、
            ファイル名の形で列挙する必要があります。</para>
        </listitem>
      </itemizedlist>
    
      <para> <varname>INFO_DIR</varname> のデフォルトは <quote>info</quote> ですが、
        パッケージの Makefile で上書きすることができます。 info ファイルを
        Info ディレクトリーファイルに登録するために、<filename>INSTALL</filename> および
        <filename>DEINSTALL</filename> スクリプトが作られます。
        info ファイルの登録用の <quote>install-info</quote> コマンドは、
        システム附属のものが使われるか、
        または、必要があればそれ用のパッケージが自動的に追加されて使われます。 </para>
    
      <para> 構築時に <quote>makeinfo</quote> コマンドが必要なパッケージは、
        Makefile で <varname>USE_MAKEINFO</varname> 変数を定義する必要があります。
        あるバージョン以上の<quote>makeinfo</quote>コマンドが必要な場合は、
        パッケージの <filename>Makefile</filename> で
        <varname>TEXINFO_REQD</varname> 変数を必要な最低バージョンに設定します。
        デフォルトでは、 3.12 が最低限必要なバージョンとなります。
        <command>makeinfo</command> コマンドがシステムにないか、
        最低限必要なバージョンを満たさない場合は、<pkg>devel/gtexinfo</pkg>
        パッケージへの構築時の依存関係が自動的に追加されます。
        </para>
    
      <para> パッケージで提供されるソフトウェアの構築やインストールの過程では、
        <command>install-info</command> コマンドを使ってはいけません。
        info ファイルの登録は <filename>INSTALL</filename> スクリプトの仕事であって、
        適切な <command>makeinfo</command> コマンドを使う必要があるからです。 </para>
    
      <para> pkgsrc の基盤は、以上のことを実現するため、
        <varname>PATH</varname> のはじめのほうにあるディレクトリーに、
        <command>install-info</command> や <command>makeinfo</command>
        を上書きするスクリプトを作成します。 </para>
    
      <para> <command>install-info</command> を上書きするスクリプトは、メッセージを記録すること以外、
        何の効果もありません。<command>makeinfo</command> を上書きするスクリプトは、
        メッセージを記録し、<varname>USE_MAKEINFO</varname> や <varname>TEXINFO_REQD</varname>
        の値に従って、適切な <command>makeinfo</command> コマンドを実行するか、
        または異常終了します。 </para>
    </sect2>


    <sect2>
      <title>GConf2 のデータファイルをインストールするパッケージ</title>
    
      <para>
        パッケージが、 GConf2 が使用する <filename>.schemas</filename> または
        <filename>.entries</filename> ファイルをインストールする場合は、
        これらが確実にデータベースに登録されるようにするために、
        いくつか特別な手順を踏む必要があります。
        </para>
    
      <orderedlist>
      <listitem>
        <para> GConf2 の <filename>buildlink3.mk</filename> ファイルではなく
          <filename>../../devel/GConf2/schemas.mk</filename> をインクルードします。
          こうすると、インストールおよびアンインストール時に、 GConf2
          のデータベースを再構築し、また、GConf2 のデータファイルのインストール場所を
          標準的な configure 引数を使ってパッケージに伝えてくれます。
          また、パッケージがデータベースに直接アクセスすることが一切できなくなります。</para>
      </listitem>
      
      <listitem>
        <para> パッケージが
          <filename>.schemas</filename> ファイルを必ず
          <filename>${PREFIX}/share/gconf/schemas</filename> 以下にインストールするようにします。
          <filename>${PREFIX}/etc</filename> 以下にインストールするようになっている場合は、
          手作業でパッケージを修正する必要があります。 </para>
      </listitem>
      
      <listitem>
        <para> PLIST を確認し、etc/gconf ディレクトリー以下の項目をすべて削除します。
          これらは自動的に処理されるものだからです。詳細は
          <xref linkend="faq.conf"/>を参照してください。 </para>
      </listitem>
      
      <listitem>
        <para> <filename>Makefile</filename> で、
          <varname>GCONF2_SCHEMAS</varname> 変数を定義します。変数値には
          パッケージがインストールする <filename>.schemas</filename>
          ファイルをすべて列挙します。このファイル名にディレクトリーを含めてはいけません。 </para>
      </listitem>
      
      <listitem>
        <para> <filename>Makefile</filename> で、
          <varname>GCONF2_ENTRIES</varname> 変数を定義します。変数値には
          パッケージがインストールする <filename>.entries</filename>
          ファイルをすべて列挙します。
          このファイル名にディレクトリーを含めてはいけません。 </para> 
      </listitem>
      </orderedlist>
    </sect2>
    
    
    <sect2>
      <title>scrollkeeper のデータファイルをインストールするパッケージ</title>
    
      <para>
        パッケージが、 scrollkeeper が使用する <filename>.omf</filename>
        ファイルをインストールする場合は、これらが確実にデータベースに登録されるようにするために、
        いくつか特別な手順を踏む必要があります。
        </para>
    
      <orderedlist>
        <listitem>
          <para> scrollkeeper の <filename>buildlink3.mk</filename> ファイルではなく
            <filename>../../textproc/scrollkeeper/omf.mk</filename> をインクルードします。
            こうすると、インストールおよびアンインストール時に、 scrollkeeper
            のデータベースを再構築してくれます。
            また、パッケージがデータベースに直接アクセスすることが一切できなくなります。
            </para>
        </listitem>
        
        <listitem>
          <para> PLIST を確認し、<filename>libdata/scrollkeeper</filename>
            ディレクトリー以下の項目をすべて削除します。
            これらは自動的に処理されるものだからです。 </para>
        </listitem>
        
        <listitem>
          <para> PLIST から <filename>share/omf</filename> ディレクトリーを削除します。
            これは scrollkeeper が処理します。 </para>
        </listitem>       
      </orderedlist>
    </sect2>
    
    
    <sect2>
      <title>X11 のフォントをインストールするパッケージ</title>
    
      <para> パッケージがフォントファイルをインストールする場合は、
        インストール時とアンインストール時に、
        フォントのインストール先ディレクトリーにあるフォントデータベースを再構築する必要があります。
        この処理は <filename>mk/fonts.mk</filename> を使って自動的におこなうことができますが、
        このファイルを <filename>Makefile</filename> でインクルードする必要があります。 </para>
    
      <para> このファイルをインクルードすると、
        フォントのインストール先ディレクトリーを
        <varname>FONTS_<replaceable>type</replaceable>_DIRS</varname>
        変数に列挙することができます。変数名中の <replaceable>type</replaceable> は、
        <quote>TTF</quote>, <quote>TYPE1</quote>, <quote>X11</quote> のいずれかです。
        また、データベースファイル <filename>fonts.dir</filename>
        は PLIST に含めてはいけません。 </para>
    
      <para> なお、フォント用のディレクトリーを新たに作らないようにしてください。
        X サーバーがフォントを見つけるための設定をユーザーが手動でおこなう必要がないようにするため、
        新しいディレクトリーではなく標準的なディレクトリーを使うようにします。 </para>
    </sect2>
    
    
    <sect2>
      <title>GTK2 のモジュールをインストールするパッケージ</title>
    
      <para>パッケージが gtk2 の IM モジュールやローダーをインストールする場合は、
        これらが確実に GTK2 のデータベースに登録されるようにするために、
        いくつか特別な手順を踏む必要があります。 </para>
    
      <orderedlist>
      <listitem> <para> gtk2 の <filename>buildlink3.mk</filename> ファイルではなく
        <filename>../../x11/gtk2/modules.mk</filename> をインクルードします。
        こうすると、インストールおよびアンインストール時に、GTK2
            のデータベースを再構築してくれます。
        </para>
      </listitem>
      
      <listitem> <para>
        GTK2 の IM モジュールをインストールするパッケージでは、
            <varname>GTK2_IMMODULES=YES</varname> を設定します。 </para>
      </listitem>
      
      <listitem> <para>
        GTK2 のローダーをインストールするパッケージでは、
            <varname>GTK2_LOADERS=YES</varname> を設定します。 </para>
      </listitem>
      
      <listitem> <para>
        パッケージが gtk2 のデータベースディレクトリーを直接いじらないよう修正します。
        データベースは以下のとおりです。
    
        <itemizedlist>
          <listitem><para><filename>libdata/gtk-2.0/gdk-pixbuf.loaders</filename></para></listitem>
          <listitem><para><filename>libdata/gtk-2.0/gtk.immodules</filename></para></listitem>
        </itemizedlist>
        </para>
      </listitem>
      
      <listitem> <para>
        Check the PLIST を確認し、<filename>libdata/gtk-2.0</filename>
        ディレクトリー以下の項目をすべて削除します。
        これらは自動的に処理されるものだからです。 </para>
      </listitem>
      </orderedlist>
    </sect2>
    
    
    <sect2>
      <title>SGML または XML のデータをインストールするパッケージ</title>
    
      <para> パッケージが、システム全体で使われるカタログへ登録する必要のある
        SGML または XML のデータファイル (DTD, sub-catalog など) をインストールする場合は、
        いくつか特別な手順を踏む必要があります。 </para>
        </para>
    
      <orderedlist>
        <listitem>
          <para> パッケージの <filename>Makefile</filename> で
            <filename>../../textproc/xmlcatmgr/catalogs.mk</filename> をインクルードします。
            こうすると、インストールおよびアンインストール時に、
            データファイルをシステム全体で使われるカタログに登録してくれます。 </para>
        </listitem>
    
        <listitem>
          <para> <varname>SGML_CATALOGS</varname> を、このパッケージがインストールする
            SGML カタログをすべてをフルパス表記にしたものに設定します。 </para>
        </listitem>
    
        <listitem>
          <para> <varname>XML_CATALOGS</varname> を、このパッケージがインストールする
            XML カタログをすべてをフルパス表記にしたものに設定します。 </para>
        </listitem>
    
        <listitem>
          <para> <varname>SGML_ENTRIES</varname> を、SGML カタログに追加する
            個々のエントリーに設定します。各エントリーは
            3 個の文字列からなります。書き方の詳細は xmlcatmgr(1) 
            (特に、'add' アクション用の引数) を参照してください。
            なお、通常はこの変数を使うことはありません。 </para>
        </listitem>
    
        <listitem>
          <para> <varname>XML_ENTRIES</varname> を、XML カタログに追加する
            個々のエントリーに設定します。各エントリーは
            3 個の文字列からなります。書き方の詳細は xmlcatmgr(1) 
            (特に、'add' アクション用の引数) を参照してください。
            なお、通常はこの変数を使うことはありません。
            </para>
        </listitem>
      </orderedlist>
    </sect2>
    
    
    <sect2>
      <title>MIME データベースの拡張をインストールするパッケージ</title>
    
      <para> パッケージが、<filename>.xml</filename> ファイルを
        <filename>${PREFIX}/share/mime/packages</filename>
        以下にインストールすることで MIME データベースを拡張する場合は、
        データベースがこの新規ファイルについて確実に整合性を持つようにするために、
        いくつか特別な手順を踏む必要があります。
        </para>
    
      <orderedlist>
        <listitem>
          <para> <filename>../../databases/shared-mime-info/mimedb.mk</filename>
            をインクルードします (同じディレクトリーにある <filename>buildlink3.mk</filename>
            ファイルは、他の <filename>buildlink3.mk</filename>
            ファイルでインクルードするために予約されているので使いません)
            こうすると、インストールおよびアンインストール時に、MIME
            データベースを再構築してくれます。
            また、パッケージがデータベースに直接アクセスすることが一切できなくなります。</para>
        </listitem>
    
        <listitem>
          <para> PLIST を確認し、<filename>share/mime</filename>
            ディレクトリー以下の項目のうち、
            <filename>share/mime/packages</filename> 以下に置かれるファイル
            <emphasis>以外の</emphasis>ものをすべて削除します。
            このディレクトリーについては update-mime-database プログラムが自動的に処理しますが、
            除外したファイルはパッケージ依存のファイルなので、
            ファイルをインストールしたパッケージが自分で削除する必要があります。 </para>
        </listitem>
    
        <listitem>
          <para> PLIST から <filename>share/mime/*</filename> ディレクトリーをすべて削除します。
            これらは shared-mime-info プログラムが処理します。 </para>
        </listitem>       
      </orderedlist>
    </sect2>

    
    <sect2>
      <title>intltool を使うパッケージ</title>
    
      <para>   パッケージが構築時に intltool を使う場合は、
        <filename>../../textproc/intltool/buildlink3.mk</filename> ファイルをインクルードします。
        こうすると、パッケージの配布ファイルに附属する intltool ではなく、
        pkgsrc の intltool を強制的に使うようになります。
        </para>
    
      <para> この仕組みは、intltool 構築時の依存関係を追跡して、
        利用可能な最新版を使います。この方法を使うことで、
        リリース後にできたバグ修正も適用することができます。
        </para>
    </sect2>
    
  </sect1>

    
  <sect1>
    <title>作者へのフィードバック</title>
    
    <para> もしパッケージの不具合を発見し動作するように修正した場合、NetBSD上で動作さ
      せるために特別な手順が必要だった場合、あるいはさまざまなソフトウェアの拡張
      をおこなった場合、これらの修正をプログラムのオリジナルの作者へ報告してくだ
      さい。このようなサポートによって、プログラムの次のリリースにそれらの修正を
      反映することができます。そして、NetBSDパッケージシステムを使用していない人々
      も、あなたの努力のおかげで幸せになれます。 </para>

    <para> フリーソフトウェアの理念をサポートして下さい。 </para>
  </sect1>
</chapter>
