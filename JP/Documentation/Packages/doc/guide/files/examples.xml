<!-- $NetBSD: examples.xml,v 1.9 2005/11/20 17:14:26 rillig Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: examples.xml,v 1.9 2005/11/20 17:14:26 rillig Exp   -->

<appendix id="examples">
  <title>パッケージの簡単な例: bison</title>

  <para>私たちは、パッケージコレクションにないソフトウェアをさがし、GNU bisonを選びまし
    た。バークレーの<command>yacc</command>がすでにソースツリーに存在するので、
    <command>bison</command>を使いたい人は
    いないでしょう。しかし、練習という意味では役にたちます。</para>

  <sect1 id="example-files">
    <title>ファイル</title>

    <sect2 id="example-Makefile">
      <title>Makefile</title>

<programlisting>
    # &#36;NetBSD&#36;
    #

    DISTNAME=       bison-1.25
    CATEGORIES=     devel
    MASTER_SITES=   ${MASTER_SITE_GNU}

    MAINTAINER=     thorpej@NetBSD.org
    HOMEPAGE=       http://www.gnu.org/software/bison/bison.html
    COMMENT=        GNU yacc clone

    GNU_CONFIGURE=  yes
    INFO_FILES=     bison.info

    .include "../../mk/bsd.pkg.mk"
</programlisting>
    </sect2>

    <sect2 id="example-descr">
      <title>DESCR</title>

<programlisting>
    GNU version of yacc.  Can make re-entrant parsers, and numerous other
    improvements.  Why you would want this when Berkeley &man.yacc.1; is part
    of the &os; source tree is beyond me.
</programlisting>
    </sect2>

    <sect2 id="example-plist">
      <title>PLIST</title>

<programlisting>
    @comment &#36;NetBSD&#36;
    bin/bison
    man/man1/bison.1.gz
    share/bison.simple
    share/bison.hairy
</programlisting>
    </sect2>

    <sect2 id="checking-package-with-pkglint">
      <title><command>pkglint</command> でパッケージをチェックする</title>

      <para>NetBSDパッケージシステムは、
        <filename role="pkg">pkgtools/pkglint</filename>
	を含んでいます。このツールはこれらのファイルの内
	容をチェックするのを助けてくれます。一度インストールしてしまえば、このツー
	ルは非常に簡単に使うことができます。検査したいパッケージのディレクトリーに
	移動し、<command>pkglint</command>を実行するだけです。</para>

      <screen>&uprompt; <userinput>pkglint</userinput>
looks fine.</screen>

      <para>指定されたコマンド行の引数(pkglint(1)を見てください)によっては、
	より多くのチェックがおこなわれます。例えば <command>pkglint -Call
	-Wall</command> は、非常に徹底したチェックをおこないます。</para>
    </sect2>
  </sect1>

  <sect1 id="steps-for-b-i-p">
    <title>構築、インストール、パッケージングの手順</title>

    <para>パッケージのためのディレクトリーと、
      いくつかの追加のディレクトリーを作成します。</para>

    <screen>&rprompt; <userinput>cd /usr/pkgsrc/lang</userinput>
&rprompt; <userinput>mkdir bison</userinput>
&rprompt; <userinput>cd bison</userinput>
&rprompt; <userinput>mkdir patches</userinput></screen>

    <para><filename>Makefile</filename>、<filename>DESCR</filename>および<filename>PLIST</filename>を作り
      (<xref linkend="components"/>参照)、distfile を取得しま
      す。</para>

    <screen>&rprompt; <userinput>make fetch</userinput>
>> bison-1.25.tar.gz doesn't seem to exist on this system.
>> Attempting to fetch from ftp://prep.ai.mit.edu/pub/gnu//.
Requesting ftp://prep.ai.mit.edu/pub/gnu//bison-1.25.tar.gz (via ftp://orpheus.amdahl.com:80/)
ftp: Error retrieving file: 500 Internal error

>> Attempting to fetch from ftp://wuarchive.wustl.edu/systems/gnu//.
Requesting ftp://wuarchive.wustl.edu/systems/gnu//bison-1.25.tar.gz (via ftp://orpheus.amdahl.com:80/)
ftp: Error retrieving file: 500 Internal error

>> Attempting to fetch from ftp://ftp.freebsd.org/pub/FreeBSD/distfiles//.
Requesting ftp://ftp.freebsd.org/pub/FreeBSD/distfiles//bison-1.25.tar.gz (via ftp://orpheus.amdahl.com:80/)
Successfully retrieved file.</screen>

    <para>distfileのチェックサムを
      <filename>distinfo</filename>へ作成します。</para>

    <screen>&rprompt; <userinput>make makesum</userinput></screen>

    <para>コンパイルします。</para>

    <screen>&rprompt; <userinput>make</userinput>
>> Checksum OK for bison-1.25.tar.gz.
===>  Extracting for bison-1.25
===>  Patching for bison-1.25
===>   Ignoring empty patch directory
===>  Configuring for bison-1.25
creating cache ./config.cache
checking for gcc... cc
checking whether we are using GNU C... yes
checking for a BSD compatible install... /usr/bin/install -c -o bin -g bin
checking how to run the C preprocessor... cc -E
checking for minix/config.h... no
checking for POSIXized ISC... no
checking whether cross-compiling... no
checking for ANSI C header files... yes
checking for string.h... yes
checking for stdlib.h... yes
checking for memory.h... yes
checking for working const... yes
checking for working alloca.h... no
checking for alloca... yes
checking for strerror... yes
updating cache ./config.cache
creating ./config.status
creating Makefile
===>  Building for bison-1.25
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g LR0.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g allocate.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g closure.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g conflicts.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g derives.c
cc -c -DXPFILE=\"/usr/pkg/share/bison.simple\"  -DXPFILE1=\"/usr/pkg/share/bison.hairy\" -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1  -g  ./files.c 
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g getargs.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g gram.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g lalr.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g lex.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g main.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g nullable.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g output.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g print.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g reader.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g reduce.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g symtab.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g warshall.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g version.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g getopt.c
cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g getopt1.c
cc  -g -o bison LR0.o allocate.o closure.o conflicts.o derives.o files.o         getargs.o gram.o lalr.o lex.o                                   main.o nullable.o output.o print.o reader.o reduce.o symtab.o   warshall.o version.o getopt.o getopt1.o
./files.c:240: warning: mktemp() possibly used unsafely, consider using mkstemp()
rm -f bison.s1
sed -e "/^#line/ s|bison|/usr/pkg/share/bison|" &lt; ./bison.simple &gt; bison.s1</screen>

    <para>すべてOKのようなので、ファイルをインストールします。</para>

    <screen>&rprompt; <userinput>make install</userinput>
>> Checksum OK for bison-1.25.tar.gz.
===>  Installing for bison-1.25
sh ./mkinstalldirs /usr/pkg/bin /usr/pkg/share  /usr/pkg/info /usr/pkg/man/man1
rm -f /usr/pkg/bin/bison
cd /usr/pkg/share; rm -f bison.simple bison.hairy
rm -f /usr/pkg/man/man1/bison.1 /usr/pkg/info/bison.info*
install -c  -o bin -g bin -m 555 bison /usr/pkg/bin/bison
/usr/bin/install -c -o bin -g bin -m 644 bison.s1 /usr/pkg/share/bison.simple
/usr/bin/install -c -o bin -g bin -m 644 ./bison.hairy /usr/pkg/share/bison.hairy
cd .; for f in bison.info*;  do /usr/bin/install -c -o bin -g bin -m 644 $f /usr/pkg/info/$f; done
/usr/bin/install -c -o bin -g bin -m 644 ./bison.1 /usr/pkg/man/man1/bison.1
===>  Registering installation for bison-1.25</screen>

    <para>これでbisonを使用することができます。そして、<command>pkg_delete bison</command>を実
      行することでbisonを削除することもできます。もし、バイナリーパッケージが欲
      しければ、以下のようにしてください。</para>

    <screen>&rprompt; <userinput>make package</userinput>
>> Checksum OK for bison-1.25.tar.gz.
===>  Building package for bison-1.25
Creating package bison-1.25.tgz
Registering depends:.
Creating gzip'd tar ball in '/u/pkgsrc/lang/bison/bison-1.25.tgz'</screen>

    <para>もし、ソースやオブジェクトファイルが必要ないのであれば、
      掃除してください。</para>

    <screen>&rprompt; <userinput>make clean</userinput>
===>  Cleaning for bison-1.25</screen>
  </sect1>
</appendix>
