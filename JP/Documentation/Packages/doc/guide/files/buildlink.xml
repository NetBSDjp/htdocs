<!-- $NetBSD: buildlink.xml,v 1.23 2007/01/17 03:11:18 rillig Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: buildlink.xml,v 1.23 2007/01/17 03:11:18 rillig Exp   -->

<chapter id="buildlink">
  <title>buildlink 方法論</title>

  <para>buildlink は pkgsrc における枠組のひとつで、パッケージのコンフィギュレーション (configure)
  および構築 (build) の過程で、どのヘッダーやライブラリーが使われるかを制御するものです。
  これは以下の二つの手順によって実現されます。</para>

  <orderedlist>
    <listitem>
      <para><varname>BUILDLINK_DIR</varname> (標準では、
      <varname>WRKDIR</varname> のサブディレクトリー) 内に、
      依存するヘッダーやライブラリーを指すシンボリックリンクを作ります。</para>
    </listitem>

    <listitem>
      <para>通常のコンパイラーツールを置き換えるラッパースクリプトを生成します。
      これは、<option>-I${LOCALBASE}/include</option> および
      <option>-L${LOCALBASE}/lib</option> を、
      <varname>BUILDLINK_DIR</varname> への参照に変換します。
      また、オペレーティングシステムによっては、このラッパースクリプトは、
      ネイティブのコンパイラーが GCC に見えるようにし、
      GCC を要求するパッケージを修正することなく、
      ネイティブのコンパイラーで構築できるようにします。</para>
    </listitem>
  </orderedlist>

  <para>こうすることで、パッケージ構築環境を正規化して、
  他にどのようなソフトウェアがインストールされているかにかかわらず、
  パッケージを一貫して構築できるようにします。
  なお、通常のシステムヘッダーおよびライブラリーのパス、
  たとえば <filename>/usr/include</filename>,
  <filename>/usr/lib</filename> などは、すでに探索されていることに注意してください
  -- buildlink3 は、パッケージの構築を、
  システム非標準のソフトウェアから独立させるために設計されたものなのです。</para>

  <sect1 id="converting-to-buildlink3">
    <title>パッケージを変換して buildlink3 を使うようにする</title>

    <para>パッケージが buildlink3 の枠組を使うようにする変換の過程
    (<quote>bl3ifying</quote> - buildlink3 化) は、かなり単純です。
    以下のことに注意してください。</para>

    <orderedlist>
      <listitem>
        <para>構築の際には、常に、
        toolchain 本体ではなくラッパースクリプトが呼ばれるようにしてください。
        パッケージによっては巧妙なものがあるので、
        ラッパーが呼ばれたかどうかを確実に調べる方法は、
        <filename>${WRKDIR}/.work.log</filename> を確認することだけです。</para>
      </listitem>

      <listitem>
	<para>たとえば Java VM やスタンドアローンのシェルでは、
	パッケージの Makefile で <varname>PREFIX</varname>
	を上書きしないでください。<filename>${BUILDLINK_DIR}</filename>
	からシンボリックリンクするためのコードは、
	<quote>pkg_info -qp <replaceable>pkgname</replaceable></quote>
	からの相対位置にあるファイルを探すからです。
	</para>
      </listitem>

      <listitem>
	<para>パッケージの依存性として追加されるのは、パッケージの Makefile に列挙した
	<filename>buildlink3.mk</filename> ファイル<emphasis>だけ</emphasis>
	であることを忘れないでください。
	</para>
      </listitem>
    </orderedlist>

    <para>あるパッケージのライブラリーやヘッダーに対する依存性が必要な場合は、</para>

    <programlisting>
      DEPENDS+=   foo>=1.1.0:../../category/foo
    </programlisting>

    <para>を、以下のものに置き換えます。</para>

    <programlisting>
      .include "../../category/foo/buildlink3.mk"
    </programlisting>

    <para>通常は、buildlink3.mk ファイルで必要な依存性を定義します。
    buildlink3.mk ファイルを使う際に、より新しいバージョンへの依存性が必要な場合は、
    そのことを Makefile で定義することができます。たとえば以下のようにします。</para>

    <programlisting>
      BUILDLINK_API_DEPENDS.foo+=   foo>=1.1.0
      .include "../../category/foo/buildlink3.mk"
    </programlisting>

    <para><filename>pkgsrc/mk</filename> 以下には、
    特別なパッケージを扱うための
    <filename>buildlink3.mk</filename> ファイルがいくつかあります。</para>

    <itemizedlist>
      <listitem>
	<para><filename>bdb.buildlink3.mk</filename> は、
	<varname>BDB_ACCEPTED</varname> および
	<varname>BDB_DEFAULT</varname> の値にもとづき、
	ネイティブまたは pkgsrc の Berkeley DB の実装のどちらかを選択します。</para>
      </listitem>

      <listitem>
	<para><filename>curses.buildlink3.mk</filename>: システムに
	Curses も NCurses も附属しない場合に、<filename
	role="pkg">devel/ncurses</filename>
	パッケージをインストールしてくれます。</para>
      </listitem>

      <listitem>
	<para><filename>krb5.buildlink3.mk</filename> は、
	<varname>KRB5_ACCEPTED</varname> の値を使って、
	Kerberos 5 の実装を必要とするパッケージを
	Heimdal または MIT-krb5 のどちらに依存させるかを選択します。</para>
      </listitem>

      <listitem>
	<para><filename>motif.buildlink3.mk</filename> は、
	システム附属の Motif がインストールされているかを確認し、
	ない場合は、<filename role="pkg">x11/lesstif</filename> または <filename
	role="pkg">x11/openmotif</filename> への依存性を追加します。
	利用者は、<varname>MOTIF_TYPE</varname> を <quote>dt</quote>,
	<quote>lesstif</quote> または <quote>openmotif</quote> に設定して、
	どの版の Motif を使うかを選択することができます。</para>
      </listitem>

      <listitem>
	<para><filename>oss.buildlink3.mk</filename> は、
	Open Sound System (OSS) API
	を使うパッケージが使うことがある変数をいくつか定義します。</para>
      </listitem>

      <listitem>
	<para><filename>pgsql.buildlink3.mk</filename> は、
	Postgres 8.0, 8.1 または 8.2 のうち、インストールされているものを受け入れます。
	さらなる情報は、このファイルの内容をご覧ください。</para>
      </listitem>

      <listitem>
	<para><filename>pthread.buildlink3.mk</filename> は、
	<varname>PTHREAD_OPTS</varname> の値を使うとともに、ネイティブの pthread があるか確認し、
	ない場合は、必要に応じて <filename
	role="pkg">devel/pth</filename> への依存性を追加します。</para>
      </listitem>

      <listitem>
	<para><filename>xaw.buildlink3.mk</filename> は、
	<varname>XAW_TYPE</varname> の値を使って、具体的にどの
	Athena widget ライブラリーを使うかを選択します。</para>
      </listitem>
    </itemizedlist>

    <para>それぞれの <filename>buildlink3.mk</filename>
    ファイルのコメントに、
    適切な使い方に関するより詳しい説明があります。</para>
  </sect1>

  <sect1 id="creating-buildlink3.mk">
    <title><filename>buildlink3.mk</filename> ファイルを書く</title>

    <para>パッケージの <filename>buildlink3.mk</filename> ファイルは、
    そのパッケージに附属するヘッダーファイルやライブラリーをコンパイルしたりリンクしたりする必要があることを示すために、
    Makefile からインクルードされます。
    <filename>buildlink3.mk</filename> ファイルは、
    適切な種類の依存関係を追加したり、
    さらに必要となるヘッダーやライブラリーを使うために別の
    <filename>buildlink3.mk</filename> をインクルードしたりするために必要な情報を、
    いつでも提供できるように作ります。</para>

    <para>編集するための元となる <filename>buildlink3.mk</filename>
    ファイルを作るには、Rene Hexel の  <filename
    role="pkg">pkgtools/createbuildlink</filename>
    パッケージを使うことを強くおすすめします。ほとんどのパッケージに対しては、
    以下のコマンドを使うと、<filename>buildlink3.mk</filename>
    ファイルのよい出発点となるものを作ってくれます。</para>

    <screen>
&cprompt; <userinput>cd pkgsrc/<replaceable>category</replaceable>/<replaceable>pkgdir</replaceable>
&cprompt; createbuildlink &gt;buildlink3.mk</userinput>
    </screen>

    <sect2 id="anatomy-of-bl3">
      <title>buildlink3.mk ファイルの分析</title>

      <para>以下に掲げるのは、
      <filename>pkgsrc/graphics/tiff</filename> における
      <filename>buildlink3.mk</filename> の実例です。</para>

      <programlisting>
	# &#36;NetBSD: buildlink3.mk,v 1.7 2004/03/18 09:12:12 jlam Exp &#36;

	BUILDLINK_DEPTH:=       ${BUILDLINK_DEPTH}+
	TIFF_BUILDLINK3_MK:=    ${TIFF_BUILDLINK3_MK}+

	.if !empty(BUILDLINK_DEPTH:M+)
	BUILDLINK_DEPENDS+=     tiff
	.endif

	BUILDLINK_PACKAGES:=    ${BUILDLINK_PACKAGES:Ntiff}
	BUILDLINK_PACKAGES+=    tiff

	.if !empty(TIFF_BUILDLINK3_MK:M+)
	BUILDLINK_API_DEPENDS.tiff+=        tiff>=3.6.1
	BUILDLINK_PKGSRCDIR.tiff?=      ../../graphics/tiff
	.endif  # TIFF_BUILDLINK3_MK

	.include "../../devel/zlib/buildlink3.mk"
	.include "../../graphics/jpeg/buildlink3.mk"

	BUILDLINK_DEPTH:=       ${BUILDLINK_DEPTH:S/+$//}
      </programlisting>

      <para>ヘッダーとフッターで、
      <varname>BUILDLINK_DEPTH</varname> の値を操作しています。
      この変数は、<filename>buildlink3.mk</filename>
      を何段階インクルードしているかを追跡するために、
      すべての <filename>buildlink3.mk</filename> ファイルの間で、
      共通に使われます。</para>

      <para>最初の節では、
      <replaceable>pkg</replaceable>
      への依存性が追加されるかどうかを制御しています。
      <varname>BUILDLINK_DEPENDS</varname> は、
      buildlink3 によって依存性が追加されるパッケージの大域的なリストです。</para>

      <para>二つ目の節では、<replaceable>pkg</replaceable> の
      <filename>buildlink3.mk</filename> ファイルがどこかでインクルードされていることを
      pkgsrc に教えています。
      <varname>BUILDLINK_PACKAGES</varname> は、<filename>buildlink3.mk</filename>
      ファイルがインクルードされているパッケージの大域的なリストです。
      <filename>buildlink3.mk</filename> ファイルでは、
      この追加を<emphasis>必ず</emphasis>おこなう必要があります。</para>

      <para>三つ目の節では、多重のインクルードを防いだうえで、
      <replaceable>pkg</replaceable> への依存性をどのように追加するかを制御しています。
      いくつもの重要な変数がこの節で設定されます。</para>

      <itemizedlist>
	<listitem>
	  <para><varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
	  は、インストールされるパッケージに対して、実際に記録される依存性です。
	  この変数の既存のリストを残したまま追加するために、
	  かならず <command>+=</command> を使って設定します。
	  この変数の設定値は、
	  パッケージの API が現行のものになった以降の最初 (最古) のバージョンにします。
	  </para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_PKGSRCDIR.<replaceable>pkg</replaceable></varname>
	  は、pkgsrc における
	  <replaceable>pkg</replaceable> のディレクトリーです。</para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_DEPMETHOD.<replaceable>pkg</replaceable></varname>
	  (上の例には出てきません) は、
	  <replaceable>pkg</replaceable> への依存性として
	  <varname>BUILD_DEPENDS</varname> と
	  <varname>DEPENDS</varname> のどちらを使うかを制御します。
	  <varname>BUILDLINK_DEPMETHOD.<replaceable>pkg</replaceable></varname>
	  を <quote>build</quote> にすれば、
	  構築時の依存性となります。この変数を設定しなかった場合は、
	  完全な依存性となります。</para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_INCDIRS.<replaceable>pkg</replaceable></varname>
	    および
	    <varname>BUILDLINK_LIBDIRS.<replaceable>pkg</replaceable></varname>
	    (上の例には出てきません) は、ヘッダーおよびライブラリーの検索パスに追加するための、
	    <filename>${BUILDLINK_PREFIX.<replaceable>pkg</replaceable>}</filename>
	    のサブディレクトリーです。設定しなかった場合は、それぞれ
	    <quote>include</quote> および <quote>lib</quote>
	  となります。</para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_CPPFLAGS.<replaceable>pkg</replaceable></varname>
	    (上の例には出てきません) は、<varname>CPPFLAGS</varname>
	    に追加するためのプリプロセッサー用のフラグで、このフラグは
	    configure および build の段階に渡されます。<quote>-I</quote>
	    オプションは使わずに、上述の
	    <varname>BUILDLINK_INCDIRS.<replaceable>pkg</replaceable></varname>
	  を使って処理するようにしてください。</para>
	</listitem>
      </itemizedlist>

      <para>以下の各変数はすべて、二つ目の (多重のインクルードを防いでいる) 節において、
      任意に定義されるものであり、どのパッケージのファイルを
      <filename>${BUILDLINK_DIR}</filename> からシンボリックリンクするか、および、
      シンボリックリンクによってファイル名をどのように変換するか、
      を制御します。</para>

      <itemizedlist>
	<listitem>
	  <para><varname>BUILDLINK_FILES.<replaceable>pkg</replaceable></varname>
	    (上の例には出てきません) は、
	    <filename>${BUILDLINK_DIR}</filename>
	    からシンボリックリンクされるリンク先の、
	    <filename>${BUILDLINK_PREFIX.<replaceable>pkg</replaceable>}</filename>
	    からの相対位置のシェルのグロブパターンです。
	  たとえば <filename>include/*.h</filename> のようになります。</para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_FILES_CMD.<replaceable>pkg</replaceable></varname>
	    (上の例には出てきません) は、
	    <filename>${BUILDLINK_PREFIX.<replaceable>pkg</replaceable>}</filename>.
	    からの相対位置でのファイルのリストを標準出力に出力する、シェルのパイプラインです。
	    これにより出力されるファイルは、
	    <filename>${BUILDLINK_DIR}</filename> からシンボリックリンクされます。指定しなかった場合、
	    <replaceable>pkg</replaceable> の
	    <filename>+CONTENTS</filename> を
	    <varname>${BUILDLINK_CONTENTS_FILTER.<replaceable>pkg</replaceable>}</varname>
	    でフィルターした結果が出力されるようになります。</para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_CONTENTS_FILTER.<replaceable>pkg</replaceable></varname>
	    (上の例には出てきません) は、<filename>+CONTENTS</filename>
	    を入力にとり、
	    <filename>${BUILDLINK_PREFIX.<replaceable>pkg</replaceable>}</filename>
	    からの相対位置でのファイルのリストを標準出力に出力するフィルターコマンドです。
	    指定しなかった場合、overwrite パッケージでは、
	    <varname>BUILDLINK_CONTENTS_FILTER.<replaceable>pkg</replaceable></varname>
	    はパッケージの <filename>+CONTENTS</filename> から <filename>include</filename>
	    および <filename>lib</filename> ディレクトリーの内容を出力し、
	    pkgviews パッケージでは、<filename>lib</filename> ディレクトリーにある
	    libtool アーカイブをすべて出力します。</para>
	</listitem>

	<listitem>
	  <para><varname>BUILDLINK_FNAME_TRANSFORM.<replaceable>pkg</replaceable></varname>
	    (上の例には出てきません) は、元ファイル名から宛先ファイル名への変換用の
	    sed の引数のリストです。たとえば <command>-e
	    "s|/curses.h|/ncurses.h|g"</command> のようになります。</para>
	</listitem>
      </itemizedlist>

      <para>最後の節では、
      <replaceable>pkg</replaceable> のライブラリー依存性として必要な
      <filename>buildlink3.mk</filename> をすべてインクルードしています。
      ここで <filename>buildlink3.mk</filename> ファイルをインクルードすると、
      <replaceable>pkg</replaceable> の
      <filename>buildlink3.mk</filename> ファイルがインクルードされる場合はいつも、
      これらへの依存性のためのヘッダーやライブラリーも、
      <filename>${BUILDLINK_DIR}</filename>
      からシンボリックリンクされることになります。</para>
    </sect2>

    <sect2 id="updating-buildlink-depends">
      <title><filename>buildlink3.mk</filename> ファイルの <varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname> を更新する</title>

      <para>パッケージを更新した際に
	<varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
	に列挙されている依存性のバージョンを上げる必要があるのは、
      その更新で API やヘッダーファイルへのインターフェースが変わった場合です。</para>

      <para>このような場合は、
      <varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
      を調節して、最低限、新しいパッケージのバージョンを要するようにします。
      場合によっては、新しいバージョンに依存するパッケージの
      <varname>PKGREVISION</varname> を上げる必要があることがあります。
      また、依存しているパッケージに <filename>buildlink3.mk</filename>
      ファイルがある場合は、
      <varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
      も調節します。これは、pkgsrc が適切なパッケージの依存性を求めるようにして、
      ソースからの構築時に古いパッケージに依存したりしないようにするために、
      必要なことです。</para>

      <para><varname>BUILDLINK_ABI_DEPENDS.<replaceable>pkg</replaceable></varname>
	を上げるのは、バイナリーインターフェースや、
	インストールされている共有ライブラリーのいずれかの soname
	(ライブラリーのバージョンのメジャー番号) が変わった場合です。
	これは、これらを使うバイナリーパッケージが、
	適切なパッケージの依存性を求めるようにして、
	必要な共有ライブラリーをもたない古いパッケージに依存したりしないようにするために、
      必要なことです。</para>

      <para><varname>BUILDLINK_ABI_DEPENDS</varname> および
	<varname>ABI_DEPENDS</varname> の定義を含めた、
	他のパッケージへの依存性について、さらなる情報は、
      <xref linkend="dependencies"/>をご覧ください。</para>

      <para>なお、必要もないのにパッケージを削除したり再構築したりするようなことのないよう、
      <varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
      や
      <varname>BUILDLINK_ABI_DEPENDS.<replaceable>pkg</replaceable></varname>
      の調節は、事前に熟考するようにしてください。
      多くの場合、新しいバージョンのパッケージは、
      従前の依存性のままでも問題なく動作します。</para>

      <para>また、
	<varname>BUILDLINK_ABI_DEPENDS.<replaceable>pkg</replaceable></varname>
	は、
	<varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
      と同じ値となる場合には設定する必要はありません。	</para>
    </sect2>
  </sect1>

  <sect1 id="writing-builtin.mk">
    <title><filename>builtin.mk</filename> ファイルを書く</title>

    <para>pkgsrc のパッケージのなかには、
      ベースシステムにも存在するようなヘッダーやライブラリーをインストールするものがあります。
      そのようなパッケージでは、
      <filename>buildlink3.mk</filename> ファイルとは別に、
      <filename>builtin.mk</filename> ファイルも含めておきます。
      このファイルでは、ベースシステム附属のソフトウェアと
    pkgsrc のソフトウェアのどちらを使うのが適切かを判断するために必要な確認をおこないます。</para>

    <para><replaceable>pkg</replaceable> 用の
    builtin.mk ファイルで必要なのは、以下のことだけです。</para>

    <orderedlist>
      <listitem>
	<para>インクルードされた後に
	<varname>USE_BUILTIN.<replaceable>pkg</replaceable></varname>
	を <quote>yes</quote> または <quote>no</quote>
	のどちらかに設定すること。</para>
      </listitem>

      <listitem>
	<para><filename>builtin.mk</filename> ファイルがインクルードされる前から定義されている
	<varname>USE_BUILTIN.<replaceable>pkg</replaceable></varname>
	を、一切上書き<emphasis>しない</emphasis>こと。</para>
      </listitem>

      <listitem>
	<para>複数のインクルードができるように書くこと。
	これは<emphasis>非常に</emphasis>重要なことであり、
	<filename>Makefile</filename> のコーディングに対する配慮となります。</para>
      </listitem>
    </orderedlist>

    <sect2 id="anatomy-of-builtin.mk">
      <title><filename>builtin.mk</filename> ファイルの分析</title>

      <para>以下に掲げるのは、builtin.mk
      ファイルの推奨テンプレートです。</para>

      <programlisting>
	.if !defined(IS_BUILTIN.foo)
	#
	# IS_BUILTIN.foo is set to "yes" or "no" depending on whether "foo"
	# genuinely exists in the system or not.
	#
	IS_BUILTIN.foo?=        no

	# BUILTIN_PKG.foo should be set here if "foo" is built-in and its package
	# version can be determined.
	#
	.  if !empty(IS_BUILTIN.foo:M[yY][eE][sS])
	BUILTIN_PKG.foo?=       foo-1.0
	.  endif
	.endif  # IS_BUILTIN.foo

	.if !defined(USE_BUILTIN.foo)
	USE_BUILTIN.foo?=       ${IS_BUILTIN.foo}
	.  if defined(BUILTIN_PKG.foo)
	.    for _depend_ in ${BUILDLINK_API_DEPENDS.foo}
	.      if !empty(USE_BUILTIN.foo:M[yY][eE][sS])
	USE_BUILTIN.foo!=                                                       \
	if ${PKG_ADMIN} pmatch '${_depend_}' ${BUILTIN_PKG.foo}; then     \
	${ECHO} "yes";                                            \
	else                                                              \
	${ECHO} "no";                                             \
	fi
	.      endif
	.    endfor
	.  endif
	.endif  # USE_BUILTIN.foo

	CHECK_BUILTIN.foo?=     no
	.if !empty(CHECK_BUILTIN.foo:M[nN][oO])
	#
	# Here we place code that depends on whether USE_BUILTIN.foo is set to
	# "yes" or "no".
	#
	.endif  # CHECK_BUILTIN.foo
      </programlisting>

      <para>最初の節では、<replaceable>pkg</replaceable>
      がベースシステムに実際に存在するかどうかに応じて、
      <varname>IS_BUILTIN.<replaceable>pkg</replaceable></varname>
      を設定しています。これは、ベースシステムに <replaceable>pkg</replaceable>
      相当の機能のソフトウェアが存在するかどうかではありません。
      この変数を <quote>yes</quote> にするのは、
      このパッケージそのものがベースシステムの一部として附属する場合だけです。
      この変数は、<filename>builtin.mk</filename>
      ファイルの内部でのみ使われます。</para>

      <para>二つ目の節では、<replaceable>pkg</replaceable>
      がベースシステムに存在する場合 (つまり
      <varname>IS_BUILTIN.<replaceable>pkg</replaceable></varname>
      が <quote>yes</quote> の場合)、
      <varname>BUILTIN_PKG.<replaceable>pkg</replaceable></varname>
      をそのバージョンに設定しています。この変数は、<filename>builtin.mk</filename>
      ファイルの内部でのみ使われます。</para>

      <para>三つ目の節では、
      <varname>USE_BUILTIN.<replaceable>pkg</replaceable></varname>
      を設定しており、これはすべての <filename>builtin.mk</filename>
      ファイルで<emphasis>必須です</emphasis>。
      この節のコードは、ベースシステム附属のソフトウェアが、
      <varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
      で列挙されている依存性を満たすのに十分かどうかを判別する必要があります。
      この判別は、たいていは、
      <varname>BUILTIN_PKG.<replaceable>pkg</replaceable></varname>
      を、
      <varname>BUILDLINK_API_DEPENDS.<replaceable>pkg</replaceable></varname>
      の各依存性と比較することでおこなわれます。

      <varname>USE_BUILTIN.<replaceable>pkg</replaceable></varname>
      は、<filename>builtin.mk</filename> ファイルの終わりまでに、
      適切な値に設定する<emphasis>必要があります</emphasis>。なお、たとえ
      <varname>IS_BUILTIN.<replaceable>pkg</replaceable></varname>
      が <quote>no</quote> であっても、
      <varname>USE_BUILTIN.<replaceable>pkg</replaceable></varname>
      は <quote>yes</quote> にすることができます。なぜなら、
      ベースシステム附属のソフトウェアが依存パッケージに十分似ており、
      代替可能であるという判断もできるからです。</para>

      <para>最後の節は
      <varname>CHECK_BUILTIN.<replaceable>pkg</replaceable></varname>
      に守られており、前の節で設定された
      <varname>USE_BUILTIN.<replaceable>pkg</replaceable></varname>
      の値を使うコードをインクルードします。たいていの場合、ここでインクルードするのは、
      たとえば依存性への制約の追加や、<filename>${BUILDLINK_DIR}</filename>
      からシンボリックリンクされるファイルのリストの
      (<varname>BUILDLINK_FILES.<replaceable>pkg</replaceable></varname>
      を使った) 追加などです。</para>
    </sect2>

    <sect2 id="native-or-pkgsrc-preference">
      <title>ネイティブおよび pkgsrc のソフトウェアの選択に関する、大域的な設定</title>

      <para>パッケージの構築時に、
	依存性を満たすソフトウェアとして組み込み (ネイティブ)
	のものを使うか pkgsrc のものを使うかを、
	大域的な設定に応じて切替えることができます。
	この制御は、<varname>PREFER_PKGSRC</varname> および
	<varname>PREFER_NATIVE</varname> を設定することでおこないます。
	この両変数は、<quote>yes</quote>, <quote>no</quote>
	またはパッケージのリストを値として持ちます。
	<varname>PREFER_PKGSRC</varname> は pkgsrc 版のソフトウェアを使うことを、
	<varname>PREFER_NATIVE</varname> で組み込み版を使うことを、
	それぞれ指示します。この設定は、
	対象パッケージではどちらを使うのがもっとも適当かに応じて、
	<varname>PREFER_PKGSRC</varname> か
	<varname>PREFER_NATIVE</varname> のいずれかで指定します。
	あるパッケージがどちらにも設定されていない場合、
	または両方で設定されている場合は、
	<varname>PREFER_PKGSRC</varname> が
	<varname>PREFER_NATIVE</varname> より優先します。たとえば、
	NetBSD システムの最も基本的な要素を除き、
	すべて pkgsrc 版のソフトウェアを使うこととする場合、
      以下のように設定することができます。</para>

      <programlisting>
	PREFER_PKGSRC=  yes
	PREFER_NATIVE=  getopt skey tcp_wrappers
      </programlisting>

      <para>あるパッケージを <varname>PREFER_NATIVE</varname>
      のリストに加えるには、そのパッケージに
      <filename>builtin.mk</filename>
      ファイルがある<emphasis>必要があります</emphasis>。
      このファイルがない場合は、リストに加えても単に無視されます。</para>
    </sect2>
  </sect1>
</chapter>
