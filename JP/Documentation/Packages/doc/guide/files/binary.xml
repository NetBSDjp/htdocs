<!-- $NetBSD: binary.xml,v 1.33 2007/08/15 06:33:43 rillig Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: binary.xml,v 1.33 2007/08/15 06:33:43 rillig Exp   -->

<chapter id="binary">
  <title>バイナリーパッケージを作る</title>

  <sect1 id="building-a-single-binary-package">
    <title>単数のバイナリーパッケージを構築する</title>

    <para>パッケージを構築しインストールしたら、
    &man.pkg.add.1; を使って別のシステムにインストールすることができる<emphasis>バイナリーパッ
    	ケージ</emphasis>を作ることができます。
    こうすると、複数のホストで同じパッケージを構築するような、
    CPU時間の無駄をなくすことができます。
    また、あなたのバイナリーパッケージを配布して、
    他の人が簡単にインストールできるようにすることもできます。</para>

    <para>バイナリーパッケージを作るには、pkgsrc の適切なディレクトリーへ移動したうえで、
    <command>make package</command> を実行します。</para>

    <screen>
&rprompt; <userinput>cd misc/figlet</userinput>
&rprompt; <userinput>make package</userinput>
    </screen>

    <para>これにより、パッケージが構築、インストール(もし、まだ済んでいなけれ
    ば)され、インストールされたパッケージからバイナリーパッケージが構築
    されます。これは<command>pkg_*</command>ツールを使い操作できます。
    バイナリーパッケージは<filename>/usr/pkgsrc/packages</filename>
    以下に、gzipされたtarファイルとして作成されます。
    上記の<filename
    role="pkg">misc/figlet</filename>の例の続きは、<xref linkend="logs.package"/>を参照して下さい。</para>

    <para>このようなバイナリーパッケージを提出する方法については、このドキュメント
    の後の<xref linkend="submit"/>を参照してください。</para>
  </sect1>

  <sect1 id="settings-for-creationg-of-binary-packages">
    <title>バイナリーパッケージ作成用の設定</title>

    <para><xref linkend="build.helpful-targets"/>を参照してください。</para>
  </sect1>

  <sect1 id="bulkbuild">
    <title>全パッケージをバルクビルドする</title>

    <para>この章では、コンパイル済みバイナリーパッケージを全部揃えたい人のために、そ
    の方法を説明します。バルクビルドを行うと、その時点でシステムにインストール
    されているパッケージをすべて削除しますので注意してください!</para>

    <para>バルクビルドを行うマシンかその近くのNFSサーバーをFTPサーバーに設定することで、
    構築したパッケージを他のマシンが使えるようになります。こうすると、
    他のマシンはバイナリーパッケージをインストールするだけですむので、
    時間を節約することができます。さらなる情報は
    &man.ftpd.8;をご覧ください。
    リモートNFSサーバーのストレージを使っている場合、実際のコンパイルがNFSスト
    レージ上で行われると非常に遅くなるので、そうなっていないことを確認してくだ
    さい。</para>

    <sect2 id="binary.configuration">
      <title>設定</title>

      <sect3 id="binary.bulk.build.conf">
	<title><filename>build.conf</filename></title>

	<para><filename>build.conf</filename> ファイルは、
	バルクビルドの主たる設定ファイルです。pkgsrc ツリーを最新に保つ方法、
	distfile のダウンロード方法、パッケージの構築方法や、
	報告の作成方法を設定することができます。註釈つきの設定例が
	<filename>pkgsrc/mk/bulk/build.conf-example</filename> にあります。
	これを使うには、<filename>build.conf-example</filename> を
	<filename>build.conf</filename> にコピーし、
	このファイル中のコメントに従って編集します。</para>
      </sect3>

      <sect3 id="binary.mk.conf">
	<title>&mk.conf;</title>

	<para>&mk.conf; で以下の変数を設定するとよいでしょう。デフォルト設定についての詳細
	は<filename>pkgsrc/mk/defaults/mk.conf</filename>を見てください。
	<varname>ACCEPTABLE_LICENSES</varname>はローカルポリシーに適合するようにしておきます。
	この例では <varname>_ACCEPTABLE=yes</varname> としており、
	ライセンスの検査を一切おこないません。</para>

<programlisting>
PACKAGES?=      ${_PKGSRCDIR}/packages/${MACHINE_ARCH}
WRKOBJDIR?=     /usr/tmp/pkgsrc   # build here instead of in pkgsrc
BSDSRCDIR=      /usr/src
BSDXSRCDIR=     /usr/xsrc         # for x11/xservers
OBJHOSTNAME?=   yes               # use work.`hostname`
FAILOVER_FETCH= yes               # insist on the correct checksum
PKG_DEVELOPER?= yes
_ACCEPTABLE=    yes
</programlisting>

	<para>バルクビルド用として、特に有用なオプションが、
	<filename>mk/bulk/bsd.bulk-pkg.mk</filename>
	の冒頭にいくつかあります。そのなかでも最も有用な部類のものを、
	ここで簡単に説明します。</para>

	<itemizedlist>

	  <listitem><para>遅いマシンを使っている場合は、
	  <varname>USE_BULK_BROKEN_CHECK</varname> を
	  <quote>no</quote> に設定するとよいでしょう。</para></listitem>

	  <listitem><para>読み出し専用の pkgsrc ツリーを使ってバルクビルドをする場合は、
	  ログファイルが作られるディレクトリーとして <varname>BULKFILESDIR</varname>
	  を設定する必要があります。そうしないと、
	  pkgsrc ディレクトリー内にログファイルが作られます。</para></listitem>

	  <listitem><para>このほか、重要な変数として
	  <varname>BULK_PREREQ</varname> があります。
	  これは、他のパッケージを構築する際には常に使える状態になっているべきパッケージを
	  並べたリストです。</para></listitem>

	</itemizedlist>

	<para>その他、いくつかのオプションが、
	pkgsrc の基盤内に散在しています。</para>

	<itemizedlist>

	  <listitem><para><varname>ALLOW_VULNERABLE_PACKAGES</varname>
	  は <literal>yes</literal> に設定するようにします。
	  バルクビルドの目的はバイナリーパッケージを作ることであり、
	  脆弱性の有無は重要ではありません。
	  作成したパッケージを公開サーバーにアップロードする時には、
	  脆弱性のあるパッケージは専用のディレクトリーに置かれます。
	  この変数を設定しておかないと、バルクビルドにおいて、
	  脆弱性のあるパッケージを構築しようとしなくなるため、
	  構築でエラーがあっても検出できなくなってしまいます。</para></listitem>

	  <listitem><para><varname>CHECK_FILES</varname>
	  (<filename>pkgsrc/mk/check/check-files.mk</filename>) を
	  <quote>yes</quote> に設定すると、インストールされた一連のファイルが
	  <filename>PLIST</filename> と一致することを確認することができます。</para></listitem>

	  <listitem><para><varname>CHECK_INTERPRETER</varname>
	  (<filename>pkgsrc/mk/check/check-interpreter.mk</filename>) を
	  <quote>yes</quote> に設定すると、インストールされた
	  <quote>#!</quote> で始まるスクリプトが、
	  指定されたインタープリターを見つけられることを確認することができます。</para></listitem>

	  <listitem><para><varname>PKGSRC_RUN_TEST</varname> を
	  <quote><literal>yes</literal></quote> に設定して、
	  各パッケージのインストール前に自己診断を実行することができます。
	  なお、パッケージのなかには<quote>良質の</quote>乱数を大量に使うものがあるので、
	  バルクビルドを実行しているマシンが、
	  完全なアイドル状態にはならないようにする必要があります。
	  さもないと、一部の診断プログラムが、
	  新しい乱数データが使えるようになるのを待つ間、
	  ハングしているかのように見えるようになります。</para></listitem>

	</itemizedlist>

      </sect3>

      <sect3 id="pre-build.local">
	<title><filename>pre-build.local</filename></title>

	<para>バルクビルドでは、ビルド前の段階の最後に、サイト独自の作業を行なうよう設定
	することができます。<filename>/usr/pkgsrc/mk/bulk</filename>に
	<filename>pre-build.local</filename>ファイルがあると、ビ
	ルド前の段階の最後に、このファイルが(&man.sh.1;スクリプトとして)実行されます。
	<filename>pre-build.local</filename>の使い方の例としては、このファイルに</para>

	<screen>echo "I do not have enough disk space to build this pig." \
	&gt; misc/openoffice/$BROKENF</screen>

	<para>のような内容を書いておいて、3 GB近くのディスク容量が必要な個々のパッケージ
	の構築をしないようにする、というものがあります。</para>
      </sect3>
    </sect2>

    <sect2 id="other-environmental-considerations">
      <title>ほか、環境に関する考察</title>

      <para><filename>/usr/pkg</filename>はバルクビルド開始時に完全に削除されるので、ログインシェルが別の場
      所にあることを確認してください。ログインシェルを<filename>/usr/local/bin</filename>に移して(それ
      に合わせて passwd ファイルも修正して)おくか、<filename>/etc/rc.local</filename>で&man.pkg.add.1;を使っ
      て(再)インストールするようにしておきます。これでリブート後もログインできま
      す(パッケージが削除されてもシェルのプロセスは死なず、シェルを新たに起動でき
      なくなるだけです)。また、1.5より前の&os;を使っていたり、何らかの
      理由でpkgsrc版のsshを使いたい場合は、<filename>rc.local</filename>でsshdが起動する前にsshをイン
      ストールするようにしておきます:</para>

<programlisting>
(cd /usr/pkgsrc/security/ssh && make bulk-install)
if [ -f /usr/pkg/etc/rc.d/sshd ]; then
  /usr/pkg/etc/rc.d/sshd
fi
</programlisting>

      <para>こうしておかないと、バルクビルド終了後や、あるいはマシンがリブートやクラッ
      シュした場合にsshでログインできなくなります。警告しておきましたよ! :)</para>
    </sect2>

    <sect2 id="operation">
      <title>操作</title>

      <para>すでにインストールされているどのパッケージも必要ない状態にしてください。</para>

      <warning>
	<para>バルクビルドの過程で、<emphasis>すべてのパッケージ、
	設定ファイルと、さらに、
	<filename>/var</filename>, <filename>/home</filename>
	その他の場所にあるファイルがいくつか削除されます。
	なので、システムに悪影響を与えるおそれのある権限で、
	バルクビルドを実行しないでください。</emphasis></para>
      </warning>

      <para>その他、
      構築の妨げになりうるもの(<filename>/usr/local</filename>にインストールされているライブラリーなど)
      もすべて削除しておいてください。root になって、以下のようにタイプします:</para>

      <screen>
&rprompt; <userinput>cd /usr/pkgsrc</userinput>
&rprompt; <userinput>sh mk/bulk/build</userinput>
      </screen>

      <para>何らかの理由で前回の構築が完了していない場合(電源断、システムパニックなど)
      は、以下を実行すると、その続きをすることができます:</para>

      <screen>&rprompt; <userinput>sh mk/bulk/build restart</userinput></screen>

      <para>バルクビルドが終わると、その要約がメールで届きます。また、<filename>build.conf</filename>
      ファイルの<varname>FTP</varname>で指定したディレクトリーに、構築ログがあります。</para>
    </sect2>

    <sect2 id="what-it-does">
      <title>何を実行するのか</title>

      <para>バルクビルドは三つの段階からなります:</para>

      <variablelist>
	<varlistentry>
	  <term>1. ビルド前</term>

	  <listitem>
	    <para>スクリプトがpkgsrcツリーを(anon)cvsで更新します。そして、壊れている
	    distfileをすべて一掃し、インストールされているパッケージをすべて削
	    除します。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>2. バルクビルド</term>

	  <listitem>
	    <para>これは基本的に、
	    <quote>make bulk-package</quote>を、パッケージの構築順
	    序を最適化しておこなうものです。他のパッケージに依存しないパッケー
	    ジが最初に構築され、多くの依存関係を持つパッケージは後に構築されま
	    す。</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>3. ビルド後</term>

	  <listitem>
	    <para>報告を作成し、<filename>build.conf</filename>で指定されたディレクトリーに
	    <filename>broken.html</filename> という名前で置きます。あわせて、この報告の簡略版が
	    構築管理者にメールで送られます。</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>構築中、壊れているパッケージの一覧が<filename>/usr/pkgsrc/.broken</filename>
      (<varname>OBJMACHINE</varname>
      が設定されている場合は
      <filename>.../.broken.${MACHINE}</filename>)
      に作られ、構築が壊れているものの個々の
      構築ログは、各パッケージのディレクトリーに置かれます。これらのファイルは、
      壊れているパッケージを再度構築しようとするような無駄をなくすために、bulk-ター
      ゲットが構築が壊れていることを記録するのに使われます。また、壊れているパッ
      ケージを後でデバッグするためにも使えます。</para>
    </sect2>

    <sect2 id="disk-space-requirements">
      <title>必要なディスク容量</title>

      <para>現在、
      NetBSD 2.0/i386 ではおおむね以下の容量が必要です:</para>

      <itemizedlist>
	<listitem>
	  <para>10 GB - distfile (NFSでも可)</para>
	</listitem>

	<listitem>
	  <para>8 GB - 全バイナリー一式 (NFSでも可)</para>
	</listitem>

	<listitem>
	  <para>5 GB - コンパイル用の一時領域 (ローカルディスクを推奨)</para>
	</listitem>
      </itemizedlist>

      <para>各パッケージは、バイナリーパッケージ作成直後にアンインストールされた上、
      ソースも削除されます。このため、莫大なディスク容量は必要ありません。後
      になって、このパッケージがまた必要となった場合は、再度構築することなく
      &man.pkg.add.1; でインストールされるので、
      無駄な再コンパイルの繰り返しは発生しません。</para>
    </sect2>

    <sect2 id="setting-up-a-sandbox">
      <title>chroot構築用の砂場を用意する</title>

      <para>バルクビルドによってパッケージを全部消される(マシンがパッケージのコンパイル
      以外に無用なものになってしまう)のが嫌な場合は、chroot環境下でパッケージをバ
      ルクビルドすることもできます。</para>

      <para>最初にすることは、chrootされた砂場を、
      たとえば<filename>/usr/sandbox</filename>に用意することです。
      これは null マウントを使って、または手動でおこなうことができます。</para>

      <para><filename>pkgsrc/mk/bulk/mksandbox</filename> というシェルスクリプトがあり、
      null マウントを使った砂場の環境を用意してくれます。このスクリプトは、
      砂場の環境のルートに <filename>sandbox</filename> というスクリプトも作ります。
      これは、<command>sandbox mount</command> コマンドで null マウントをした状態にしたり、
      <command>sandbox umount</command>
      コマンドでアンマウントした状態にしたりすることができるものです。</para>

      <para>砂場の環境を手動で用意するには、
      &os;のインストール配布物をすべて展開するか、<filename>/usr/src/etc</filename>で
      <command>make distribution DESTDIR=/usr/sandbox</command>を実行した後、以下のものを用意して
      適切に設定された状態にします。</para>

      <procedure>
	<step>
	  <para>カーネル</para>

	  <screen>&rprompt; <userinput>cp /netbsd /usr/sandbox</userinput></screen>
	</step>

	<step>
	  <para><filename>/dev/*</filename></para>

	  <screen>&rprompt; <userinput>cd /usr/sandbox/dev ; sh MAKEDEV all</userinput></screen>
	</step>

	<step>
	  <para><filename>/etc/resolv.conf</filename> (<filename
	  role="pkg">security/smtpd</filename>およびメール用):</para>

	  <screen>&rprompt; <userinput>cp /etc/resolv.conf /usr/sandbox/etc</userinput></screen>
	</step>

	<step>
	  <para>動作する(!)ようなメールの設定 (hostname, sendmail.cf):</para>

	  <screen>&rprompt; <userinput>cp /etc/mail/sendmail.cf /usr/sandbox/etc/mail</userinput></screen>
	</step>

	<step>
	  <para><filename>/etc/localtime</filename> (<filename
	  role="pkg">security/smtpd</filename>用):</para>

	  <screen>&rprompt; <userinput>ln -sf /usr/share/zoneinfo/UTC /usr/sandbox/etc/localtime</userinput></screen>
	</step>

	<step>

	  <para><filename>/usr/src</filename> (たとえば
	  <filename
	  role="pkg">sysutils/aperture</filename> 用のシステムソース):</para>

	  <screen>&rprompt; <userinput>ln -s ../disk1/cvs .</userinput>
	  &rprompt; <userinput>ln -s cvs/src-2.0 src</userinput></screen>
	</step>

	<step>
	  <para><filename>/var/db/pkg</filename>を作成する(デフォルトのインストールには含まれません):</para>

	  <screen>&rprompt; <userinput>mkdir /usr/sandbox/var/db/pkg</userinput></screen>
	</step>

	<step>
	  <para><filename>/usr/pkg</filename>を作成する(デフォルトのインストールには含まれません):</para>

	  <screen>&rprompt; <userinput>mkdir /usr/sandbox/usr/pkg</userinput></screen>
	</step>

	<step>
	  <para>cvs を使って、<filename>/usr/sandbox/usr/pkgsrc</filename>
	  内にpkgsrcをチェックアウトする:</para>

	  <screen>
&rprompt; <userinput>cd /usr/sandbox/usr</userinput>
&rprompt; <userinput>cvs -d anoncvs@anoncvs.NetBSD.org:/cvsroot checkout -d -P pkgsrc</userinput>
	  </screen>

	  <para>この pkgsrc ツリーを、開発用の pkgsrc ツリーにマウントしたりリンクしたりしてはいけません。
	  そういうことをすると問題を起こしがちだからです。</para>
	</step>

	<step>
	  <para><filename>/usr/sandbox/usr/pkgsrc/packages</filename> と
	  <filename>.../distfiles</filename> が、適切な場所を指すようにする。
	  これらは NFS や nullfs でマウントしておくと便利かもしれません。</para>
	</step>

	<step>
	  <para>&mk.conf; を編集する。<xref linkend="binary.mk.conf"/>参照。</para>
	</step>

	<step>
	  <para><filename>mk/bulk/build.conf</filename>を必要に合わせて調整する。</para>
	</step>
      </procedure>

      <para>chroot砂場の用意ができれば、
      以下の手順で構築を開始できます:</para>

      <screen>
&rprompt; <userinput>cd /usr/sandbox/usr/pkgsrc</userinput>
&rprompt; <userinput>sh mk/bulk/do-sandbox-build</userinput>
      </screen>

      <para>このコマンドは、砂場内に移動して、構築を開始するものです。構築が終わ
	ると、構築の結果がメールで送信されます。できあがったバイナリーパッケージは、
      <filename>/usr/sandbox/usr/pkgsrc/packages</filename> (の指す/マウントされた先/元)に置かれます。</para>
    </sect2>

    <sect2 id="building-a-partial-set">
      <title>パッケージを部分的に構築する</title>

      <para><filename>pkgsrc/mk/bulk/build</filename> スクリプトは、
      pkgsrc の全パッケージの一式の構築のほか、
      pkgsrc に含まれるパッケージの部分集合の構築にも使うことができます。
      &mk.conf; で <varname>SPECIFIC_PKGS</varname>
      を定義すると、</para>

      <itemizedlist>
	<listitem><para>SITE_SPECIFIC_PKGS</para></listitem>
	<listitem><para>HOST_SPECIFIC_PKGS</para></listitem>
	<listitem><para>GROUP_SPECIFIC_PKGS</para></listitem>
	<listitem><para>USER_SPECIFIC_PKGS</para></listitem>
      </itemizedlist>

      <para>の各変数で構築対象のパッケージを定義できるようになります。
      構築対象として定義されたパッケージの依存関係によって必要となるパッケージも、
      バルクビルドのコードが構築対象に追加します。</para>

      <para>この使い方のひとつに、
      サイトで必要なバイナリーパッケージをすべて用意するために、
      <varname>SPECIFIC_PKGS</varname> を使ったバルクビルドを
      chroot 環境で定期的に実行するというものがあります。
      こうすれば、不要なパッケージまで構築するような余計な負荷はかかりません。</para>

    </sect2>

    <sect2 id="bulk-upload">
      <title>バルクビルドの成果をアップロードする</title>

      <para>本節では、pkgsrc 開発者がバルクビルドで構築したバイナリーパッケージを
      ftp.NetBSD.org へアップロードする方法を説明します。</para>

      <para>アップロードしようとしているバイナリーパッケージの
      チェックサムファイルを自動生成したい場合は、
      <filename>mk/bulk/build.conf</filename> で
      <varname>MKSUMS=yes</varname> を忘れずに設定してください。</para>

      <para>チェックサムファイルに PGP 署名をしたい場合
      (そうすることを強くおすすめします)は、
      <filename>mk/bulk/build.conf</filename> で
      <varname>SIGN_AS=username@NetBSD.org</varname> を忘れずに設定してください。
      こうしておくと、ファイルをアップロードする前には常に、そのファイルに署名するため、
      GPG パスワードの入力を促すようになります。</para>

      <para>次に、<filename>mk/bulk/build.conf</filename> ファイルで
      <varname>RSYNC_DST</varname> が適切に設定された状態にします。
      つまり、この変数値を以下のような形式に調節します。</para>

      <screen>RSYNC_DST=ftp.NetBSD.org:/pub/NetBSD/packages/packages-200xQy/NetBSD-a.b.c/arch/upload </screen>

      <para>このなかの "packages-200xQy",
      "NetBSD-a.b.c", "arch" を、適切な値にしてください。
      ftp.NetBSD.org でのログイン名がローカルのログイン名と異なる場合は、
      そのログイン名を直接指定します。たとえば、
      筆者のローカルアカウントは "feyrer" ですが、ログイン名は "hubertf" なので、以下のようにします。</para>

      <screen>RSYNC_DST=hubertf@ftp.NetBSD.org:/pub/NetBSD/packages/packages-200xQy/NetBSD-a.b.c/arch/upload</screen>

      <para>ここでは、アップロードの最中はディレクトリーを公開しないようにするため、
      独立した <filename>upload</filename> ディレクトリーにアップロードします。
      そうするために、ftp.NetBSD.org で以下のコマンドを実行しておきます。</para>

      <screen>nbftp% <userinput>mkdir -p -m 750 /pub/NetBSD/packages/packages-200xQy/NetBSD-a.b.c/arch/upload</userinput></screen>

      <para>なお、<filename>/pub/NetBSD/packages</filename> は
      NetBSD オペレーティングシステム用のパッケージ専用です。
      それ以外のオペレーティングシステム用のバイナリーパッケージは
      <filename>/pub/pkgsrc</filename> 以下に置きます。</para>

      <para>バイナリーパッケージをアップロードする前に、以下のような
      ssh の認証が必要となります。以下の例は、<emphasis>砂場内における</emphasis>
      root アカウント用の一時的な鍵を使うようにする方法です。
      (同じ鍵を常時使うことはしないものとします)。</para>

      <screen>
&rprompt; <userinput>chroot /usr/sandbox</userinput>
chroot-&rprompt; <userinput>rm $HOME/.ssh/id-dsa*</userinput>
chroot-&rprompt; <userinput>ssh-keygen -t dsa</userinput>
chroot-&rprompt; <userinput>cat $HOME/.ssh/id-dsa.pub</userinput>
      </screen>

      <para>ここで出力した <filename>id-dsa.pub</filename> の内容を、
      ftp.NetBSD.org の <filename>~/.ssh/authorized_keys</filename>
      ファイルに追加します。パッケージのアップロードが終われば、
      この鍵は削除できます。</para>

      <para>次に、ssh でうまく接続できることを確認します。</para>

      <screen>chroot-&rprompt; <userinput>ssh ftp.NetBSD.org date</userinput> </screen>

      <para>ここでは、適宜 "-l yourNetBSDlogin" を使ってください。</para>

      <para>すべて順調にいけば、
      砂場から抜けて、アップロードを始めることができます。</para>

      <screen>
chroot-&rprompt; <userinput>exit</userinput>
&rprompt; <userinput>cd /usr/sandbox/usr/pkgsrc</userinput>
&rprompt; <userinput>sh mk/bulk/do-sandbox-upload</userinput>
      </screen>

      <para>アップロードにはそれなりに時間がかかるかもしれません。
      FTP サーバーで &man.ls.1; や &man.du.1; して、アップロードの過程を見てください。
      アップロード用スクリプトは、制限つきのパッケージはアップロードしないように、
      また、脆弱性のあるパッケージは <filename>vulnerable</filename>
      サブディレクトリーに置くように処理してくれます。</para>

      <para>アップロードが終わった後に、最初にすることは、ssh でアクセスして以下のようにすることです。</para>

      <screen>nbftp% <userinput>vi ~/.ssh/authorized_keys</userinput>
      Gdd:x! </screen>

      <para>アップロード用に事前に追加しておいた鍵はすべて削除してください。
      最後に、アップロードしたパッケージを
      <filename>upload</filename> ディレクトリーの外に出して、
      公開された状態にします。</para>

      <screen>
nbftp% <userinput>cd /pub/NetBSD/packages/packages-200xQy/NetBSD-a.b.c/arch</userinput>
nbftp% <userinput>mv upload/* .</userinput>
nbftp% <userinput>rmdir upload</userinput>
nbftp% <userinput>chmod 755 .</userinput>
      </screen>
    </sect2>
  </sect1>

  <sect1 id="creating-cdroms">
    <title>CD-ROM複数枚に収めたパッケージコレクションの作成</title>

    <para>pkgsrcのバルクビルド完了後、できあがったバイナリーパッケージからCD-ROMを作っ
    て、他のマシンへのインストール用に使うことができます。
    <filename role="pkg">pkgtools/cdpack</filename>パッケージに、そのようなISO 9660イメージ作成用の簡単
    なツールがあります。<command>cdpack</command>は、依存関係が一枚のCD内で完結するように、パッ
    ケージを複数枚のCD-ROMに編集してくれます。</para>

    <sect2 id="cdpack-example">
      <title>cdpackの使用例</title>

      <para>cdpackの完全なドキュメンテーションはcdpack(1)マニュアルページにあります。
      以下の短い例では、
      バイナリーパッケージが<filename>/usr/pkgsrc/packages/All</filename>に置いてあり、ISO 9660イメー
      ジ用の十分なディスク容量が<filename>/u2</filename>にあるものとします。</para>

      <screen>
&rprompt; <userinput>mkdir /u2/images</userinput>
&rprompt; <userinput>pkg_add /usr/pkgsrc/packages/All/cdpack</userinput>
&rprompt; <userinput>cdpack /usr/pkgsrc/packages/All /u2/images</userinput>
      </screen>

      <para>各CDに共通ファイル(<filename>COPYRIGHT</filename>, <filename>README</filename>, など)を含めたい場合は、そのファイルを
      含むディレクトリーを作る必要があります。たとえば以下のようにします。</para>

      <screen>
&rprompt; <userinput>mkdir /tmp/common</userinput>
&rprompt; <userinput>echo "This is a README" &gt; /tmp/common/README</userinput>
&rprompt; <userinput>echo "Another file" &gt; /tmp/common/COPYING</userinput>
&rprompt; <userinput>mkdir /tmp/common/bin</userinput>
&rprompt; <userinput>echo "#!/bin/sh" &gt; /tmp/common/bin/myscript</userinput>
&rprompt; <userinput>echo "echo Hello world" &gt;&gt; /tmp/common/bin/myscript</userinput>
&rprompt; <userinput>chmod 755 /tmp/common/bin/myscript</userinput>
      </screen>

      <para>ここで、以下のようにしてイメージを作成します。</para>

      <screen>&rprompt; <userinput>cdpack -x /tmp/common /usr/pkgsrc/packages/All /u2/images</userinput></screen>

      <para>こうすると、各イメージのルートディレクトリーに<filename>README</filename>, <filename>COPYING</filename>および
      <filename>bin/myscript</filename>が含まれるようになります。</para>
    </sect2>
  </sect1>
</chapter>
