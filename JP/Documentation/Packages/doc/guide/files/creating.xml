<!-- $NetBSD: creating.xml,v 1.10 2011/05/21 16:39:03 wiz Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: creating.xml,v 1.10 2011/05/21 16:39:03 wiz Exp   -->

<chapter id="creating">
<title>新しいパッケージを一から作る</title>

<para>あなたが pkgsrc にまだ入っていないパッケージを見つけた場合、
たいていはソースコードをどの URL からダウンロードできるかわかっているでしょう。
この URL をもとにして、
いくつかの段階を踏むだけでパッケージを作成することができます。</para>

<procedure>

<step><para>最初に、<filename
role="pkg">pkgtools/url2pkg</filename> および <filename
role="pkg">pkgtools/pkglint</filename> の両パッケージをインストールします。</para></step>

<step><para>次に、そのパッケージの属するカテゴリーとして、
最上層のディレクトリーをひとつ選びます。既存のもののかわりに、
専用のディレクトリー (<filename>local</filename> など) を作ってもかまいません。
このカテゴリーのディレクトリーの下に、パッケージ用にもうひとつディレクトリーを作り、
その中に移動します。</para></step>

<step><para>プログラム <command>url2pkg</command> を実行します。
実行すると URL をたずねてきます。配布ファイル (たいていは
<filename>.tar.gz</filename> ファイルです)の URL を入力して、
パッケージの基本的な要素が自動的に作られてゆくようすを観察します。
配布ファイルは自動的に展開され、
<filename>Makefile</filename> の詳しい内容の一部を自動的に書いてくれますが、
残りは手動でやる必要があるでしょう。</para></step>

<step><para>パッケージの依存性を判断するため、展開されたファイルを調べます。
<filename>README</filename> のようなファイルに依存性について書かれているのが理想的ですが、
実際はそうなっていないこともあります。
それぞれの依存先について、それが pkgsrc のどこにあるかを調べて、
依存先のディレクトリーに <filename>buildlink3.mk</filename>
というファイルがある場合はそれを <filename>Makefile</filename>
の最後の行の直前でインクルードします。
依存先に <filename>buildlink3.mk</filename> がない場合は、
このファイルをまず作ります。<filename>buildlink3.mk</filename> ファイルは、
依存先パッケージのインクルードファイルとライブラリーが確実に用意されるようにするためのものです。</para>

<para>単に、あるパッケージに含まれるバイナリーが必要なだけならば、
依存するバージョンと pkgsrc における場所を指定する
<varname>DEPENDS</varname> 行を Makefile に追加します。
この行は 3 番目の段落に書くようにします。
依存性がパッケージを構築するためだけに必要で、使用するためには必要ない場合は、
<varname>DEPENDS</varname> ではなく <varname>BUILD_DEPENDS</varname> を使います。
これにより、作成中のパッケージは以下のようになるでしょう。</para>

<programlisting>
[...]

BUILD_DEPENDS+= lua>=5.0:../../lang/lua
DEPENDS+=       screen-[0-9]*:../../misc/screen
DEPENDS+=       screen>=4.0:../../misc/screen

[...]

.include "../../<replaceable>category</replaceable>/<replaceable>package</replaceable>/buildlink3.mk"
.include "../../devel/glib2/buildlink3.mk"
.include "../../mk/bsd.pkg.mk"
</programlisting>

</step>

<step><para>パッケージを<quote>使い物</quote>にするにはあと何をする必要があるかを確認するため、
<command>pkglint</command> を実行します。
pkglint のメッセージの意味がわからない場合は、
追加説明を出力してくれる <command>pkglint
--explain</command> または <command>pkglint
-e</command> を試してみてください。</para></step>

<step><para>多くの場合、パッケージはまだ構築できるようにはなっていません。
もっともありがちな場合については、次の節<xref
linkend="creating.common"/>で説明しています。この説明に従えば、
おそらく先に進めるでしょう。</para></step>

<step><para><command>bmake clean</command> を実行して、
作業ディレクトリーから展開されたファイルを掃除します。
作業ディレクトリーには、展開されたファイルのほかにも、
キャッシュファイルその他のシステム情報が置かれており、
これらが残っていると <filename>Makefile</filename>
編集後に悪影響のあることがあります。</para></step>

<step><para>ここで、<command>bmake</command> を実行してパッケージを構築します。
この段階では、さまざまな要因により構築がうまくいかないことがありますので、<xref
linkend="fixes"/>を調べてください。</para></step>

<step><para>パッケージがうまく構築できた場合、次にすることは、
パッケージのインストールです。<command>bmake install</command>
を実行して、うまくいくようお祈りします。</para></step>

<step><para>ここに至るまで、パッケージがインストールしたファイルの一覧を内容にもつ
<filename>PLIST</filename> ファイルの内容は、
ほとんど空でした。<command>bmake print-PLIST
&gt;PLIST</command> を実行して、おそらく正しいであろう一覧を作成します。
作成したファイルを、お好きなテキストエディターを使って、
ファイルの一覧がそれらしいものになっているか確認します。</para></step>

<step><para>再度 <command>pkglint</command> を実行して、
作成した <filename>PLIST</filename> に余計なものが含まれていないか調べます。</para></step>

<step><para>さきほど <command>bmake install</command> を実行した時に、
インストールされたファイルのデータベースにこのパッケージが登録されましたが、
ファイルの一覧は空のものが登録されています。これを修正するため、
<command>bmake deinstall</command> を実行してから <command>bmake install</command>
を再度実行します。これで、このパッケージは <filename>PLIST</filename>
のファイルの一覧とともに登録されます。</para></step>

<step><para><command>bmake package</command> を実行して、
インストールされたファイル一式からバイナリーパッケージを作成します。</para></step>

</procedure>

<sect1 id="creating.common">
<title>ありがちな種類のパッケージ</title>

<sect2 id="creating.perl-module">
<title>Perl モジュール</title>

<para>簡単な Perl モジュールは、<command>url2pkg</command>
を使って、依存性も含めて自動的に処理することができます。</para>

</sect2>

<sect2 id="creating.kde-app">
<title>KDE アプリケーション</title>

<para>KDE アプリケーションは、かならず
<filename>meta-pkgs/kde3/kde3.mk</filename> をインクルードしてください。
これには、KDE パッケージでよくある設定が多数含まれています。</para>

</sect2>

<sect2 id="creating.python-module">
<title>Python モジュールおよびプログラム</title>

<para>Python のモジュールとプログラムは、
あらかじめ用意された変数を使って、簡単にパッケージを作ることができます。</para>

<para>ほとんどの Python パッケージは、<quote>distutils</quote> または
easy-setup (<quote>eggs</quote>) のいずれかを使っています。
ソフトウェアが <quote>distutils</quote> を使っている場合は、
pkgsrc がこの枠組を使うようにするため、
<varname>PYDISTUTILSPKG</varname> 変数を <quote>yes</quote> に設定します。
<quote>distutils</quote> では、<filename>setup.py</filename> という名前のスクリプトを使いますが、
<quote>distutils</quote> ドライバーが
<filename>setup.py</filename> という名前でない場合は、
<varname>PYSETUP</varname> 変数をスクリプト名に設定します。</para>

<para>
ソフトウェアが既定の Python バージョンに対応していない場合は、
<varname>PYTHON_VERSIONS_ACCEPTED</varname> 変数を、
そのソフトウェアが動作する Python バージョンに設定します。
バージョンは新しいものから古いものの順に並べます。たとえば以下のようにします。
<programlisting>
PYTHON_VERSIONS_ACCEPTED=       25 24
</programlisting></para>

<para>
パッケージにするソフトウェアが Python モジュールである場合は、
<quote><filename>../../lang/python/extension.mk</filename></quote> をインクルードします。
この場合は、パッケージのディレクトリー名を
<quote>py-software</quote> という形式にし、
<varname>PKGNAME</varname> を
<quote>${PYPKGPREFIX}-${DISTNAME}</quote> に設定します。たとえば以下のようにします。
<programlisting>
DISTNAME=   foopymodule-1.2.10
PKGNAME=    ${PYPKGPREFIX}-${DISTNAME}
</programlisting></para>

<para>パッケージにするソフトウェアがアプリケーションである場合は、
<quote>extension.mk</quote> をインクルードする前に
<quote><filename>../../lang/python/application.mk</filename></quote> もインクルードします。</para>

<para>パッケージにするソフトウェア (アプリケーションでもモジュールでも) が
egg に対応している場合、必要なことは、
<quote><filename>../../lang/python/egg.mk</filename></quote> をインクルードすることだけです。</para>

<para>Python インタープリターへのパスを適切に設定するために、
<varname>REPLACE_PYTHON</varname> 変数を使います。この変数に、
パスの修正が必要なファイルのリストを設定します。たとえば以下のようにします。
<programlisting>
REPLACE_PYTHON=   ${WRKSRC}/*.py
</programlisting></para>

</sect2>

</sect1>

<sect1 id="creating.examples">
<title>例</title>

<sect2 id="creating.nvu">
<title>www/nvu パッケージはいかに pkgsrc に追加されたか</title>

<sect3 id="creating.nvu.init">
<title>作り始めのパッケージ</title>

<para>私は <filename>pkgsrc/doc/TODO</filename> ファイルを見て、
<quote>nvu</quote> パッケージが pkgsrc にまだ入っていないことに気づきました。
web 用に使うものと説明されているので、カテゴリーの選択は明らかに
<quote>www</quote> です。</para>

<programlisting>
&uprompt; mkdir www/nvu
&uprompt; cd www/nvu
</programlisting>

<para>web サイトによれば、ソースは tar ファイルの形で用意されているので、
その URL を <command>url2pkg</command> プログラムに与えます。</para>

<programlisting>
&uprompt; url2pkg http://cvs.nvu.com/download/nvu-1.0-sources.tar.bz2
</programlisting>

<para>エディターが立ち上がりますので、<varname>DISTNAME</varname> の行の前に
<varname>PKGNAME</varname> の行を追加します。パッケージ名に
<quote>sources</quote> という単語は含めないものだからです。さらに、
<varname>MAINTAINER</varname>, <varname>HOMEPAGE</varname>,
<varname>COMMENT</varname> の各行を記載します。これにより、
パッケージの <filename>Makefile</filename> は以下のようになります。</para>

<programlisting>
# &#36;NetBSD&#36;
#

DISTNAME=       nvu-1.0-sources
PKGNAME=        nvu-1.0
CATEGORIES=     www
MASTER_SITES=   http://cvs.nvu.com/download/
EXTRACT_SUFX=   .tar.bz2

MAINTAINER=     rillig@NetBSD.org
HOMEPAGE=       http://cvs.nvu.com/
COMMENT=        Web Authoring System

# url2pkg-marker (please do not remove this line.)
.include "../../mk/bsd.pkg.mk"
</programlisting>

<para>ここで、エディターを終了し、
pkgsrc が大きなソースアーカイブをダウンロードするのを観察します。</para>

<programlisting>
url2pkg> Running "make makesum" ...
=> Required installed package digest>=20010302: digest-20060826 found
=> Fetching nvu-1.0-sources.tar.bz2
Requesting http://cvs.nvu.com/download/nvu-1.0-sources.tar.bz2
100% |*************************************| 28992 KB  150.77 KB/s00:00 ETA
29687976 bytes retrieved in 03:12 (150.77 KB/s)
url2pkg> Running "make extract" ...
=> Required installed package digest>=20010302: digest-20060826 found
=> Checksum SHA1 OK for nvu-1.0-sources.tar.bz2
=> Checksum RMD160 OK for nvu-1.0-sources.tar.bz2
work.bacc -> /tmp/roland/pkgsrc/www/nvu/work.bacc
===> Installing dependencies for nvu-1.0
===> Overriding tools for nvu-1.0
===> Extracting for nvu-1.0
url2pkg> Adjusting the Makefile.

Remember to correct CATEGORIES, HOMEPAGE, COMMENT, and DESCR when you're done!

Good luck! (See pkgsrc/doc/pkgsrc.txt for some more help :-)
</programlisting>

</sect3>

<sect3 id="creating.nvu.problems">
<title>パッケージを機能するようにするための多くの問題を修正する</title>

<para>これで、パッケージが展開されたので、その内容を見ていきましょう。
このパッケージには <filename>README.txt</filename> がありますが、
mozilla に関することしか書かれていませんので、おそらく、
パッケージの依存性を調べるための役には立たないでしょう。
しかし、パッケージに GNU configure スクリプトがあるので、
必要なものについて逐一文句を言ってくれることを期待しましょう。</para>

<programlisting>
&uprompt; bmake
=> Required installed package digest>=20010302: digest-20060826 found
=> Checksum SHA1 OK for nvu-1.0-sources.tar.bz2
=> Checksum RMD160 OK for nvu-1.0-sources.tar.bz2
===> Patching for nvu-1.0
===> Creating toolchain wrappers for nvu-1.0
===> Configuring for nvu-1.0
[...]
configure: error: Perl 5.004 or higher is required.
[...]
WARNING: Please add USE_TOOLS+=perl to the package Makefile.
[...]
</programlisting>

<para>うまく文句を言ってくれました。そこで、パッケージの Makefile
をエディターで開き、<varname>USE_TOOLS</varname> 行がすでにあったので、
そこに <quote>perl</quote> を追加します。これによりパッケージの依存性が変更されたこと、
また、perl のラッパーが <quote>tools</quote> 相で自動的にインストールされることから、
パッケージの構築を最初からやり直すことが必要になりました。</para>

<programlisting>
&uprompt; bmake clean
===> Cleaning for nvu-1.0
&uprompt; bmake
[...]
*** /tmp/roland/pkgsrc/www/nvu/work.bacc/.tools/bin/make is not \
GNU Make.  You will not be able to build Mozilla without GNU Make.
[...]
</programlisting>

<para>そこで、<quote>gmake</quote> を
<varname>USE_TOOLS</varname> 行に追加して、もう一度 (最初から) やり直します。</para>

<programlisting>
[...]
checking for GTK - version >= 1.2.0... no
*** Could not run GTK test program, checking why...
[...]
</programlisting>

<para>今度は別の依存性です。最初の問題は、
「GTK のパッケージは pkgsrc のどこに隠されているか?」です。</para>

<programlisting>
&uprompt; echo ../../*/gtk*
[many packages ...]
&uprompt; echo ../../*/gtk
../../x11/gtk
&uprompt; echo ../../*/gtk2
../../x11/gtk2
&uprompt; echo ../../*/gtk2/bui*
../../x11/gtk2/buildlink3.mk
</programlisting>

<para>最初の結果は、明らかに多すぎです。二つ目は、ただひとつの結果が出ており、
非常にみごとです。しかし、ここには GNOME パッケージに関する罠があります。
GNOME 2 がリリースされる前から、pkgsrc にはすでに多数の
GNOME 1 パッケージがありました。そのような GNOME 1
パッケージをそのまま使い続けることができるようにするために、
GNOME 2 パッケージはそれらとは別のパッケージとして導入されており、
通常はパッケージ名に <quote>2</quote> が付け加えられています。
このため、gtk がこれに該当するかを確認したところ、
実際に該当していました。</para>

<para>GTK2 パッケージには <filename>buildlink3.mk</filename>
があるので、依存性の追加は非常に簡単です。パッケージの
<filename>Makefile</filename> の最後の行の直前に
<literal>.include</literal> 行を追加します。これにより以下のようになりました。</para>

<programlisting>
[...]
.include "../../x11/gtk2/buildlink3.mk"
.include "../../mk/bsd.pkg.mk
</programlisting>

<para>改めて <command>bmake clean && bmake</command> を実行すると、
以下のようになりました。</para>

<programlisting>
[...]
checking for gtk-config... /home/roland/pkg/bin/gtk-config
checking for GTK - version >= 1.2.0... no
*** Could not run GTK test program, checking why...
*** The test program failed to compile or link. See the file config.log for the
*** exact error that occured. This usually means GTK was incorrectly installed
*** or that you have moved GTK since it was installed. In the latter case, you
*** may want to edit the gtk-config script: /home/roland/pkg/bin/gtk-config
configure: error: Test for GTK failed.
[...]
</programlisting>

<para>この事例では、<quote>どのパッケージも GNOME 2 を好む</quote>との仮定は誤りでした。
上のエラーメッセージの最初のほうの行から、
このパッケージは実際には GNOME 1 バージョンの GTK を必要としていることがわかります。
もしこのパッケージが GTK2 を探していたなら、<command>gtk-config</command>
ではなく <command>pkg-config</command> を探していたでしょう。
そこで、パッケージの <filename>Makefile</filename> 中の <literal>x11/gtk2</literal>
を <literal>x11/gtk</literal> に書き換えてから、
またやり直します。</para>

<programlisting>
[...]
cc -o xpidl.o -c -DOSTYPE=\"NetBSD3\" -DOSARCH=\"NetBSD\"   -I../../../dist/include/xpcom -I../../../dist/include -I/tmp/roland/pkgsrc/www/nvu/work.bacc/mozilla/dist/include/nspr -I/usr/X11R6/include   -fPIC -DPIC -I/home/roland/pkg/include -I/usr/include  -I/usr/X11R6/include -Wall -W -Wno-unused -Wpointer-arith -Wcast-align -Wno-long-long -pedantic -O2 -I/home/roland/pkg/include -I/usr/include -Dunix -pthread -pipe  -DDEBUG -D_DEBUG -DDEBUG_roland -DTRACING -g -I/home/roland/pkg/include/glib/glib-1.2 -I/home/roland/pkg/lib/glib/include -I/usr/pkg/include/orbit-1.0   -I/home/roland/pkg/include -I/usr/include  -I/usr/X11R6/include -include ../../../mozilla-config.h -DMOZILLA_CLIENT -Wp,-MD,.deps/xpidl.pp xpidl.c
In file included from xpidl.c:42:
xpidl.h:53:24: libIDL/IDL.h: No such file or directory
In file included from xpidl.c:42:
xpidl.h:132: error: parse error before "IDL_ns"
[...]
</programlisting>

<para>パッケージの依存先が、まだ全部は見つかっていません。
ここでの問題は「ヘッダーファイル <filename>libIDL/IDL.h</filename>
はどのパッケージが提供しているのか?」です。</para>

<programlisting>
&uprompt; echo ../../*/*idl*
../../devel/py-idle ../../wip/idled ../../x11/acidlaunch
&uprompt; echo ../../*/*IDL*
../../net/libIDL
</programlisting>

<para>二つ目で見つかったものを試してみましょう。そこで、
<filename>../../net/libIDL/buildlink3.mk</filename> ファイルをインクルードしてから、
またやり直します。しかし、エラーはさきほどと変わりません。コードをいくらか調べたすえ、
パッケージの構築の過程が壊れているせいで機能しないという結論に達しました。
しかし、Mozilla のソースツリーは非常に巨大なので、修正する気にはなりません。
そこで、パッケージの <filename>Makefile</filename> に以下の内容を追加して、
またやり直します。</para>

<programlisting>
CPPFLAGS+=              -I${BUILDLINK_PREFIX.libIDL}/include/libIDL-2.0
BUILDLINK_TRANSFORM+=   -l:IDL:IDL-2
</programlisting>

<para>パッケージ側では <filename>libIDL.so</filename>
というライブラリーを期待していますが、実際には
<filename>libIDL-2.so</filename> だけが利用可能なので、下の行が必要です。
これにより、コンパイラーのラッパーにその場で書き換えをするよう伝えます。</para>

<para>次の問題は、FreeType インターフェースの最近の変更に関するものです。
<filename role="pkg">www/seamonkey</filename> のパッチファイルがこの問題に対処しているので、
これを <filename>patches</filename> ディレクトリーにコピーします。
そして、はじめからやり直し、パッチをきれいに適用できるよう修正して、
またやり直します。これで、すべてうまくいきました。</para>

</sect3>

<sect3 id="creating.nvu.inst">
<title>パッケージをインストールする</title>

<programlisting>
&uprompt; bmake CHECK_FILES=no install
[...]
&uprompt; bmake print-PLIST >PLIST
&uprompt; bmake deinstall
&uprompt; bmake install
</programlisting>

</sect3>
</sect2>
</sect1>
</chapter>
