# $NetBSD: Packages.txt,v 1.4 1999/11/10 08:39:12 sakamoto Exp $
# $Id: Packages.txt,v 1.4 1999/11/10 08:39:12 sakamoto Exp $
###########################################################################

			==========================
			 NetBSDパッケージシステム
			   ドキュメンテーション
			==========================

		      Hubert Feyrer, Alistair Crooks


目次:
==================

 grep -B1 '^.====' Packages.txt | egrep -v '^.[-=]'


 0 イントロダクション
 ====================

UNIXベースのシステムには、自由に利用できるソフトウェアが数多く存在しま
す。これらは普通、またはいくつかの変更でNetBSDで実行できます。NetBSDパ
ッケージコレクションは一つのコマンドで、そのソフトウェアにNetBSDで実行
するのに必要ないくらかの変更を施して、ソフトウェアパッケージのインスト
ール(および再インストール)を簡単にします。

NetBSDパッケージシステムは、自由に利用できるサードパーティのソフトウェ
アを、NetBSDホストで容易に構築することを可能にします。一旦ソフトウェア
が構築されたら、それらは pkg_* ツールにより操作できるので、そのパッケ
ージのインストール、デインストール、全てのインストールされたパッケージ
の目録の表示、一行コメント、あるいはより詳細な説明の情報検索は、全く簡
単です。

NetBSDパッケージコレクションおよびNetBSDパッケージシステムは、FreeBSD
に由来しています。


 0.1 概要
 ========

このドキュメントは二部に別れています。第一部は「ユーザーガイド」で、パ
ッケージコレクションの一つのパッケージを使う方法を、コンパイル済みのバ
イナリーパッケージのインストールと、自分自身でコピーしたNetBSDパッケー
ジシステムから構築する方法の両方で説明します。第二部の「パッケージ構築
者ガイド」は、パッケージ構築の詳細について知らない他のNetBSDユーザーが、
簡単にそのパッケージを構築できるようにする方法を説明します。


 0.2 専門用語
 ============

ここまで、「ポート(ports)」、「パッケージ(packages)」などについて多く
話されています。ここで、このドキュメント中に使われている用語を説明します: 

 * パッケージ(Package):
   ファイルのセットで、NetBSDパッケージシステムを使用したソフトウェアを
   構築するのに必要なことが記述された構築手順書です。パッケージは、伝統
   的に/usr/pkgsrcの下に置かれます。

 * NetBSDパッケージシステム:
   これは、NetBSDオペレーティングシステムの一部分で、パッケージの構築(コ
   ンパイル)、インストールおよびリムーブを扱います。

 * Distfile:
   この用語は、自由に利用できるソフトウェアの作者が、彼の仕事を配布するた
   めに提供しているファイルまたは複数のファイルのことを指しています。NetBSD
   で構築するのに必要な全ての変更は、対応するパッケージに反映されます。
   通常distfileは、圧縮されたtarアーカイブ形式ですが、他の形式でも使用
   できます。Distfilesは/usr/pkgsrc/distfilesの下に保存されます。

 * ポート(Port):
   これはFreeBSDの人たちが、私たちがパッケージ(package)と呼んでいるものを
   表すために使われている用語です。NetBSDでは「ポート(port)」は、
   異なるアーキテクチャーを参照する用語となります。

 * コンパイル済み(バイナリー)パッケージ:
   NetBSDパッケージシステムを使ってdistfileより作成されたバイナリーの
   セットで、ひとつの .tgz ファイルに集められています。これはリコンパイル
   なしに同じマシンアーキテクチャーのマシンにインストールすることができます。
   パッケージはNetBSDパッケージシステムにより、/usr/pkgsrc/packagesで
   生成され、それはftp.netbsd.orgにもアーカイブされています。

   時々、これは、特にコンパイル済みのパッケージの文脈で、
   単に「パッケージ」と表されることもあります。

 *プログラム:
   対応するパッケージが、Distfileにあるファイルから作成した、
   インストールされるべきソフトウェアのひとまとまりです。

 * RCS IDs:
   パッケージに含まれるいくつかのファイルは、そのファイルのバージョンに
   対応したRCS IDが含まれています(cvsにより自動的に挿入されます)。
   これらのIDは、このドキュメントの中のいくつかの例で使用されていますが、
   このドキュメント自体がCVSによって管理されていますので、生のRCS IDを
   列挙することができません。かわりに、$は<$>のように記していますので、
   <$>NetBSD<$> や <$>Id<$> となります。


**************************************************************第一部は翻訳作業中
======================
第一部: ユーザーガイド
======================

 1 コンパイル済みのバイナリーパッケージのインストール
 ====================================================

このセクションは、あなたのマシンタイプ用にすでに準備されたコンパイル済
みのバイナリーパッケージを見つけ、取得してインストールする方法について
説明します。


 1.1 どこから得るか
 ==================

プリコンパイルされたパッケージは、ほどなくFTPアクセスのためにディレク
トリー/pub/NetBSD/packagesでftp.netbsd.orgおよびそのミラーで保存されま
す。どうぞ" sysctl hwによって指示されたようにそこで(に)正しいサブディ
レクトリーを選んで下さい。マシン_ "にアーチを作って下さい。実際のバイ
ナリーを含むサブディレクトリー「すべて」を加えてそのディレクトリーで、
それぞれのカテゴリーのためのサブディレクトリーがあります。tgz -ファイ
ル。カテゴリー・サブディレクトリーは、象徴的なそれらのファイルへのリン
クを使います。(今が/usr/pkgsrc/packagesでのように同じディレクトリー・
レイアウトです)。

この同じディレクトリー・レイアウトは、CDROMディストリビューションに申
し込みます、単に、そのディレクトリーは、たぶんどこかに/cdromの下に、ど
こかほかのところ鼻で地面を掘られるかもしれません。どうぞ正確な場所のた
めのあなたのCDROMのドキュメンテーションを調べて下さい! 


 1.2 やりかた
 ============ 

(最初に鼻で地面を掘る(べき) suに確かな)もしCDROMの書類を保管するかある
いはあなたのハードディスクに彼(それ)らをダウンロードしたら、あなたは、
以下のコマンドで彼(それ)らをインストールすることができます: 

 pkg _が加えます/path/to/package.tgz 

もしあなたはFTPアクセスがあります、そして、あなたがインストールの前にFTP
経由でパッケージをダウンロードしたくなければ、あなたが_が加えるpkgを与
えることによって自動的に今をすることができますftp - URL : 

 ftp://ftp.netbsd.org/pub/packages/`sysctl - nの_が加えるpkg hw。マシ
ン_アーチ` /すべて/ package.tgz 

sysctlが自動的にバイナリ・ファイルの正しいセットを決めるためにここで(
に)使われることに注意してください。彼(それ)らがあなたがインストールす
るプレゼントであることを仮定してまた問題のパッケージを走らせるのに必要
ないくらかの(どんな)パッケージがまた、インストールされるだろうと述べて
下さい。

パッケージをインストールした後に、確かにあなたの$ PATHの/usr/pkgがあっ
て下さい、したがってあなたは、実際には、ちょうどインストールされたプロ
グラムを開始することができます。


 1.3 警告
 ========

どうぞあなたが作り出さなかったとても警告への注目がインストールする生ま
れつきの危機についてその人力のページで表したということに気をつけるバイ
ナリー・パッケージ自身、およびこのようなファイルの無差別な加えることに
よってあなたのシステムへ紹介することができるセキュリティ・ホールを払っ
て下さい。


 2 構築よりインストールする
 ========================== 

今は、パッケージがNetBSDパッケージ・システムがすでに一部分はあると仮定
します。それはそうではありません、それから、あなたがこのドキュメント、
「建設者のガイドを包装して下さい」。の第II章を読むように勧められるか


 2.1 どこからpkgsrcを得るか
 ==========================

パッケージ情報源を動き出させるために、あなたは、ftp://ftp.netbsd.org/pub/NetBSD
-current/tar_files/pkgsrc.tar.gzからpkgsrc.tar.gzファイルを受け取って/usr/pkgsr
cへそれをアンパックする必要があります。

代案として、あなたは、ソフトウェア更新プロトコル、一すすり経由でpkgsrc
を得ることができます。そうするために、あなたのsupfileがライン言動にそ
れで「= pkgsrcをリリースして」、/usr/share/examples/supfilesで例を見さ
せる、およびディレクトリー/usr/pkgsrcがもちろん(あえて)存在することを
確かめて下さい。それから、「一すすり- v /path/to/your/supfile」を開始
するだけで良いのです。


 2.2 distfilesの取得
 =================== 

1つのgotchaがあります:ディストリビューション・ファイル(すなわち変更さ
れていない情報源)は、それを構築することができる(べき)パッケージ・シス
テムのためのあなたのシステムで存続しなくてはいけません。もしそれはでは
ありません、それから、ftp ( 1 )を使って自動的にディストリビューション
・ファイルをフェッチすれば。

あなたは、あなた自身のものに近いサイトに合う(べき)いくらかの主要なディ
ストリビューション・サイトをオーバーライトすることができます。/usr/pkgsrc/mk/mk
.conf.exampleをちょっと見ていくつかの例を見つけて下さい。今は、いくら
かのあなたのbandwith、および時間を保存するかもしれません。

もしあなたが永久的なインターネット、コネクションおよびあなたにどちらの
ファイルをダウンロードするかを知らせたくなければ、"作りますフェッチし
て下さい-リスト"あなたに，何を(に)あなたが必要とするだろうかを話すでし
ょう。/usr/pkgsrc/distfilesへこれらのdistfilesを置いて下さい。


 2.3 構築してインストールする方法
 ================================ 

それが(今まで)終わったことを仮定して、ルートになって適切なディレクトリ
ーに変わって下さい。それから、あなたはタイプすることができます

 作って下さい

パッケージのいろいろなコンポーネントを構築するのが迅速なシェルで、およ
び

 インストールをして下さい

シェルで入力を促してあなたのシステムで正しい場所へいろいろなコンポーネ
ントをインストールして下さい。

例としてトップのシステム・ユーティリティを取って、我々は、A.1で示され
るとして建物によって我々のシステムでそれをインストールすることができま
す。

プログラムは、パッケージ・ツリーのデフォルト根の下にインストールされま
す- /usr/pkg。あなたのパッケージ・ツリーの根として評価する(単にあなた
の環境の変数、およびそれが使うだろうLOCALBASEをセットされた)あなたの趣
味に相似でないので、今がすべきですか。したがって、/usr/localを使うため
に、セットしました

 LOCALBASE =/usr/local 

あなたの環境で。今への1つの例外が、もちろん、あります- X11パッケージは、
伝説的にX11ツリーに取り付けられています。X11パッケージを治める環境変数
の場所は、X11BASEです。したがって、/usr/local/X11R6、セットへX11パッケ
ージをインストールすること

 X11BASE =/usr/local/X11R6 

あなたの環境で。

しかし、ライブラリ、およびヘッダ・ファイルが他のソフトウェアによって見
つけられないかもしれないのでもしあなたがX11ツリーの外でX11パッケージを
インストールすれば、下手物が起こるかもしれないことに気をつけて下さい、
そうすればアプリケーション・デフォルトは、見つけられないかもしれません。
その理由で、あなたは、X11ツリーでX11パッケージを残すように勧められます。
我々は、今を変える方法を見ています。

いくつかのパッケージは、造り時間でいくつかの構成オプションを変えるため
に、/etc/mk.confをのぞいて見ます。/usr/pkgsrc/mk/mk.conf.exampleをちょ
っと見てそこで(に)あなたがセットすることができるものの概要を得て下さい。


 3 コンパイル済みのパッケージを作る
 ==================================

一旦あなたが述べられたとしてパッケージを構築してインストールしたら上で
す、あなたは、pkgsrcツリーでそれを--CPU時間を無駄に使うのではなくあな
たのバイナリー・パッケージを使うために他者のためにもう一つのNetBSDシス
テム、あるいはシンプルな方法を提供することでちょうど構築したバイナリー
を使うことができるように、今をしたいでしょう--今が適当なディレクトリー
に変わることによって終わった「バイナリー・パッケージ」に組み込むことが
できます、そしてコマンドをタイプします

 メイク・パッケージ

シェル・プロンプトで。今は、あなたのパッケージ(すでにされるとはいえな
くても)を構築してインストールするでしょう、そして、あなたが今を操作す
るためにpkg _ *ツールを使うことができるように結果のうちでその時バイナ
リー・パッケージを構成して下さい。バイナリー・パッケージは、/usr/pkgsrc/package
sの下に保存されます、それは、現在の時間のgzippedのファイルの形でありま
す。上記のトップの例の継続に関して付録A.2を参照して下さい。

どうぞそのようなバイナリーのパッケージを提出する方法でこのドキュメント
で後で「提出している」セクションを見て下さい。
**************************************************************第一部は翻訳作業中


==============================
第二部: パッケージ構築者ガイド
==============================

 4 パッケージコンポーネント - ファイル、ディレクトリー、およびコンテンツ
 ======================================================================= 

FreeBSD Portsコレクションからパッケージを用意しても、ゼロからパッケー
ジを用意する場合でも、いつも以下のセクションで述べられている多くのファ
イルが存在します。特に、それぞれのファイルがどうFreeBSD Portsと違うの
かも説明していきます。


 4.1 Makefile
 ============ 

構築、インストールおよびバイナリーパッケージの作成は、すべてパッケージ
のMakefileによりコントロールされます。

それぞれのパッケージのためのMakefileがあります。このファイルは、パッケ
ージのコンパイルとインストールのために必要なすべての定義とアクションが
セットされた標準のbsd.pkg.mkファイル("../../mk/bsd.pkg.mk")をインクル
ードします。必須となるフィールドは、インターネットのサイトからダウンロ
ードされる配布ファイルのベース名を指定するDISTNAME と、そのサイトを指
定する MASTER_SITES、パッケージが置かれるカテゴリーを意味するCATEGORIES、
パッケージの名前である PKGNAMEとメインテイナー名である MAINTAINERです。
これは、そのパッケージを維持する人による(いつも完全に正しい)決定にへり
くつを言う誰かが、活発に苦情を言うことができるようにするためです。

MASTER_SITES は、定義済みのサイトの一つをセットすることもできます。

	${MASTER_SITE_XCONTRIB}
	${MASTER_SITE_GNU}
	${MASTER_SITE_PERL_CPAN}
	${MASTER_SITE_TEX_CTAN}
	${MASTER_SITE_SUNSITE}

もしこれらの予め定義されたサイトの1つを選んだ場合、そのサイトのサブデ
ィレクトリーを指定する方法が必要となるかもしれません。これらのマクロは
一つ以上の実際のサイトに展開されるかもしれませんので、サブディレクトリ
ーを指定する場合は、以下の表記を使わなければなりません: 

	${MASTER_SITE_GNU:=subdirectory/name/}

(サブディレクトリー名あとのスラッシュ / に注意してください)廃止された
MASTER_SITE_SUBDIR を使用しても動作しません。

現在 CATEGORIES 値として以下の値が使用できます。もし一つ以上にまたがる
場合、それらの値はスペースで分けられる必要があります: 

	archivers   corba      games     meta-pkgs  security
	audio       cross      graphics  misc       shells
	benchmarks  databases  lang      net        sysutils
	cad         devel      mail      news       textproc
	comms       editors    math      plan9      www
	converters  emulators  mbone     print      x11

全ての利用できるオプション、および変数の記述に関しては、NetBSD packages(7)
マニュアルページを参照してください。

以下の事柄に気を配ってください。FreeBSD Portsコレクションからパッケージを
持ってきた場合は特に気を付けてください:

 - パッケージのMakefileから、すべての MANx と CATx の定義を削除して
   ください。- NetBSDではマニュアルページを自動的に取扱います。
   これらの定義は現在使用されていません。
 - もしパッケージにより(すでにそこにないとしても)マニュアルページが
   圧縮された形式でインストールされる場合、MANCOMPRESSED を追加してください。
   bsd.pkg.mkのコメントを参照。
 - すべてのファイルの /usr/local を ${PREFIX} に変更してください。
   (後述のパッチを参照)
 - どんな ldconfig コマンドも削除してください - もしNetBSDプラットフォームが
   ldconfigをサポートしていれば自動的に実行されますし、ldconfigをサポート
   しないプラットフォーム(例 NetBSD/Alpha)では他の処置がとられるでしょう。
 - もしFreeBSD Portsコレクションからパッケージを持ってきて変更するならば、
   それらの RCS ID を保持してください: FreeBSDのRCS Id中の '$' を削除し、
   なければ 'FreeBSD' を挿入してください。そして、<$>NetBSD<$> を追加して
   ください(<>は必要ありません。「専門用語」セクションを参照のこと)。
   すなわち:

   修正前:
	# <$>Id: Makefile,v 1.17 1997/06/16 06:39:51 max Exp <$>

   修正後:
	# <$>NetBSD<$>
	# FreeBSD Id: Makefile,v 1.17 1997/06/16 06:39:51 max Exp

 - もし、パッケージが info ファイルをインストールするのであれば、
   メインのinfo ディレクトリーファイルにこの事実を反映するために
   更新する必要があります。NetBSDではこれを行うための INFO_FILES 
   定義を持っています。例えば、indent.info をインストールしたことを
   info ディレクトリーファイルに反映するには、単に

	INFO_FILES=	indent.info

   とパッケージのMakefileに定義してください。もしパッケージにこれを
   追加するならば、必需品であるGNU texinfo パッケージがあなたのシステムに
   インストールされているかどうかを確認するために、USE_GTEXINFO も
   パッケージのMakefileに指定してください。
 - もしあなたが将来の更新のために、そのパッケージをメンテナンスするつもりで
   あれば、MAINTAINER にあなたのメールアドレスをセットしてください。
   標準では MAINTAINER は packages@netbsd.org にセットします。
   FreeBSDの人々は NetBSDのパッケージついて関心がないと思われます。
 - もし問題のソフトウェアにホームページが存在するのであれば、
   MAINTAINER の後ろに HOMEPAGE を追加してください。
   HOMEPAGEの値はホームページのURLにしてください。

 4.2 files/*
 =========== 

最も重要なことは、このディレクトリーには、パッケージのコンパイルに必要
なすべてのdistfileのmd5 チェックサム(必須) が含まれているということで
す。このファイル - files/md5 - は、インターネットから取得したdistfile
が悪意によりセキュリティホールを入れられたファイルに変更されていたり、
転送中にファイルが壊れたりすることを確認するために、配布ファイルのmd5 
チェックサムを含んでいます。このファイルは、NetBSDパッケージを作成する
ために使われたオリジナル配布ファイルやパッチなどのmd5 チェックサムを含
んでいます。これはmd5(1)コマンドを使うか、"make makesum"により生成する
ことができます。

filesディレクトリーにはまた、そのパッケージのpatches/ ディレクトリー(
セクション 4.3 参照)に入っている、公式なすべてのパッチのチェックサムフ
ァイルも入っています。このチェックサムファイルは patch-sum といい、パ
ッチ中のNetBSD RCS Idを除いたすべての行のMD5 チェックサムが含まれてい
ます。このファイルは "make makepatchsum" コマンドにより生成することが
できます。

また、もしあなたがコンフィグレーションまたは構築するより前に、パッケー
ジ中に何かファイルを置きたいならば、それらのファイルを files ディレク
トリーに置くことができますし、pre-configure ターゲットで、cp コマンド
によりコピーすることができます。あるいは、/dev/null に対するそのファイ
ルの単純なdiffをとり、パッチメカニズムを使用して、そのファイルを生成す
ることもできます。


 4.3 patches/*
 ============= 

このディレクトリーは、patch(1) コマンドを使用して作られたファイルを含
んでいます。このファイルは、配布ファイルのソースをNetBSD上で完全にコン
パイルして実行できるように変更するためのものです。これらのファイルは、
アルファベット順(シェルによる "patches/patch-*" 展開順)で適用されます。
つまり patch-aa は patch-ab より前に適用されます。

patch-?? ファイルは diff -u フォーマットであるべきです。これは、FreeBSD
Portsのtsarがcontext diffよりもこの形式の方が読みやすいことを見つけた
からです。ですから、もしあなたが同じ流儀でdiffを作れば、あなたのNetBSD
パッケージは、FreeBSD Portsシステムの一部として受け入れられるチャンス
が多くなります。

なお、将来の変更が難しくなってしまうので、一つのパッチファイルに、複数
のファイルへの変更を入れるのは止めてください。

一つ重要なこととして、NetBSD CVS ツリーにチェックインした後に問題を引
き起こすので、パッチファイルにRCS IDを含ませないように注意してください。
これを避けるためには、diffを "-U 2" または "-U 1" オプションで使ってく
ださい。

FreeBSD PortsからNetBSDパッケージシステムに持ってくる場合、NetBSD上で
もたいていFreeBSD Portsが使用できるでしょう。しかしながら、FreeBSDにソ
フトウェアを移植した人が、当てにならない __FreeBSD__ cpp defineを使っ
ていないかどうかチェックしてください。これをする簡単な方法は、パッケー
ジディレクトリーで

	grep -i freebsd patches/patch-??

としてください。

また、オリジナルパッケージ中の Makefile の /usr/local を ${PREFIX}に変
更するパッチを提供するなど、他のFreeBSDイズムにも気をつけてください。

パッケージを作り終えたとき、忘れずに "make makepatchsum" コマンドでパ
ッチファイルのチェックサムを生成するようにしてください。セクション 4.2
を参照してください。


************************************************************これ以降も翻訳作業中
 4.4 pkg / *  ========= 

このディレクトリーは、バイナリー・パッケージの創造を管理するのが慣れて
いるいくつかのファイルを含みます。このディレクトリーからのファイルは、
それ自身でバイナリー・パッケージで使われて、このように、他のマシンでイ
ンストールされるでしょう、したがって、あなたは、あなたのコメント、およ
び気のきいた言葉のためにあなたが思うだろうよりも、より広い聴衆がいるこ
とを知っているべきです。

 4.4.1必須ファイル ===================== 

 * pkg /コメント: ソフトウェアの断片のA 1 -ラインの記述。小包の名前を
述べるいかなる必要もありません-彼(それ)らが呼びかけられるときに、今は、
自動的に、pkg _ *ツールによって加えられるでしょう。

 * pkg / DESCR : ソフトウェアの断片のマルチ・ラインの記述。今は、彼(そ
れ)らが満期であるいくらかの(どんな)信用を含むべきです。どうぞ心で他者
があなたのユーモアのセンス(あるいは綴り字idiosyncracies )を共有しない、
および他者がここで(に)あなたが書くすべてを読むだろうことを支えて下さい。

 * pkg / PLIST : このファイルは、あなたのシステムでインストールされる
ファイルを治めます:すべてのバイナリー、マニュアルページ、etc。ディレク
トリーの創造、および削除、および差し込まれたファイルの場所をコントロー
ルするために、このファイルに入力されるかもしれない他の指令があります。

もしあなたがNetBSDのために働くためにFreeBSDパッケージを更新していれば、
どうぞpkg / PLISTでその以下の物への細心の注意を払って下さい: 

 -もしいくらかの(どんな)「@エグゼクティブldconfig ...」ステートメント、
あるいはいくらかの(どんな)「@ unexec ldconfig ...」があれば、彼(それ)
らを削除して下さい。電話ldconfigに、いくつかのNetBSD以来、アーキテクチ
ャーがldconfigを持たないのにかかわらず、NetBSDは自動的にうまくいきます。
-どんなミスしている@ dirrmステートメントを加えて下さい-小包Makefileの
いくらかの(どんな) MAN定義

あなたは、またport2pkgパッケージを調査することができました( pkgsrc/pkgtools/por
t2pkg) (あなたのための多くのロバ仕事をする)。


 4.4.2オプション・ファイル ==================== 

 * pkg /インストール: シェル・スクリプトは、_が加えるpkgの間に2度呼び
かけました。インストールする(べき)ファイルがその場に動かされる後に小包
抽出、およびファイルがその場に動かされる以前2回目の後で初めて時間を決
めて下さい。今は、PLISTで@エグゼクティブ・コマンドで可能な(のでは)ない
いくらかの(どんな)カスタム・プロシージャをするために、使うことができま
す。pkg _が( 1 )加えるのを見て下さい、そして、pkg _ ( 1 )さらに詳しい
情報については作り出して下さい。

 * pkg / DEINSTALL : このスクリプトは、前におよびいくらかの(どんな)フ
ァイルがリムーブされる以後実行されます。pkg _が削除するすべてがファイ
ルを削除する方法はオリジナルのディストリビューションで作り出されるかを
知っているので小包の施設のあたりにいくらかの(どんな)追加の乱雑な詳細を
きれいにすることは、このスクリプトの責任です。pkg _が( 1 )削除するのを
見て下さい、そして、pkg _ ( 1 )さらに詳しい情報については作り出して下
さい。

 * pkg / REQ : 要求して下さい-スクリプトそれは利用できるあるアカウント、
使い方方針と同意するユーザー/ sysadmin、といった物を確実にするのが施設
の前に呼びかけられた、およびde -施設のetcです。

 * pkg /メッセージ・ディスプレイ小包の施設の後のこのファイル。ほとんど
自由なソフトウェア、etcの法律の通知といった物に役に立ちます。


 4.5は/ *の台本を書きます ============= 

このディレクトリーは、あなたのソフトウェア、etcの構成に必要ないくらか
の(どんな)ファイルを含みます。もし以下の名前のどれ(か)をもつスクリプト
が現存すれば、それは、造りプロセスの間に適当な時期で実行されるでしょう:

 事前(に)フェッチします造りの前です造り後が後インストールの小包の前で
す小包後をプリインストールするパッチ後が事前(に)構成するパッチ前が後(
で)構成する抜粋後が構成する抜粋前を後(で)フェッチして下さい

造りプロセスの記述に関してセクション7を参照して下さい。


 4.6は/ *を働かせます ========== 

あなたが「作る」とタイプするときに、ディストリビューション・ファイルは、
このディレクトリーへアンパックされます。それは、タイピングによってリム
ーブすることができます

 きれいに作って下さい

シェル・プロンプトで。また、このディレクトリーを使っていろいろなタイム
・スタンプ・ファイルをつけます。


 CVへ小包を輸入する4.7  ================================== 

新しく開発された小包は、「TNF」のベンダー札および「pkgsrc -ベースだ」、
e .g::のリリース札で輸入されるべきです

 pkgsrc -ベースのcvs輸入pkgsrc/<category>/frobnitz TNF 

FreeBSDポートから生じている小包は、普通のCV運営によってそれから必要な
変更をして、(ポートのスナップ写真が撮られた日付であるYYYY - MMの- DDが
FreeBSDツリーを形づくります)「FREEBSD」のベンダー札および「FreeBSD -流
れ- YYYY - MMの- DD」のリリース札で輸入されるかもしれません。E.g: 

 cvs輸入pkgsrc/<category>/mumbler FREEBSD FreeBSD -現在の- 1998-04-01 
cvs rm patches/patch-a cvsが加えますパッチ/パッチ- aa cvs ci 

すべてがupdates/additionsを包装することに注意してくださいドック/ pkg -
変化!それのこのファイルuptodateを保つのがとても重要な、それがそうだろ
う原因は、www.netbsd.orgで自動的にいくつかのページを更新するために、ス
クリプトから使いました。


 5つのPLIST *問題 =============== 

このセクションは、PLISTで取りあつかっている場合にはファイルのそれが注
意を取る必要があるいくつかの号に宛名を書きます(または、ファイル、下を
見て下さい! )。


 種々の5.1  ================= 

 * RCSのID : 確かにいくらかの(どんな) PLISTファイルで最初の物としてRCS
のIDラインを加えますあなた書いて下さい: 

 @コメント< $ > NetBSD < $ > 

 * ranlib : 小包がリムーブされるときに、彼(それ)らがトラブルを引き起こ
すだろうのであなたのPLISTファイルへいくらかの(どんな) ranlibコマンドを
置かないで下さい。ちょうど--それが通常します--造り-プロセスは、もちろ
ん(あえて)ranlibを走らせます、そして、あなたが今をうっかり忘れることが
できることを確かめて下さい。FreeBSDからポートを使うときに、今は、通常
単に問題となります。

 * ldconfig : 彼(それ)らが問題を生じさせるだろうのであなたのPLISTファ
イルへいくらかの(どんな) ldconfigコマンドを置かないで下さい。すべての
共通オブジェクト・キャッシングは、NetBSDで、(あなたが「オートマティッ
クの共通オブジェクト操作」メッセージがわかるときに、今が起こります)自
動的に終わりました、そして、したがって、あなたは今をうっかり忘れること
ができます。もしいくらかの(どんな)共通オブジェクトが小包で見つけられれ
ば、彼(それ)らは、、それを必要とするプラットフォームでldconfigを走らせ
て、自動的に扱われた、および別でないでしょう。FreeBSDからポートを使う
ときに、今は、通常単に問題となります。

 * $ { MACHINE _ ARCH }、$ { MACHINE _ GNU _ ARCH } : emacs、およびperl
のようないくつかの小包は、彼(それ)らが彼(それ)らのファイルをインストー
ルするpathnamesへ(その)アーキテクチャーについて彼(それ)らが基礎を置か
れたインフォメーションを埋め込みます。このケース、PLISTが前に実際には
使われて、予備的処理をされるだろうハンドル、およびシンボルへの" $ { MACHINE
_ ARCH } "取り替えられるでしょうに(よって)何" sysctl - n hw。マシン_ア
ーチ"与えます。同じこと(もの)が終わりましたときにはストリング$ { MACHINE
_ GNU _ ARCH }どこかにPLISTで埋め込まれます- GNU autoconfigureを使う小
包で今を使って下さい。

 遺産ノート:そこは、かつては「uname - mだ」のアウトプットによって取り
替えられた、しかしもはやサポートされないでリムーブされた" < $ ARCH > "
(で)シンボルでした。

 * $ { OPSYS }、$ { OS _ VERSION } : 今をして、PLISTのこれらの二つの変
数を使うために。いくつかの小包は、いくつかのパスへos名前、およびバージ
ョンを埋め込みたいです。$ { OPSYS }「uname - s」からアウトプットによっ
て取り替えられるでしょう、$ { OS _ VERSION }「uname - r」が与えるもの
へのセットになるでしょう。

 * Manpage -圧縮: もしMANZがセットされれば、Manpagesは、圧縮されたフォ
ームに取り付けられているべきです( bsdで。自分自身の.mk)、そしてそうで
ないときは展開しました。PLISTファイルで今を取り扱うために、「.gz」とい
うサフィックスがmanpagesがMANZに一致して、MANCOMPRESSEDがセットされる
ことのために自動的にアペンドします/リムーブされますまたはない、詳細は
上を(で)見て下さい。PLISTファイルのこの変更は、それ自身でpkg / PLISTで
はなくそれの1コピーで終わりました。


 5.2のMD / MI対一般のPLIST  =========================== 

時々、pkg / PLISTのパッケージング・リストは、プラットフォームの間で違
います、例えば、その中に入れば、サポートは解放を共有しました、そして、
もう一方はしません。今に宛てるために、フックは、小包のMakefileで条件で
定義されたファイルが自由にセットしたPLISTを提供するために、NetBSDパッ
ケージ・システムへ紹介されました。


 5.2.1 $ PLIST _ SRC  ================ 

1以上のファイルを使うためにPLISTのための情報源がバイナリー・パッケージ
を発生させるときに使ったので、そのファイル(たち)の名前へのかわりやすい
PLIST _ SRCをセットして下さい。ファイルは、後で物の連結されたネコ( 1 )、
および注文を使うことが重要な問題だということであって、下を見ます。


 PLIST -ミの、PLISTがmd.sharだった、PLIST - md.staticの5.2.2  =================
=============================== 

もしPLIST _ SRCがセットされなければ(その普通のケース)、およびもしそこ
がpkg/PLIST-mi、およびpkg/PLIST-md.sharedにとって(の)いかなるpkg/PLIST、
システムが見る小包でなければまたはpkg / PLIST - md.static共有された解
放を取り扱うことができるプラットフォームのために違いを取り扱いますまた
はない。PLIST -ミが動的な独立のファイル、PLIST - md .*が依存しているフ
ァイル(しないアーキテクチャーの間で違うかもしれない)がサポートするマシ
ンを含むマシンを含みます解放/共有します積み荷。現在、perl -小包で使わ
れて、およびアルファのperl5がまだperl / Tkのように拡張の動的な積み荷を
サポートしないので、今は唯一です、PLIST。ミ-静止ですアルファ( pmax、お
よびパワーPCの他に)でまた使われます。perlが動的な積み荷のために修正し
たときに、アルファは、希望に満ちてすぐにリムーブされるでしょう。

(ファイルがPLIST - md.staticのPLIST -ミの"「または」PLIST -ミのPLIST -
md (の一方)への設定PLIST _ SRCによって実行されるMI/MD PLISTのこの操作。
"を共有して、/usr/pkgsrc/mk/bsd.pkg.mkを見て下さい)。


 PLIST *ファイル(たち)の5.2.3注文 ================================= 

@ dirrmステートメントのオーダリングに関連して1つのgotchaがあります:フ
ァイルPLIST --ミ、およびPLIST . md --として、いくらかの(どんな) MD @ dirrm
の*マスト(TM)の後を追ういくらかの(どんな) MI @ dirrm指令は、PLIST .md-*
ファイルに入ります{共有された/静止です}正確にこの注文で連結されます。
もしMIディレクトリーがPLIST -ミにリストされれば、それは、MDディレクト
リーの前にリムーブされるでしょう、(働かないだろう)。

例えば、もしあなたが以下のdirsを持っていれば: foo/mi foo/mi/md 

それから、PLIST -ミは含みます: <何でもない> 

そして、PLIST - mdの.*は含みます: @ dirrm foo/mi/md @ dirrmフー/ミ

今は、複製されるいくつかの@ dirrmステートメントに至るでしょう、しかし、
すべてが適切にリムーブされるということを確認することは、唯一の方法です。
PLIST _ SRCがいくつかの小包に特有の設定にセットされるときに、同じ心配
は、取られなくてはいけません。 小包のための修正の6つのノーツ ==================
=========== 

 CPPが定義する6.1  =============== 

NetBSDへのアプリケーションを移植するために、そこでそれがコンパイルして
いるシステムを判断することができることは、通常コンパイラーに必要です、
そして、プロセッサーの前ですCが今をすることができるように、我々は定義
を使います。

その本当に短気ですちょうど多くのFreeBSDポート(NetBSD世界で小包と呼ばれ
る)がCPP定義__ FreeBSD __に頼ると述べるべきです。今は倹約して使われる
べきです、というのも、FreeBSD -詳細は備えます、しかし、運わるく、今は、
必ずしもその事件ではありません。ナンバーは、また、CPU型がインテル、ベ
ースのリトルエンディアンCPUだという事実に頼ります。

テストするために、4.4のBSDが引き出したシステムで作動しているのにかかわ
らず、あなたは、言われたシステムでBSD定義(定義される)を使うべきです。

 #は含みます< sys / param.h > 

それから、あなたは、条件法を利用したBSDに特有のあなたのポートの一部を
取り巻くことができます: 

 #ときには(定義します( BSD ) && BSD >= 199306 )  ...  # endif 

どうぞ倹約して__ NetBSD __定義を使って下さい-それは、単に、他の4.4 - lite
のプレゼントがBSDsを引き出したということでないNetBSDの特徴に適用される
べきです。

美の見地からのみとすれば、あなたは、また、__ FreeBSD __ = 1を定義して
その時単にFreeBSDポートを使うことを避けるべきです。


 6.2の共用ライブラリ- libtool  ============================== 

異なるオブジェクト・フォーマットがa.out、および小妖精のような状態で、NetBSD
は多くの異なるマシンをサポートします、そしてそもそも共用ライブラリ、お
よび動的な積み荷をする能力を変えます。今に付随するために、veryingコマ
ンド、およびオプションは、その絶対に正しいことを得るために、コンパイラ
ー、リンカなどにパスされる必要があります、(もしあなたが物をテストする
ために(必ずしも)あなたによってすべてのマシンを持たなければ特にとっても
苛立たせることができる)。「libtool」pkgは、それがちょうどセットから静
電気および動的なライブラリ(両方)を構築する方法を我々の情報源がファイル
するかを「知っている」ので、ここを(で)助けることができます、従ってプラ
ットフォーム独立です。

「libtool」を使うために、libtool - pkgで造り-属国を加えて、それを構築
するためのlibtoolのライブラリを使うためにその時pkgの情報源を改変してそ
してあなたのpkgのパッチ-ディレクトリーに起こっているパッチを加えて下さ
い。

ここに7シンプルなステップにpkgでlibtoolを使う方法があります: 

1. USE _ LIBTOOL =を加えます小包Makefileへのはい。

2. ライブラリ・オブジェクト、使用のためです" $ { LIBTOOL } --モード=が
コンパイルします$ { CC } "その場に、$ { CC }。あなたは、ライブラリが与
えられたMakefileで構築されていてさえすれば、CCの定義にそれをさらに加え
ることができました。これが、写真およびnon -写真のライブラリ(両方)は、
反対します、したがって、あなたが持っている必要がない造りは共有された、
および共有されなかったライブラリ規則を分けるだろうかと命令します。

3. ライブラリのリンキングのために、いくらかの(どんな)「ar」、「ranlib
」、および「ld - Bshareable」コマンドをリムーブして、そしてかわりに使
って下さい: 

 $ { LIBTOOL }--モード=リンク立方センチ・メートル- o $ {。目標:。=.la }
$ { OBJS :。o =.lo } - rpath $ {接頭辞} /解放--バージョン--情報専攻:未
成年

 ライブラリは、.la拡張を持っているために、変えられます、そして、オブジ
ェクトが.lo拡張を持っているために変えられることに注意して下さい。必要
に応じてOBJSを変えて下さい。これは、自動的に、.aのすべてを作り出します、
so.major.minor、そして造りディレクトリーの小妖精symlinks (必要なら)。

4. 彼(それ)らがインストールされるこれらのライブラリ--以前--に依存する
プログラムをリンクするときに、立方センチ・メートル、あるいはldラインを
前に置いて下さい" $ { LIBTOOL } --モード=リンク"、そしてそれは、正しい
ライブラリ(静止の、あるいは共有される)を見つけるでしょう、しかし、どう
ぞlibtoolがあなたにLの相対パスを明示させないだろうことを知っていて下さ
い(例えば- L ../somelib)、それがあなたに.laファイルである(べき)そのア
ーギュメントを変えることを強いるよう試みているという理由で。例えば: 

 $ { LIBTOOL }--モード=リンク$ { CC } - o someprog - L../somelib - lsomelib

 働かないでしょう;それは、変わられる必要があります: 

 $ { LIBTOOL }--モード=リンク$ { CC } - o someprog ../somelib/somelib.la

 およびそれがしますライブラリとのDTRT。ときにはあなた*マスト(TM)は、L
との相対パスを使います、そして、あなたは、それをインストールする前にこ
のプログラムを走る予定ではありません、もしあなたがあなたのLコマンドで
サブディレクトリー「.libs」を加えれば、あなたは、このプログラムのリン
ク、およびインストールの間にlibtoolの使用を省くことができます: 

 $ { CC } - o someprog - L../somelib/.libs - lsomelib 

5. ライブラリをインストールするときに、インストール、あるいはcpコマン
ドを前に置いて下さい" $ { LIBTOOL } --モード=インストール"、そしてライ
ブラリ名前を.laに変えます。例えば: 

 $ { LIBTOOL }--モード=インストール$ { BSD _ INSTALL _ DATA } $ { SOMELIB
:。=.la } $ {接頭辞} /解放

 これは、静止の.a、共用ライブラリ、いくらかの(どんな)必要なsymlinks、
および走行「ldconfig」をインストールするでしょう。

6. あなたのPLISTで、.a、.la、を含んで下さいおよび。so.major.minorファ
イル。小妖精symlinkファイルを含まないで下さい;それはオートマティックで
す。

というのも、GNU PKGS THATは、すでにLIBTOOLをサポートします: 加えますUSE
_ LIBTOOL =イエス小包Makefileに。あなたがおそらくは改変する必要がある
かもしれませんスクリプトを「構成して」それ自身のlibtoolを(それのために)
調べてまたは構成しないで下さい。libwww pkgを参照してください、pkgにバ
イパスを通す速い方法のためのパッチ- ab自身のlibtool。


 6.3のFreeBSDポートのGotchas  ============================ 

FreeBSDポートからパッチを使ったときにgotchasに関してMakefile問題( MANx、
CATx、MANCOMPRESSED、ldconfig、RCS IDs )、およびセクション4.3のための
セクション4.1を参照して下さい。

FreeBSDポートの最も大きい問題の1つがまた多くの彼(それ)らが彼(それ)らが
すると仮定することが/usr/localへ、尊敬するのではなくインストールすると
いうことです何か$ { PREFX }適切にセットすること。これを変えるために、
あなたの小包Makefileへ下記のものといったことを加えて下さい: 

事前(に)構成して下さい: fのためですで`見つけます$ { WRKDIR } -型f -印
刷です| xargs grep - l’/ usr /ローカル’` ;して下さい\  $ { SED } - e
「s:/usr/localです:」$ {接頭辞}’:g’< $$ f > $$ f.pdone && $ { MV } $
$ f.pdone $$ f ;\はされました

これは、sysutils / rttyパッケージから取り出されます;これがあなたの小包
のために働くことは確かであって下さい-例えば、それは、/usr/localでいく
つかの物を探すために、実際には意味があるかもしれません。したがって、(
必ずしも)盲目的に/usr/local!のすべての出来事を取り替えません

FreeBSDは、PLISTで小包Makefileで、対応するエントリーなしでマニュアルペ
ージを列挙することに決めました。あなたがこのように加える必要があるでし
ょう何かMAN [ 1 - 8ln ] PLISTに、削除する前にファイルしますそのMAN [ 1
- 8ln ]定義。同様にMLINKSをもちますおよびネコ[ 1 - 8ln ]エントリー。

PLISTのmanpagesの側のノート:彼(それ)らが彼(それ)らを圧縮することなしで
manpagesをインストールするときに(で)さえ、我々は、多くのFreeBSDポート
がPLISTで.gzページがあるようであるので、そこで(に)いくらかの(どんな)通
知にいくらかの(どんな) .gz注意を払いません;むしろ、我々は、我々自身の.gz
がMANZによるとそこを(で)接尾辞としてつけると付け加えます。PLISTのマニ
ュアルのページ名前が.gzサフィックスを持っているかどうかにかかわらず、
要するに、それは重要ではありません-もしそこにまだいない1(人)を必要とす
れば、それは自動的にアペンドされるでしょう、そして、もし必要とされない.gz
サフィックスがあれば、それは自動的に削除されるでしょう。

構築するときに、いくつかの小包は、bsd -スタイル.mkファイルを使います、
そして、したがって、インストールされるいくらかの(どんな)マニュアルペー
ジは、もしMANZがセットされれば、gzipを(が)圧縮されるでしょう、またはな
いもしMANZがセットされなければ。もし小包がbsd -スタイル.mkファイルを使
えば、かわりやすいMANCOMPRESSED _ IF _ MANZは、小包Makefileで「はい」
の価値にセットされるべきです。


 6.4の作者へのフィードバック ========================== 

もしあなたがもしあなたがそれをいろいろなNetBSD、あるいはあなたがソフト
ウェアを改良したかのもとで走らせるために特別のステップをする必要があっ
たらいくらかの(どんな)バグをあなたが利用できるようにする小包で見つけた
ら他の方法、確かにそのプログラムのオリジナルの作者へ(戻るように)これら
の変化をレポートして下さい!その種のサポートでのみ、プログラムの次回リ
リースは、これらの修正を編入することができます、そして、また、NetBSDパ
ッケージ・システムを使わない人々は、あなたの努力から勝つことができます。

フリー・ソフトウェアのそのアイデアをサポートして下さい! 


 造りが処理する7  =================== 

プログラムを構築するための基礎的なステップは、いつも同じです。最初に、
ローカル・システムへの、およびその時抽出されて、プログラムの情報源( distfile
)は、持って来られなくてはいけません。(通常コンパイルすることによる) NetBSD
で適切にコンパイルする(べき)いくらかの(どんな)パッチが適用される後に、
ソフトウェアは、構成してそれから構築することができます、そして、最後に、
発生させられたバイナリーなどは、システムの場所に置かれることができます。
これは、正確にNetBSDパッケージ・システムによって実行されたステップです、
(中心のMakefile、/usr/pkgsrc/mk/bsd.pkg.mkで連続した目標として実行され
る)。


 7.1のプログラム場所 ==================== 

次のセクションでNetBSDパッケージ・システムによって実行されたプロセスの
概略を述べる前に、ここにプログラムはインストールされます、そして、どち
らの変数がこれに影響する場所に簡潔なディスカッションがあります。

オートマティックのかわりやすい接頭辞は、どこで(に)最終のプログラムのす
べてのファイルがインストールされるだろうかを示します。それが$ LOCALBASE
に通常セットされます( / usr / pkg )、または「クロス」カテゴリーのpkgs
のための$ CROSSBASE、もしUSE _ IMAKE、USE _ MOTIF、あるいはUSE _ X11BASE
がセットされれば、その価値が$ X11BASEのそれになるにもかかわらず。価値$
{接頭辞}これらのファイルへの道が符号化されるプログラムの情報源のいろい
ろな場所に置かれるニーズ;これで詳細に関してセクション4.3および6.2を参
照して下さい。

使って、下記のものの後を追う(べき)これらの変数のどちらが規定するかを選
ぶときに: 

 * $ {接頭辞}いつも現在のpkgがインストールされるだろう場所を指します。
pkg自身の施設パス、使用を参照するときに$ {接頭辞}。

 * $ { LOCALBASE }どこで(に)すべてのnon - X11 pkgsがインストールされる
かです。あなたがa - Iを構成する必要があるかまたは- L見つける(べき)コン
パイラーへのアーギュメントは、含みます、そして、ライブラリがもう一つの
non - X11 pkg、使用によってインストールしました$ { LOCALBASE }。

 * $ { X11BASE }どこで(に)実際のX11ディストリビューションがインストー
ルされるかです。捜すこと--スタンダードの-- X11が含むときに( pkgによっ
てインストールされた人(もの)ではなく)、使って下さい$ { X11BASE }。

 *彼(それ)らが/etc/mk.confで構成オプションによってはX11BASEまたはLOCALBASE
(の一方)に取り付けられているかもしれないので、X11基礎とされたpkgsは特
別です。あなたが見つける必要があるかは、含みます、または、あなたがそう
する必要があるUSE _ IMAKE、USE _ MOTIF、あるいは(すなわち)そのpkg Makefile
のUSE _ X11BASE、を持っているpkgによってインストールされたライブラリが
--両方--使います$ { X11BASE }および$ { LOCALBASE }。


 7.2の主な目標 ================ 

bsd.pkg.mkで定義された造りプロセスの間に使われた主な目標は: 

 *フェッチして下さい: これは、/usr/pkgsrc/distfilesでローカル・システ
ムでDISTFILES、およびPATCHFILES (小包のMakefileで定義されたとして)がそ
うである変数のファイル(たち)既知の事実が、与えれば、調べるでしょう。も
し居なければ、彼(それ)らは、かわりやすいPATCH _ SITESのサイト(たち)既
知の事実からのフェッチされた使っているftp ( 1 )になるでしょう。PATCH _
SITESの場所(たち)は、URLの形であって、そしてftp ( 1 )が彼(それ)ら(両方)
を理解するので、ftp://-、およびhttp://-URLsであることができます。

 *チェックサム: distfile (たち)がフェッチされる後に、彼(それ)らのMD5チ
ェックサムは、ファイル/ md5ファイルで保存されたchecksumsで発生させて比
べられます。もしchecksumsがつり合わなければ、造りはアボートされます。
例えばある悪影響がある力、あるいはネットワークlossageによって、これは、
同じdistfileが建物に利用される、およびdistfileが変えられなかったという
ことを確認するはず(こと，予定)です。

 *抜粋: distfilesがローカル・システムに出席しているときに、彼(それ)ら
が彼(それ)らが一般にある圧縮されたアーカイブ・フォーマット、ほとんどの
形で通常いるので抽出される必要があります。tar.gz。いくらかのdistfiles
が展開される必要がありさえすれば、展開される(べき)ファイルは、EXTRACT 
_ ONLYに置かれるべきです。もしdistfilesがそうでなければで。tar.gzフォ
ーマット、彼(それ)らは、設定EXTRACT _ CMD、抜粋--以前-- ARGおよび／ま
たは抜粋--以後-- ARGによって抽出することができます。

 *パッチ: 抽出の後で、小包のパッチ・サブディレクトリーでPATCHFILES、お
よび参列者によって指名されたすべてのパッチは、適用されます。彼(それ)ら
が適用される前に、.Z、あるいは.gzに終わるPatchfilesは、展開されます、.orig、
あるいは.rejに終わるファイルは、無視されます。パッチする(べき)いくらか
の(どんな)特別のオプションは、( 1 )PATCH _ DIST _ ARGSで手渡すことがで
きます。より多くの詳細に関してセクション4.3を参照して下さい。

 *構成して下さい: ソフトウェアのほとんどの断片は、NetBSDで利用できるヘ
ッダ・ファイル、システム・コール、およびライブラリ・ルーチンに関するイ
ンフォメーションを必要とします。これは、構成として知られているプロセス
であって、通常自動化されます。たいていの場合は、スクリプトは、情報源の
供給を受けます、そして、そのinvokcationは、ヘッダ・ファイル、Makefiles、
etcの産出の結果になります。

 プログラムがそれ自身のものを付けていないかは、スクリプトを構成します、
1(人)は、「構成する」と呼ばれる小包のスクリプト・ディレクトリーに置か
れることができます。もしそうなら、それは、実行された使っているsh ( 1 )
です。

 もしプログラムのdistfileが含めば、それ自身のものはスクリプトを構成し
ます、これは、設定HAS _ CONFIGUREによって呼びかけることができます。と
きにはそのスクリプトがautoconfスクリプト、GNU _ CONFIGUREがかわりに明
示されるべきGNUであることを構成して下さい。事件(どちらでも)、いくらか
の(どんな)アーギュメントでへのそのスクリプトがCONFIGURE _ ARGS変数で明
示することができることを構成して下さい、およびそのもしそれがデフォルト
「構成する」と異なればスクリプトの名前がCONFIGURE _ SCRIPTでセットする
ことができることを構成して下さい。

 もしプログラムが構成のためのImakefileを使えば、適当なステップは、はい
への設定USE _ IMAKEによって呼びかけることができます。(もしあなたのみが
$ X11BASEに取り付けられている小包、しかし走らせられないxmkmfが欲しけれ
ば、かわりにUSE _ X11BASEをセットして下さい! ) 

 *造り: 一旦構成が起こったら、ソフトウェアは、構築するために目標として
$ ALL _ TARGETで$ MAKEFILEで$ MAKE _ PROGRAMを呼びかけることによってNetBSD
の上に構築されることができます。もしUSE _ GMAKEがセット、そうでないと
きは「作って下さい」。なら、defaultのMAKE _ PROGRAMが「gmake」ですMAKEFILE
は、デフォルトで「Makefile」にセットされます、そして、ALL _ TARGETは、
「すべて」にデフォルトします。これらの変数のどれ(か)は、デフォルト造り
プロセスを交換する予定であることができます。

 *インストール: 一度、造り段階は完成しました、ユーザーのために、最終の
ステップは、パブリックティレクトリでソフトウェアをインストールするはず
(こと，予定)です。造り-目標でのように、$ MAKE _ PROGRAMは、より遅く、
デフォルトすることが「インストールすれば」、かわりにここでの$ MAKEFILE
で、しかし$ INSTALL _ TARGETで呼びかけられます( "がもしUSE _ IMAKEがセ
ットされれば.man"をインストールするplus )。

もしいかなる目標も明示されなければ、デフォルトは、「造り」です。もしそ
の後のリクエストされれば、全く事前の段階は作られます:例えば「造りを作
る」がまた同等のものを実行するでしょう、: 

 メイクは、チェックサムが構成するパッチが造りを作る抜粋メイクを作るメ
イクをフェッチします


 他の7.3役立つ目標 ========================= 

 * pre /郵便- *前のセクションで述べられた主な目標のどれ(か)のために、
二つの補助の目標は、" "前および主な目標の名前のための接頭辞として使わ
れた" "後で存在します。プログラムがであるところでは、スクリプト、ある
いはインストール目標を構成する特別の構成、あるいは施設ステップ、例えば、
が省いたことを認めて、これらの目標は、目標が呼ばれる主要部の前に、およ
びそれ(そこ)の後で呼びかけられます。与えられた時で実行されるだろう小包
のスクリプト-サブディレクトリーの補助の目標、同名のスクリプトが置くこ
とができるこれのどれ(か)のために、セクション4.5を見て下さい。

 * - *をして下さい: これを修正するために、主な目標の1つは、その間違っ
ている物をするべきですか、そして、いかなる変数もないべきですかあなたが
それを再定義することができますその- *は目標にしますか。(そのそれ自身で
目標を再定義することを述べますその- *は、プリ- *、および大急ぎで- *目
標が今はもう呼ばれないだろうので、悪はアイデアかを目標にしますか、etc。)
あなたがしません通常これをする(べき) ned。

 *再度インストールして下さい: もしあなたは、「インストールをする」をし
ました、そして、あなたがあるファイルが適切にインストールされなかったこ
とに気づいたら、あなたは、この目標をもつ施設を繰り返すことができます、
(「すでにインストールされた」フラグを無視するだろう)。

 * deinstall : この目標は、_が( 1 )カレントディレクトリ、有効にdeを(が)
インストールすることで小包を削除するpkgをします。以下の変数は、振る舞
いをチューニングするために、コマンドラインで、または/etc/mk.confで使う
ことができます: 

 - PKG _ VERBOSE : _が( 1 )コマンドを削除するpkgに" - v "を加えて下さ
い。 - DEINSTALLDEPENDS : 与えられた小包を(依存する)要求するすべての小
包をリムーブして下さい。これは、与えられた小包によって捕まえられたかも
しれないいくらかの(どんな)小包をリムーブするために、使うことができます、
例えば、もし「deinstall DEINSTALLDEPENDS = 1を作る」がx11 / kdeで終わ
ったら、これは、全体のKDEをリムーブしそうです。_が削除するpkgに" - R "
を加えることによるワークスは、ラインを命令します。

 *更新: この目標は、最新のバージョンに現在の小包が、更新されることの原
因となります。小包、およびすべての依存している小包は、初めてdeinstall
です、それから、対応する小包の最新版は、コンパイルしてインストールされ
ます。これは、これらの小包のためにその時連続した「deinstallを作って」、
「きれいに作って」、そして「インストールをする」をして、手動でどちらの
小包が現在インストールされると述べることに類似しています。

 前の「更新を作る」がどういうわけか中断された場合には、あなたは、小包
更新することを再開するために、「更新」目標を使うことができます。しかし、
あなたが「きれいに作る」と呼んであるいはそうでないときは扶養家族パッケ
ージのリストをリムーブしないことを確かめます$ { WRKDIR }。そうでないと
きは、あなたは、インストールした扶養家族パッケージと一緒に自動的に最新
の小包を更新する能力を失います。

 以下の変数は、「更新を作る」の振る舞いを変えるために、コマンドライン
で、または/etc/mk.confで使うことができます: 

 - DEPENDS _ TARGET : 目標をインストールして更新された小包、および扶養
家族パッケージのために使って下さい。「インストールする」(べき)デフォル
ト。例えば、「更新DEPENDS _目標=パッケージを作る」

 - NOCLEAN : 更新した後できれいに掃除しないで下さい。調査のための見近
な更新された小包、あるいはその他の仕事情報源を残すことが意図する役に立
つあなたが欲しいか。(以下の「きれいな-更新」目標を見る)あなたが結局は
ソース・ツリーをきれいにすることは確かであって下さい、または、あなたの
つぎに「作って」あるいは「更新を作って下さい」。でまだぶらぶらと過す古
いソース・コードで面倒なことになってもよいです

 - REINSTALL : 使用(それのかわりに)「再度インストールする」$ { DEPENDS
_ TARGET }更新されるすべての小包のために。あなたが使うことの含蓄を知っ
ていることは確かです使っている場合にはこれほどかわりやすい目標を「再度
インストールして下さい」。

 *きれいな-更新: もし「更新を作る」がカレントディレクトリから呼ばれた
ら更新されるだろうすべての小包のためにソース・ツリーをきれいにして下さ
い。( e.g。呼んだ後で、「更新を作って下さい」)この目標は、最新の小包(
あるいはその依存している小包のどれ(か) )が、すでにdeinstallだったら、
使われるべきではありません、または、あなたはいくつかの小包を失うかもし
れないと、あなたは更新に意図しました。経験に基づく方法として:初めてあ
なたが「更新を作る」、および唯一のあなたが汚い小包を持っているかをツリ
ーと呼ぶ時単にこの目標--以前--を使います( e.g。あなたがNOCLEANを使った
か)。以下の変数は、「きれいな更新であるようにする」の振る舞いを変える
ために、コマンドラインで、または/etc/mk.confで使うことができます: 

 -はっきりした_ DIRLIST : 「きれいに作る」の後で、この小包のために更新
にディレクトリーのリストを再建しないで下さい。もし「更新を作る」がうま
くあなたが更新に欲しかったすべての小包をインストールしたら単にこれを使
って下さい。普通は、これは、「更新を作る」で自動的に終わりましたが、NOCLEAN
変数によって抑えられたかもしれません(上を(で)見る)。

 * readme : この目標は、README.htmlファイルを発生させます、(ネットスケ
ープ( pkgsrc/www/mozilla )といったブラウザを使うのが見られてあるいはオ
オヤマネコ( pkgsrc/www/lynx )であることができる)。生成ファイルがいくら
かの(どんな)小包への参照を含んでそれはそこにありますその$ {小包}ローカ
ルなホストのディレクトリー。生成ファイルは、FTP _ PKG _ URL _ HOST、お
よびFTP _ PKG _ URL _ DIRに基づくURLを参照させることができます。(例え
ば、もし私がローカル・マシンでバイナリー・パッケージを指したREADME.html
ファイルを発生させたかったら、ディレクトリー/usr/packagesで、FTP _ PKG
_ URL _ HOST = file://localhost、およびFTP _ PKG _ URL _ DIR =/usr/packages
をセットして下さい。その$ {小包}ディレクトリーおよびそのサブディレクト
リーは、すべてのバイナリー・パッケージにとって検索されたでしょう。) 

 * readme -すべての: この目標を使ってNetBSD小包コレクションで現在利用
できて、彼(それ)らが属するカテゴリー、および短い記述との小包の中でリス
トを含むファイルREADME - all.htmlを作り出して下さい。このファイルがpkgsrc/*/REA
DME.htmlファイルからコンパイルされます、だから確かにこれ--以後--を走ら
せて下さい「readmeを作る」。

 * cdrom - readme : これは、とてもreadmeとだいたい同じです:目標(上を(
で)見る)、しかし使われることは、CD-ROMに書かれる(べき) pkgsrcツリーを
発生させるときに、ですか。この目標は、またREADME.htmlファイルを作り出
して、CDROM _ PKG _ URL _ HOST、およびCDROM _ PKG _ URL _ DIRに基づくURL
を参照させることができます。

 *ショー- distfiles : この目標は、どちらのdistfiles、およびpatchfiles
が小包を構築する必要があることを示します。

 *ショー- downlevel : この目標は、何にも小包がインストールされないこと
を示しません。もしこの小包のバージョンがインストールされても、pkgsrcの
このバージョンで供給されたバージョンでなければ、警告メッセージは表示さ
れます。この目標は、downlevelはあなたのインストールされた小包のどちら
かを示すために、使うことができます、そして、したがって、古い版は、削除
することができます、そして、最新のものは加えました。



 デバッグする8  =========== 

すべてのgotchasを調べてみるために、FreeBSDポートから小包を構築するとき
に、ここに小包を働くようにするために、私がするステップがあります。これ
が単にいくつかのデバッグしている助力で、前のセクションで基本的に説明さ
れたものと同じであることに注意してください。

 - FreeBSDコレクションからポートを検索して下さい - 小包のMakefileでRCS
- IDの修正、セクション4.1を見て下さい。 - 変わらないFreeBSDソースを輸
入して下さい(あなたがcvsアクセスがあるという場合にだけ、必要とされませ
んでした 他に) : ( cd .../pkgsrc/category/pkgname ; cvs輸入pkgsrc/category/pkgn
ame \ FREEBSD FreeBSD -カレント- yyyy - mmの- dd ) -もしあなたがCV輸入
をしたら、以下の修正を適用するために、それを調べてみて下さい(もしあな
たがCVアクセスがなければ必要とされませんでした! )  - 必要なら、Makefile、
修正を見て下さい;セクション4.1を見て下さい。 - パッチへの注目、適当で
ないなら、気づいて下さい - pkg / PLISTをご覧ください、加えますa " @コ
メント< $ > NetBSD < $ > " (それで)並びますその いくらかの(どんな) PLIST
ファイル(セクション5を見る)の始まり。-作って下さい-もし何かがokでなけ
れば、修正して下さい;パッチのために:ファイルを修正して、それからdiffを
再(び)発生させて下さい:’diff - buのfoo.origフー> ../../patches/patch-xx
’( mvパッチ- xxパッチ- xx.orig前に) ;もし前のパッチからいかなるfoo.orig
もなければ、どこかに確かにファイルの古い版を持っていて下さい;再(び)繰
り返します:)  - もしすべてがOKを構築すれば:接触/tmp/bla  - インストー
ルをして下さい - /usr/pkg/により/usr/X11R6/ -新しい/tmp/bla >/tmp/xを
見つけて下さい (またはあなたがそうすることをLOCALBASE、およびX11BASEを
セットしたあらゆるもの) - pkg _が削除しますblub - /usr/pkg/により/usr/X11R6/
-新しい/tmp/bla:を見つけて下さいもしこれがいくらかの(どんな)ファイルを
育てれば、彼(それ)らは、pkg / PLIST (TM)でミスしています;彼(それ)らを
加えて下さい。- /tmp/xに対してpkg/PLIST*を比べて下さい、前の1(人)を修
正します(ソート/tmp/x >/tmp/x2 ;ソートpkg/PLIST >/tmp/P ; sdiff /tmp/x2
/tmp/P )  - メイクは&&メイク・パッケージを再度インストールします - pkg
_が削除しますblub  - 「/usr/pkg/に/usr/X11R6/ -型のよりf -新しい/tmp/bla
を見つける」は、何(か)を見つけるべきではありません 今 - _が加えるpkg...
/ blub.tgz  - それで遊びます:)  - _が削除するpkg-まだ、いかなるファイ
ルも残されるべきではありません(レが走った上記の発見)  - 提出して下さい
(またはもしあなたがcvsアクセスがあれば約束する) ;セクション10を見て下
さい。


******************************************************************ここから翻訳中
 小包システムの9つのFAQ、＆特徴 =======================================

 GNU autoconfigを利用した9.1の小包 ================================= 

もしあなたの小包がGNU autoconfを使えば、あなたの小包のMakefileに下記の
ものを加えて下さい: 

> GNU _ CONFIGURE =はい

これがアペンドすることに注意して下さい--接頭辞= $ {接頭辞} _ ARGを構成
するために、したがってあなたは、あなた自身でそれをする必要がありません、
そして、これは、欲しいものでないかもしれません。


 他の9.2 distrib方法よりも。tar.gz  ======================================

あなたの小包が異なるディストリビューション方法を使うか。tar.gz、小包へ
の注目をplan9 / sam ( gzippedのシェル・アーカイブ( shar )を使う)と考え
て下さい、しかし速い解決は、DISTNAMEフィールドの後で名前へのEXTRACT _ 
SUFXをセットしてあなたの小包のMakefileに下記のものを加えるはず(こと，
予定)です: 

> EXTRACT _ SUFX = . msg.gz > EXTRACT _ CMD = zcat >抜粋--以前-- ARG =
>抜粋--以後-- ARG =| sh 


 彼(それ)ら自身のサブディレクトリーを作り出さない9.3の小包 ====================
============================ 

あなたの小包は、自力でサブディレクトリーを作り出しません( GNUソフトウ
ェアが例えばするように)、しかし、カレントディレクトリの抜粋自身:ふたた
びplan9 / samを見て下さい、しかし速い答えは: 

> NO _ WRKSUBDIR =はい


 9.4のカスタム構成プロセス ================================ 

あなたの小包使用a奇妙ですスクリプトを構成して下さい:トップ・パッケージ
を参照してください、しかし、速い答えは: 

> HAS _ CONFIGURE =はい> CONFIGURE _スクリプト=は構成します> CONFIGURE
_ ARG + = netbsd13 


 彼(それ)らのDISTNAMEディレクトリーを内蔵しない9.5の小包 ======================
================================ 

あなたの小包は、その基礎のDISTNAMEから異なるディレクトリーを内蔵します
- tcl、およびtkパッケージを見て下さい: 

> WRKSRC = $ { WRKDIR }/${DISTNAME}/unix 


 9.6直ちにすべてのdistfilesをフェッチする方法 =================================
===== 

あなたが仕事、あるいは大学から一つのバッチ処理ですべてのdistfilesをダ
ウンロードしたいですが，そこであなたが走ることができません「メイクが、
フェッチします」。しかし、ftp.netbsd.orgにdistfilesのいかなるアーカイ
ブもありません、そして、ftp.freebsd.orgのもの(それ)は、それのためにい
かなるポートもない多くのdistfilesを含みます(まだ)。

ここでの答えがするはず(こと，予定)ですa "作りますフェッチして下さい-リ
スト" /usr/pkgsrc、および使用で、起こることはリストを作ります。


 フェッチする方法がファイアウォールの後ろからファイルする9.7  =================
============================ 

あなたのファイアウォールの後ろにそうでないインターネットであなたが他の
マシンと話をすることを可能にするために、もしファイアウォールの後ろに座
っていれば、あなたは、適切な代理のホストを明示しなくてはいけません。こ
れは、URLの形の環境変数です、例えば、アムダールで、マシンorpheus.amdahl.com
は、firewallsの1つです、そして、それは、代理のポート番号としてポート80
を使います。したがって、環境変数が似ている代理: 

 ftp _代理= ftp://orpheus.amdahl.com:80/のhttp _代理= http://orpheus.amdahl.com
:80/ 


 9.8のあなたのパッチがRCSのIDを含むか ====================================

パッチ・ファイルからRCS IDsを取り去る方法のセクション4.3を参照してくだ
さい。


 9.9 /etc/mk.confから変数を捕まえる方法 =======================================
======= 

MAKECONF、あるいは/etc/mk.conf経由で取って代わることができる小包を(が)
定義された変数の問題は、それが使われるので、メイク( 1 )が変数を広げる
ということですが、ステートメントのようなプリプロセッサを評価します( .if、
ifdefおよび。ifndef )そのままで読んで下さい。したがって、いくらかの(ど
んな)変数を使うために(/etc/mk.confでセットされるかもしれない) .if*ステ
ートメントの1つで、ファイル/etc/mk.confは、その.if*ステートメントの前
に含まれなくてはいけません。

/etc/mk.confを含む多くの特別の目的のための方法がそうしたよりも、それは
存在するべきなら、または、MAKECONF、それは存在するべきなら、いくらかの
(どんな)プリプロセッサ風の.ifの前に小包Makefileでpkgsrc/mk/bsd.prefs.mk
ファイルを含んで下さい、ifdef、または。ifndefステートメント: 

 含みます「../../mk/bsd.prefs.mk」

 .if定義します( USE _ MENUS )  ...  endif 


 9.10は、そこにpkgに関連するディスカッションのためのメーリング・リスト
です?  ======================================================== 

はい。我々は、小包に関する問題を議論するためのtech-pkg@netbsd.orgを使
っています。購読するにはして下さい: 

 エコーは技術- pkgを予約します|メールmajordomo@netbsd.org 


 9.11どのようにiは、受け身のFTPをするために、「メイクが、フェッチしま
す」を(に)話しますか?  ==================================================

あなたの/etc/mk.confファイルに下記のものを加えて下さい:受け身の_フェッ
チ= 1 


 他の小包の9.12の属国 =================================== 

あなたの小包は、何か別の存在する小包に依存するかもしれません-そして、
この属国を表すいろいろな方法があります。NetBSDは、BUILD _ DEPENDS、RUN
_ DEPENDS、およびDEPENDS定義をサポートします(用心して下さい:DEPENDS定
義は、FreeBSDの不賛成の意を表されたものと同じではありません、そして、NetBSD
は、これ以上FreeBSD LIB _ DEPENDS定義を使いません-それは、小妖精NetBSD
プラットフォームで問題があることがわかりました)。

[以下の例、BUILD _ DEPENDSおよびRUN _ DEPENDSで、属国にはフォーマット
があります:<ファイル> :<ディレクトリーそうすることを小包を含んで造り> 
[ :<段階> ]ときにはその<段階>、明示されません、それがデフォルトします
「インストールして下さい''。ファイルが含むかa’/’、それは、規則どおり
のファイルとして解釈されます-そうでないときは、名前は、実行可能なファ
イルだと取られます、そして、パスは、<ファイル>捜し求められます。規則ど
おりのファイルは、見つけられません、または、exectableのファイルは、パ
スにありません、それから、必需品前パッケージがソースから構築されるだろ
うかで<ディレクトリーそうすることを小包を含んで造り>。もし小包のこのバ
ージョンがインストールされなければ、DEPENDS定義は、構築するために、小
包を含んでパッケージ名(そのバージョン番号を含む)、およびディレクトリー
を明示します。] 

( a )もしあなたの小包がもう一つの小包から造りまでのファイルを必要とす
れば、印刷/ ghostscript5パッケージを見て下さい(それが造りの間にソース
・フォームに出席しているjpegソースに頼ります) : 

BUILD _ DEPENDS = ../../graphics/jpeg/${WRKDIR:T }/jpeg-6a:../../graphics/jpeg:
抜粋

( b )もしあなたの小包がそれ自身で構築するためにもう一つの小包を使う必
要があれば、これがBUILD _ DEPENDS定義を使いますが外側で段階を明示する
のが指定されました` ` :抜粋''で( a )上です。例は、印刷/ lyxパッケージ
です、そしてそれは、その造りプロセスの間にラテックス・バイナリーを使い
ます: 

BUILD _ DEPENDS =ラテックス:../../print/teTeX 

( c )もしあなたの小包がそれでリンクする(べき)ライブラリを必要とすれば、
これは、指定されたDEPENDS定義を使うことです。これの例は、印刷/ lyxパッ
ケージです、(構築するためにxpmライブラリ、バージョン3.4jを使う)。

DEPENDS + = xpm - 3.4j :../../graphics/xpm 

あなたは、小包依存でまたwildcardsを使うことができます: 

DEPENDS + = xpm - * :../../graphics/xpm 

バイナリー・パッケージを作り出している間に、これらのwildcardsが広げら
れるだろうことに注意して下さい。従って、彼(それ)らが作り出されたときに、
バイナリー・パッケージは、正確にインストールされたバージョンで依存する
でしょう。

( d )もしあなたの小包が正確に走ることができる(べき)ある実行可能ファイ
ルを必要とすれば、これは、指定されたRUN _ DEPENDS定義を使うことです。
それが走るときに、印刷/ lyxパッケージは、ラテックス、およびispellバイ
ナリーを実行することができる必要があります、そして、それは明示されます:

RUN _ DEPENDS =ラテックス:../../print/teTeX \ ispell :../../textproc/ispell


 他の小包との9.13の衝突 ================================== 

あなたの小包は、我々のpkgsrcツリーでもう一つの小包のように彼のシステム、
例えばファイルの同じあなたの小包インストールがセットしたかでユーザーが
すでにインストールすることができたかもしれない他の小包と衝突するかもし
れません。

この場合、あなたは、あなたの小包が衝突する小包(バージョン・ストリング
を含んで)のスペースseperatedリストへの衝突をセットすることができます。

例えば、pkgsrc/x11/Xaw3dおよびpkgsrc/x11/Xaw-Xpmのインストールは、同じ
共用ライブラリを提供します、従って、あなたはpkgsrc/x11/Xaw3d/Makefile:
でセットしました

衝突= Xaw -- Xpm -- (TM) 

そして、pkgsrc/x11/Xaw-Xpm/Makefile:で

衝突= Xaw3d - * 

小包は、自動的に、有名な接頭辞、および異なるバージョン・ストリングをも
つ他の小包と衝突するでしょう。「Xaw3d - 1.5」例えば、自動的に「Xaw3d -
1.3の」旧式のバージョンと衝突するでしょう。

 9.14のwwwホームページがあるソフトウェア ======================================
= 

NetBSDパッケージ・システムは、ホームページと呼ばれる変数を今、サポート
します。もし包装されるソフトウェアがホームページがあれば、Makefileは、
ホームページ変数でそのページのURLを含むべきです。変数の定義は、後援者
変数の後でただちに置かれるべきです。


 提出する10  ============= 

 *プリコンパイルされたバイナリー・パッケージ: 我々の方針は、我々が小包
がいくらかの(どんな) trojan馬etcを含まないことを保証するためにNetBSD開
発者から唯一のバイナリーを受け取るということです。これがおしっこにそう
ではありません誰(か)オフ、しかしむしろ我々のユーザーを保護すること! あ
なたは、まだ彼(それ)らを手にいれるためにあなたの手作りであってバイナリ
ーの小包を作り上げて世界にどこでか(場所)を言うのが自由です。

 *小包: 第1に、あなたの小包が十分に完成してコンパイルして走らせる小切
手;この書類のセクション8その他を見て下さい。それから、一つのディレクト
リーで好んですべてのファイルで、小包にとって必要とされたファイルの中で
gzippedのtarファイルを発生させて下さい。小包後援者がFTP、あるいはHTTP 
( WWW )を使ってそれをフェッチすることができる場所へのこのtarファイルを
置いて下さい。最後に、手紙をやって下さい- prあなたの小包のパッケージ名、
およびバージョン番号、短い記述を含む( pkg /コメントのコンテンツがOK )
カテゴリー「pkg」、概要、およびあなたのtarファイルのURLで。

 あなたが知らせられるでしょうときにはあなた手紙をやって下さい- prその
ように宛てられましたあなたは、tarファイルをリムーブすることができます。
**************************************************************ここまで翻訳作業中


 11 パッケージの簡単な例: bison
 ======================================= 

私は、FreeBSD のポート(ports)にないソフトウェアをさがし、GNU bison
を選びました。バークレーの yacc がすでにソースツリーに存在するので、
bison を使いたい人はいないでしょう。しかし、練習という意味では役に
たちます。


 11.1 ファイル 
 ========== 

このセクションのファイルの内容は、実際には 「> 」という接頭辞なし
で使用してください。


 11.1.1 Makefile
 =============== 

> # <$>NetBSD<$>
>  
> DISTNAME=       bison-1.25
> CATEGORIES=     devel
> MASTER_SITES=   ${MASTER_SITE_GNU}
>
> MAINTAINER=     thorpej@netbsd.org
> HOMEPAGE=       http://www.gnu.org/software/bison/bison.html
>  
> GNU_CONFIGURE=  yes
> INFO_FILES=     bison.info
>  
> .include "../../mk/bsd.pkg.mk"


 11.1.2 pkg/COMMENT
 ================== 

> GNU yacc clone.


 11.1.3 pkg/DESCR
 ================ 

> GNU version of yacc.  Can make re-entrant parsers, and numerous other
> improvements.  Why you would want this when Berkeley yacc(1) is part
> of the NetBSD source tree is beyond me.


 11.1.4 pkg/PLIST
 ================ 

> @comment <$>NetBSD<$>
> bin/bison
> man/man1/bison.1.gz
> @unexec install-info --delete %D/info/bison.info %D/info/dir
> info/bison.info
> info/bison.info-1
> info/bison.info-2
> info/bison.info-3
> info/bison.info-4
> info/bison.info-5
> @exec install-info %D/info/bison.info %D/info/dir
> share/bison.simple
> share/bison.hairy


 11.1.5 パッケージをチェックする 「pkglint」
 ===================================

NetBSD パッケージ・システムは、「pkglint」(pkgsrc/pkgtools/pkglint
ディレクトリにあります)とよばれるツールを含んでいます。このツールは
これらのファイルの内容をチェックするのを助けてくれます。一度インス
トールしてしまえば、このツールは非常に簡単に使うことができます。検査
したいパッケージのディレクトリに移動し、「pkglint」を実行するだけです。

> tron@lyssa:/usr/pkgsrc/devel/bison>pkglint
> OK: checking pkg/COMMENT.
> OK: checking pkg/DESCR.
> OK: checking Makefile.
> OK: checking files/md5.
> OK: checking patches/patch-aa.
> looks fine.

指定されたコマンド行の引き数(「man pkglin」を見てください)によっては、
よりきびしいチェックがおこなわれます。例えば「pkglint -a -v」は、大変
詳細かつ冗長なチェックをおこないます。


 11.2 作成、インストール、パッケージングの手順
 ============================================== 

パッケージのためのディレクトリと、いくつかの追加のディレクトリを
作成します。

> root@pumpy:/u/pkgsrc/lang(1765)# cd /usr/pkgsrc/lang
> root@pumpy:/u/pkgsrc/lang(1765)# mkdir bison
> root@pumpy:/u/pkgsrc/lang(1766)# cd bison
> root@pumpy:/u/pkgsrc/lang/bison(1768)# mkdir files patches pkg

セクション 11.1 のように Makefile、pkg/COMMENT、pkg/DESCR、および
pkg/PLISTを作り、distfile を取得します。

> root@pumpy:/u/pkgsrc/lang/bison(1769)# make fetch
> >> bison-1.25.tar.gz doesn't seem to exist on this system.
> >> Attempting to fetch from ftp://prep.ai.mit.edu/pub/gnu//.
> Requesting ftp://prep.ai.mit.edu/pub/gnu//bison-1.25.tar.gz (via ftp://orpheus.amdahl.com:80/)
> ftp: Error retrieving file: 500 Internal error
>  
> >> Attempting to fetch from ftp://wuarchive.wustl.edu/systems/gnu//.
> Requesting ftp://wuarchive.wustl.edu/systems/gnu//bison-1.25.tar.gz (via ftp://orpheus.amdahl.com:80/)
> ftp: Error retrieving file: 500 Internal error
>  
> >> Attempting to fetch from ftp://ftp.freebsd.org/pub/FreeBSD/distfiles//.
> Requesting ftp://ftp.freebsd.org/pub/FreeBSD/distfiles//bison-1.25.tar.gz (via ftp://orpheus.amdahl.com:80/)
> Successfully retrieved file.

distfile のチェックサムを files/md5 へ作成します。

> root@pumpy:/u/pkgsrc/lang/bison(1770)# make makesum

コンパイルします。

> root@pumpy:/u/pkgsrc/lang/bison(1777)# make
> >> Checksum OK for bison-1.25.tar.gz.
> ===>  Extracting for bison-1.25
> ===>  Patching for bison-1.25
> ===>   Ignoring empty patch directory
> ===>  Configuring for bison-1.25
> creating cache ./config.cache
> checking for gcc... cc
> checking whether we are using GNU C... yes
> checking for a BSD compatible install... /usr/bin/install -c -o bin -g bin
> checking how to run the C preprocessor... cc -E
> checking for minix/config.h... no
> checking for POSIXized ISC... no
> checking whether cross-compiling... no
> checking for ANSI C header files... yes
> checking for string.h... yes
> checking for stdlib.h... yes
> checking for memory.h... yes
> checking for working const... yes
> checking for working alloca.h... no
> checking for alloca... yes
> checking for strerror... yes
> updating cache ./config.cache
> creating ./config.status
> creating Makefile
> ===>  Building for bison-1.25
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g LR0.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g allocate.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g closure.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g conflicts.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g derives.c
> cc -c -DXPFILE=\"/usr/pkg/share/bison.simple\"  -DXPFILE1=\"/usr/pkg/share/bison.hairy\" -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1  -g  ./files.c 
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g getargs.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g gram.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g lalr.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g lex.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g main.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g nullable.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g output.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g print.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g reader.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g reduce.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g symtab.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g warshall.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g version.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g getopt.c
> cc -c -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 -DHAVE_STDLIB_H=1 -DHAVE_MEMORY_H=1 -DHAVE_ALLOCA=1 -DHAVE_STRERROR=1 -I./../include  -g getopt1.c
> cc  -g -o bison LR0.o allocate.o closure.o conflicts.o derives.o files.o         getargs.o gram.o lalr.o lex.o                                   main.o nullable.o output.o print.o reader.o reduce.o symtab.o   warshall.o version.o                        
                    getopt.o getopt1.o  
> ./files.c:240: warning: mktemp() possibly used unsafely, consider using mkstemp()
> rm -f bison.s1
> sed -e "/^#line/ s|bison|/usr/pkg/share/bison|" < ./bison.simple > bison.s1

すべて OK のようなので、ファイルをインストールします。

> root@pumpy:/u/pkgsrc/lang/bison(1785)# make install
> >> Checksum OK for bison-1.25.tar.gz.
> ===>  Installing for bison-1.25
> sh ./mkinstalldirs /usr/pkg/bin /usr/pkg/share  /usr/pkg/info /usr/pkg/man/man1
> rm -f /usr/pkg/bin/bison
> cd /usr/pkg/share; rm -f bison.simple bison.hairy
> rm -f /usr/pkg/man/man1/bison.1 /usr/pkg/info/bison.info*
> install -c  -o bin -g bin -m 555 bison /usr/pkg/bin/bison
> /usr/bin/install -c -o bin -g bin -m 644 bison.s1 /usr/pkg/share/bison.simple
> /usr/bin/install -c -o bin -g bin -m 644 ./bison.hairy /usr/pkg/share/bison.hairy
> cd .; for f in bison.info*;  do /usr/bin/install -c -o bin -g bin -m 644 $f /usr/pkg/info/$f; done
> /usr/bin/install -c -o bin -g bin -m 644 ./bison.1 /usr/pkg/man/man1/bison.1
> ===>  Registering installation for bison-1.25

これで bison を使用することができます。そして、「pkg_delete bison-1.25」
を実行することで bison を削除することもできます。もし、バイナリー・パッケージ
が欲しければ、以下のようにしてください。

> root@pumpy:/u/pkgsrc/lang/bison(1786)# make package
> >> Checksum OK for bison-1.25.tar.gz.
> ===>  Building package for bison-1.25
> Creating package bison-1.25.tgz
> Registering depends:.
> Creating gzip'd tar ball in '/u/pkgsrc/lang/bison/bison-1.25.tgz'

もし、ソースやオブジェクト・ファイルが必要ないのであれば、掃除して
ください。

> root@pumpy:/u/pkgsrc/lang/bison(1787)# make clean
> ===>  Cleaning for bison-1.25


====================== 
付録A: ビルドのログ
====================== 

 A.1 top のビルド
 ================ 

> Script started on Fri Oct  3 13:22:31 1997
> root@pumpy:/u/pkgsrc/sysutils/top(1342)# make
> >> top-3.5beta5.tar.gz doesn't seem to exist on this system.
> >> Attempting to fetch from ftp://ftp.groupsys.com/pub/top/.
> Requesting ftp://ftp.groupsys.com/pub/top/top-3.5beta5.tar.gz (via ftp://orpheus.amdahl.com:80/)
> Successfully retrieved file.
> >> Checksum OK for top-3.5beta5.tar.gz.
> ===>  Extracting for top-3.5beta5
> ===>  Patching for top-3.5beta5
> ===>  Applying NetBSD patches for top-3.5beta5
> ===>  Configuring for top-3.5beta5
> /bin/cp /u/pkgsrc/sysutils/top/files/defaults /u/pkgsrc/sysutils/top/work/top-3.5beta5/.defaults
> chmod a-x /u/pkgsrc/sysutils/top/work/top-3.5beta5/install
> 
> Reading configuration from last time...
> 
> Using these settings:
>         Bourne Shell   /bin/sh
>           C compiler   cc
>     Compiler options   -DHAVE_GETOPT -O
>          Awk command   awk
>      Install command   /usr/bin/install
> 
>               Module   netbsd13
>              LoadMax   5.0
>         Default TOPN   -1
>         Nominal TOPN   18
>        Default Delay   2
> Random passwd access   yes
>           Table Size   47
>                Owner   root
>          Group Owner   kmem
>                 Mode   2755
>        bin directory   $(PREFIX)/bin
>        man directory   $(PREFIX)/man/man1
>        man extension   1
>        man style       man
> 
> Building Makefile...
> Building top.local.h...
> Building top.1...
> Doing a "make clean".
> rm -f *.o top core core.* sigdesc.h
> To create the executable, type "make".
> To install the executable, type "make install".
> ===>  Building for top-3.5beta5
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c top.c
> awk -f sigconv.awk /usr/include/sys/signal.h >sigdesc.h
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c commands.c
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c display.c
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c screen.c
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c username.c
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c utils.c
> utils.c: In function `errmsg':
> utils.c:348: warning: return discards `const' from pointer target type
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c version.c
> cc -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O  -c getopt.c
> cc "-DOSREV=12G" -DHAVE_GETOPT -DORDER -DHAVE_GETOPT -O -c machine.c
> rm -f top
> cc -o top top.o commands.o display.o screen.o username.o  utils.o version.o getopt.o machine.o -ltermcap -lm -lkvm
> root@pumpy:/u/pkgsrc/sysutils/top(1343)# make install
> >> Checksum OK for top-3.5beta5.tar.gz.
> ===>  Installing for top-3.5beta5
> /usr/bin/install -o root -m 2755 -g kmem top /usr/pkg/bin
> /usr/bin/install top.1 /usr/pkg/man/man1/top.1
> strip /usr/pkg/bin/top
> ===>  Registering installation for top-3.5beta5
> root@pumpy:/u/pkgsrc/sysutils/top(1344)# 


 A.2 top のパッケージング
 ================= 

> root@pumpy:/u/pkgsrc/sysutils/top(1344)# make package
 > >> Checksum OK for top-3.5beta5.tar.gz.
> ===>  Building package for top-3.5beta5
> Creating package top-3.5beta5.tgz
> Registering depends:.
> Creating gzip'd tar ball in '/u/pkgsrc/sysutils/top/top-3.5beta5.tgz'
> root@pumpy:/u/pkgsrc/sysutils/top(1345)#


====================================================== 
付録B:FTPサーバのパッケージアーカイブのレイアウト
====================================================== 

ftp.netbsd.org 上のプリコンパイルされたバイナリー・パッケージのレイアウト

/pub/NetBSD/packages/
                README
                distfiles/
		pkgsrc -> /pub/NetBSD/NetBSD-current/pkgsrc
                1.3/
                        i386/
                                All/
                                archivers/
                                        foo -> ../All/foo
                                ...
                        m68k/
                                All/
                                archivers/
                                        foo -> ../All/foo
                                ...
                        amiga -> m68k
                        atari -> m68k
                        ...


作成:
 - cd /usr/pkgsrc ; make install ; make package
 - /usr/pkgsrc/packages を ftp://ftp.netbsd.org/pub/NetBSD/packages/`uname -r`/`sysctl -n hw.machine_arch` へアップロードする。
 - 必要なら ln -s `sysctl -n hw.machine` `sysctl -n hw.machine_arch`

必要なディスクスペース: 不明


###########################################################################
# Local Variables:
# mode:				Text
# fill-column:			75
# sentence-end-double-space:	nil
# End:
