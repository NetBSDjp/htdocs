<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
<!-- Copyright (c) 1994-2004
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<meta http-equiv="Content-Type" content="text/html; charset=ISO-2022-JP">
<link rev="made" href="mailto:www@jp.NetBSD.org">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
<title>NetBSD Documentation: Other FAQs and HOWTOs </title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<HEADING>他の FAQ と HOWTO

<LIST>

<h2>他のリンク</h2>
<ul>
  <li><a href="http://www.mreriksson.net/faqs/netbsd/">Ola Eriksson の NetBSD
      FAQ</a></li>
  <li><a href="http://cynjut.neonramp.com/">*BSD FAQ site</a>
      (もはやあまり手入れがされていません)</li>
  <li><a href="http://www.daemonnews.org/200202/japanese-netbsd.html">NetBSD の
	日本語サポート</a></li>
</ul>

<SECTION> NetBSD に関する一般的な疑問

<ENTRY>release-changes  NetBSD リリース間で何が変わったの?
<p>
全ての変更の日ごとの一覧 ( NetBSD-current での物も含まれています)
が<a href="../../../Changes/" origlink="../../Changes/">あります</a>。
<p>これは、各リリースの最上位ディレクトリーの
<tt>CHANGES</tt> ファイルにもあり、また、
<a href="http://cvsweb.NetBSD.org/bsdweb.cgi/~checkout~/src/doc/CHANGES.prev?content-type=text/plain">前回</a>
および
<a href="http://cvsweb.NetBSD.org/bsdweb.cgi/~checkout~/src/doc/CHANGES?content-type=text/plain">次回</a>
のリリースのものがオンラインで保守されています。


<ENTRY>64-bit NetBSD は 64 bit オペレーティングシステム?

NetBSD は 32 bit と 64 bit CPU のどちらでも動いています。
<a href="../../Ports/alpha/">alpha</a> CPU では、
カーネルとユーザーランドは LP64 として知られているモードで走り、
それは、 <b>int</b> が 32 bit で <b>long</b> と
ポインター (とアドレス空間) が 64 bit です。
<a href="../../Ports/amd64/">amd64</a> および
<a href="../../Ports/sparc64/">sparc64</a> ポートは 32 ビットと 64 ビット
いずれの設定でも動作します。 64 ビットカーネル (LP64) は、 64 ビットモード
において 32 ビットのアプリケーションをサポートします。
32 ビットカーネルは整数、ポインター、 long 整数すべてに 32 ビットを使い、
64 ビットプログラムは動作しません。
<p>

R4000 とそれ以降の MIPS といった、ほかの 64bit capable CPU (<a
href="../../Ports/#in-tree-ports">いくつかのポートで使われています</a>)
では、 NetBSD は 32 bit モードで走りますが、 64 bit に変更中です。
<p>

全ての NetBSD ポートは
カーネルとユーザーランドプログラムで 64 bit 演算に対応しています。
カーネル内では、それはさまざまなカウンターと、
FFS 、64 bit 'Fast File System' に使われています。

<ENTRY>exportability NetBSD は米国から輸出できる?
 NetBSD 1.4.x まで(とそれを含む)では、
 security 配布物 (すなわち secr.tgz) 以外の全ては
米国から輸出できます。
 secr.tgz 配布物ファイルには、暗号のためのライブラリーが含まれています。
 NetBSD 1.5 からは、 暗号化コードは
 NetBSD の base 配布物に含まれています。
<a href="../../Misc/crypto-export.html">
輸出制限されたコードとバイナリーに関する NetBSD ドキュメントを参照してください </a>。

<ENTRY>netbsd-uses 何のために NetBSD を使うの?
Chris G. Demetriou (cgd@NetBSD.org) の言葉では:
<blockquote><pre>
NetBSD は、一般的に、  "安定した研究プラットフォーム" を意味します  -- 
それは、商用、家庭、研究作業……に使えるシステムであり、
何に使うかは、あなた次第です。一般的に、 私たちが NetBSD でしている仕事は、
私たちに可能なあらゆる方法による、システムを改善する試みです -- 
より多くのハードウェアのサポート、より高い安定性、より良い性能、より多くの文書化……
</pre></blockquote>

我々の
 <a href="../../Misc/features.html">特色のページ</a> を
NetBSD があなたに与える機会(能力)のアイデアとして見てください!



<SECTION>ユーザー設定

<ENTRY>adding-a-user ユーザーの追加
最近の NetBSD リリースでは useradd(8) コマンドを使ってユーザーを追加できます。
古いリリースでは、 <PKGSRC>sysutils/user パッケージをインストールして
同等のことができるようになります。 <tt>/etc/passwd</tt>
を編集してもユーザーは追加できません。パスワードデータベースを編集したい場合は
vipw(8) を使ってください。さらなる情報は、 pwd_mkdb(8) も参照してください。

<ENTRY>gecos-field <tt>finger</tt> によって表示される情報の変更は?
chfn(1) および chsh(1) コマンドを使うか、または、
vipw(8) を使って <tt>/etc/master.passwd</tt> を編集してください。

<ENTRY>problems-with-root root としてログインあるいは 'su' する時の問題

これは数多くの起こりうる問題をカバーし:
<p>
<ul>
    <li><strong> root として直接ログインできません</strong><br>

	NetBSD は <tt>/etc/ttys</tt> 中に 'secure' が書かれている端末からのみ、
	 root として直接ログインすることを許します ( ttys(5) を見よ)。


	ネットワークをまたいで直接ログインできるようにする( 推奨され <b>ない</b> )には、
	 '<tt>secure</tt>' を各ネットワーク端末行の最後に加える必要があります。
	これらをするのに、各行を編集する必要はなく root になって
	 打ちます:

	<dl>
	<dd><tt><b>cd /etc</b></tt></dd>
	<dd><tt><b>cp ttys ttys.orig</b></tt></dd>
	<dd><tt><b>cat ttys.orig | sed 's/network$/network secure/'
	   &gt; ttys</b></tt></dd>
	</dl>

    <p><li><strong> root に 'su' できません</strong><br>

	NetBSD は誰かが root に su(1) しようとすることに対して、
	 <tt>/etc/group</tt> の 'wheel' グループに入っているかチェックします。

	もしそこが空 (wheel:*:0:) なら誰もが正しいパスワードで root に su できます。

	さもなければ、
	(スペースじゃなく!)
	コンマで区切られた許可されたアカウントのリストがあるべきです。


    <p><li><strong>誰も 'su' できません</strong><br>
        "<b><tt>ls -l /usr/bin/su</tt></b>" と入力してください。
	出力の最初の 'word' は '-r-sr-xr-x' であるべきです。
	もし、それがなにか違う( '-r-xr-xr-x' みたいに)なら
	(root になって) "<b><tt>chmod 4555 /usr/bin/su</tt></b>"と入力してください。

	その位置の 's' は 'setuid' バイナリーを示していて、この場合、
	 'su' が root 特権 で走ることを認めています。

	<p>
	この問題は、配布物を展開した時に tar に '-p'(パーミッション保護) フラグが
	与えられていなかったことによるものです。

	この場合、
	ほかのさまざまなユーティリティーもまた壊れているでしょうから、
	全ての tar ファイル ( etc.tar.gz 以外)を再展開してください。

</ul>

<ENTRY>adding-to-path  あなたのパスに何かを加える

例えば、あなたのパスに /usr/X11R6/bin を加えるなら、
ホームディレクトリーの <em>.login</em> ファイルを編集し
次のように加えます:

<dl>
<dd><tt><b>set path = ( /usr/X11R6/bin $path )</b></tt></dd>
</dl>
<p>
これは C-shell <em>csh(1)</em> と、その派生物の
<em><PKGSRC>shells/tcsh</em> のようなものでのみ、働きます。
<em>sh(1)</em> と派生物( <PKGSRC>shells/bash2 のような)では
正しい文法は:
<dl>
<dd><tt><b>PATH=/usr/X11R6/bin:$PATH</b></tt></dd>
<dd><tt><b>export PATH</b></tt></dd>
</dl>

<ENTRY>setting-something-for-all-users 全ユーザーのためになにか設定する

 csh(1) や <PKGSRC>shells/tcsh を走らせている全ユーザーのために、
次に示すファイルの一つに書き加えることで、
なにか設定することができます。
:

<ul>
<li><b><tt>/etc/csh.cshrc</tt></b><br>

    これは、新しいシェルが開かれるごとに、
    ユーザーのホームディレクトリーにある、いかなる <b><tt>.cshrc</tt></b> に先立って実行されます。


<li><b><tt>/etc/csh.login</tt></b><br>

    これは、ユーザーがログインする時、
     <b><tt>/etc/csh.cshrc</tt></b> よりも後だけど、
    ユーザーのホームディレクトリーにあるいかなる
     <b><tt>.login</tt></b> よりも先に実行されます。

<li><b><tt>/etc/csh.logout</tt></b><br>

    これは、ユーザーがログアウトする時、ユーザーのホームディレクトリーにある
     いかなる <b><tt>.logout</tt></b> より先に実行されます。
</ul>

<ENTRY>shells シェルでのカーソルキー編集またはファイルネーム補完

これは、使っているシェルの型により:
<ul>
<li><b>sh(1) (Bourne シェル)</b><br>
	これは、シングルユーザーモードで使われるシェルで、
	'<tt>set -E</tt>' コマンドで、コマンドライン編集を有効にできます。
	シングルユーザーモードでいつもコマンドライン編集ができるように、
	<tt>/.profile</tt> にこれを加えることができます。
<li><b>csh(1) ('C' シェル)</b><br>
	これは標準のユーザーシェルで、ファイルネーム補完をサポートしています 
	('<b>set filec</b>' してから、 ESCAPE キーを使って) が、
	コマンドライン編集はサポートしていません。
	けれども、 <a href="../software/packages.html">NetBSD パッケージコレクション</a> 
	からファイルネーム補完とコマンドライン編集が標準で有効になっている
	 <PKGSRC>shells/tcsh や <PKGSRC>shells/bash2 をインストールすることができます。
<li><b>ksh(1) (Korn Shell)</b><br>
	これはパブリックドメイン版の Korn Shell 、別名 pdksh です。
	Emacs モードまたは Vi モードのコマンドライン編集に対応しています
	('set -o {emacs,vi}' で設定します) 。 Emacs モードで
	ファイル名を補完するにはエスケープキー 2 回
	('bind "^I"=complete' コマンドで TAB キーにかえられます) を使います。
	Vi モードで TAB や ESC でのファイル名補完をするには、それぞれ、
	'set -o vi-tabcomplete' や 'set -o vi-esccomplete' を使います。<br>
	このパブリックドメイン版 korn shell は NetBSD のベースシステムに含まれていますが、
	他のオペレーティングシステム用として
	<a href="../software/packages.html">NetBSD パッケージコレクション</a>の
	shells/<PKGSRC>shells/pdksh からも利用可能です。また、 KSH-93 も
	shells/<PKGSRC>shells/ast-ksh から利用可能です。
<li><b>bash (GNU Bourne Again Shell)</b><br>
	'bash' はもうひとつの、コマンドライン編集拡張されているシェルで、
	これは 'sh' が基になっています。
	<a href="../software/packages.html">NetBSD パッケージコレクション</a>
	中の shells/<PKGSRC>shells/bash2 からインストールすることができます。
<li><b>tcsh (拡張された 'C' シェルの一つ)</b><br>
	'tcsh' はほぼ完璧な csh のスーパーセット(拡張物)で
	ファイルネーム補完(TAB を使います)と
	コマンドライン編集を含む沢山の便利な特別な機能があります。
	 <a href="../software/packages.html">NetBSD パッケージコレクション</a> 
	中の shells/<PKGSRC>shells/tcsh からインストールすることができます。
<li><b>ほかの shell たち</b><br>
	<a href="../software/packages.html">NetBSD パッケージコレクション</a> 
	の <PKGSRC>shells カテゴリーの下には、
	さまざまな他のコマンドラインシェルが含まれています。
</ul>

<ENTRY>languages メッセージ言語の指定

NetBSD は、エラーメッセージやそのようなものに用いる言語を
決めるのに
 '<tt>LANG</tt>' 環境変数 を使います。

 csh や tcsh では
 '<tt>setenv LANG <b>XX</b></tt>' コマンドで設定でき、
ここで、 XX は2文字の国コードです。
サポートされているコードタイプの一覧は
 '<tt> /usr/share/nls</tt>' にあります。<br>
<p>
<b>どうか注意</b>:確実に翻訳されているものだけにしてください。

確認するには、 <tt>LANG</tt> 変数をセットし、
'<tt>cd&nbsp;/a_directory_that_does_not_exist</tt>'と打ってください。
  </p>

<SECTION> 印刷とスキャン

<ENTRY>postscript-manpages  PostScript でマニュアルページを印刷する
   マニュアルページは、
    nroff(1) ソースとして /usr/share/man/man<em>X</em>/<em>manpage</em>.<em>X</em> 
    にあります。ここで <em>X</em> はセクション番号です (例: nroff の場合は 1 )。
    それを PostScript に変換するにはこれが使えて:<br>
    <pre>	<b>groff -Tps -mandoc /usr/share/man/man<em>X</em>/<em>manpage</em>.<em>X</em></b></pre>
    たとえば、 ls(1) マニュアルページ を PostScript に変換し、
    lpr(1) を通して直接デフォルトのプリンターに送るにはこれを使うことができ、
    <pre>	<b>groff -Tps -mandoc /usr/share/man/man1/ls.1 |lpr</b></pre>

    ほかのタイプのプリンターで印刷したいなら、
     pkgsrc の <PKGSRC>print/ghostscript パッケージ を使いたくなるでしょう。

<ENTRYLINK>smbprint/ NetBSD からリモート SMB プリンターへの印刷

<ENTRY>jetdirect DHCP 経由の HP JetDirect Card 設定
 JetDirect EX Plus のような、 JetDirect プリントサーバーを持っていれば、
プリントサーバーを設定するために、 NetBSD のもとで dhcpd(8) を使うことができます。 このステップは:
 JetDirect サーバーのために <tt>/etc/dhcpd.conf</tt> にエントリーを作ります。
<pre>
options jd-tftp-cfg		code 144 = string;
options jd-tftp-server		code 150 = string;

allow				bootp;

# [...]

host hp690c {
	fixed-address		hp690c;			# set to the DNS name or address of the JetDirect
	hardware ethernet	00:60:b0:00:11:22;	# set to the MAC address of the JetDirect
	option	log-servers	servername;		# set to the DNS name or address of log server
	option	jd-tftp-server	servername;		# set to the DNS name or address of tftp server
	option	jd-tftp-cfg	"hpnp/hp690c.cfg";	# name of the JetDirect config file
}
</pre>
このファイルの書き方について、より詳しい情報は <tt>dhcpd.conf(5)</tt> を見てください。

<p>
<tt>/etc/inetd.conf</tt> 内で、 <tt>tftpd</tt> が有効になっていることを確かめてください。
注意として、
 "-s" 引数を <tt>/etc/inetd.conf</tt> の <tt>tftp</tt> の行につけるようにしてください。
この引数は、 <tt>tftpd(8)</tt> のルートディレクトリーを設定するものです。
以下、この例においては、
<tt>tftpd(8)</tt> のルートディレクトリーを <tt>/tftpboot</tt> に設定していると仮定します。
<p>
<tt>/etc/rc.conf</tt> 内で、 <tt>dhcpd</tt> が有効になっていることを確かめてください。
<p>

次に Network Printer Interface (NPI) 設定ファイルをつくります。
この例では、ファイルは <tt>/tftpboot/hpnp/hp690c.cfg</tt> で、
このファイルは次のようになっているべきです:
<pre>
name: printer name
location: Location of the Printer 
contact: Contact Person 
idle-timeout: 1800
banner: 0
</pre>

もし、 <tt>/etc/inetd.conf</tt> に変更を加えたなら、
<tt>kill -HUP `cat /var/run/inetd.pid`</tt> をすることで
<tt>inetd(8)</tt> が <tt>inetd.conf(5)</tt> を再読込みすることを確認してください。
JetDirect プリントサーバー (または HP JetDirect カードのついたプリンター)
をリブートすると、サーバーは DHCP で設定を読みこみます。
いくつかのプリンターでは、フロントパネル(の操作)で BOOTP/DHCP の設定を
明示的に有効にする必要があるかもしれません。

<ENTRY>burstpage なぜ <em>sh</em> は、 HP JetDirect の「バースト」ページを抑制しないのですか?
この「バースト」ページは、プリンターとローカル接続されているホスト、特にこのケースでは
lpd(8) をエミュレートする専用ハードウェアの機能です。 NetBSD がリモートスプーラーとして
<em>rm</em> とともに使われる場合は、バーストページを追加することはありません。
この JetDirect の「バースト」ページは、専用デバイスの非標準な機能です。
<a href=http://h20015.www2.hp.com/en/document.jhtml?lc=en&docName=bpj02755&prodId=jd2337a>HP (TM)
ではこのページを実際には "trailer" と呼んでいます</a>。
この機能は、 <tt>banner: 0</tt> を設定するか、または、デバイスの 23 番ポートに単純に
telnet して <tt>banner 0</tt> コマンドを実行してから <tt>quit</tt> することで、
止めることができます。

<p>
JetDirect の個体によっては、この <tt>banner</tt> コマンドを追加するために、
ファームウェアをアップグレードする必要があるかもしれません。
ファームウェアをアップグレードするには、 HP による JetDirect
ネットワーク管理ツールを適切に使う必要があります
このアップグレードを行うために、 SMTP read and write community strings
を、既知の価に設定する必要があるかもしれません。
この設定をするには、以下の内容を NPI 設定に使います。
<pre>
get-community-name: read-password
set-community-name: write-password
</pre>
(DHCP を使った JetDirect カードの設定については、前の項目を参照してください。)
なお、 (TFTP 経由で) 公開される設定ファイルにこれらの項目を置くことによる
セキュリティー上の影響を認識するようにしてください。


<ENTRY>scanning NetBSD でスキャナーを使う
NetBSD は、 <PKGSRC>graphics/sane-backends スキャニングパッケージを用いて、
さまざまな SCSI スキャナーをサポートしています。この API にアクセスするための
フロントエンドは <PKGSRC>graphics/sane-frontends パッケージで提供されており、
また、 <PKGSRC>graphics/gimp のようなグラフィックツールから直接呼び出すことができます。
<p>

注意: 
1.4.2 より前のバージョンの NetBSD では、
カーネル内の ss(4) スキャナードライバーは
<PKGSRC>graphics/sane-backends といくつかのスキャナーで
問題を起こすかもしれません。
 - その解決法は、カーネルを ss(4) デバイスを使わずに uk(4) を使うように再コンパイルするか、
 1.4.2 以降にアップグレードすることのどちらかです。

<SECTION> リムーバブルメディアを使う

<ENTRY>using-floppies フロッピーディスクを初期化して使用する

PC-style フロッピーディスクは最初に low-level フォーマット(物理フォーマット)
をしなければならないことを除いて、大抵ハードディスクのような
他のディスクデバイスと同じように動作します。

<p>

1番目のフロッピードライブで 一般的な 1440 KB フロッピーとして使うには、
最初に(root になって)フォーマットし:
<pre>
fdformat -f /dev/rfd0a
</pre>

それから、 disklabel(8) を使ってディスクに1つのパーティションをつくります:

<pre>
disklabel -rw /dev/rfd0a floppy3
</pre>

空間に最適化された小さいファイルシステムを作ります:

<pre>
newfs -m 0 -o space -i 16384 -c 80 /dev/rfd0a
</pre>

これで、フロッピーディスクは他のディスクのようにマウントすることができます。
<br>

または、既に MS-DOS ファイルシステムになっているフロッピーディスクを
持っていて、単に NetBSD からアクセスしたいだけなら、単にこのようにするだけで:

<pre>
mount -t msdos /dev/fd0a /mnt
</pre>
<p>

しかしながら、フロッピーを標準(より大きい)ディスクとして使うのは、
ファイルシステム間をバイパスするのに便利だからで、
直接 raw device にファイルのアーカイブを置く( splat )なら、たとえば:
<pre>
tar cvfz /dev/rfd0a file1 file2 ...
</pre>

このバリエーションとして、
 <PKGSRC>sysutils/mtools パッケージを使って
 MS-DOS フロッピーを扱うことができ、
カーネルバッファーキャッシュを通さないという利益があって、
ファイルシステムがマウントされている最中に
フロッピーを取り出す危険にさらさずにすみます。

<ENTRY>using-zips  ZIP ディスクの使い方
<ol>
<li> システムが ZIP ドライブを持っているか見てみます:
<pre>
yui# dmesg | grep -i zip
sd0 at atapibus0 drive 1: &lt;IOMEGA  ZIP 100       ATAPI, , 14.A&gt; type 0 direct removable
</pre>

   一つあるのが見え、 単に他の SCSI ディスクと同じような sd0 として記録されています。

   この ZIP ドライブは ATAPI ですが、そのことは問題ではありません
                - SCSI の ZIP もここに現われます。

  ZIP は "removable" と記されていて、
これは、 "<tt>eject sd0</tt>" で取り出すことができるという意味です。

   <p>

<li> ZIP ディスクを挿入します
   <p>

<li> ZIP 内のパーティションを眺めます:
<pre>
yui# disklabel sd0
# /dev/rsd0d:
type: ATAPI
 ...
8 partitions:
#        size   offset     fstype   [fsize bsize   cpg]
  d:   196608        0     unused        0     0         # (Cyl.    0 - 95)
  h:   196576       32      MSDOS                        # (Cyl.    0*- 95)
disklabel: boot block size 0
disklabel: super block size 0
</pre>
   <dl compact>
   <dt> "d" <dd> はディスク全体です。 i386 ではたいてい。
   <dt> "h" <dd> があなたの望んでいるもので、 msdos ファイルシステムとして見えます。
   </dl>
   それゆえ、 zip 上のパーティションをアクセスするには、 /dev/sd0h をつかいます。
   <p>

<li> それをマウントします:
<pre>
yui# mount -t msdos /dev/sd0h /mnt
yui# 
</pre>
   <p>

<li> ファイルにアクセスします:
<pre>
yui# ls -la /mnt
total 40809
drwxr-xr-x   1 root  wheel     16384 Dec 31  1979 .
drwxr-xr-x  28 root  wheel      1024 Aug  2 22:06 ..
-rwxr-xr-x   1 root  wheel   1474560 Feb 23  1999 boot1.fs
-rwxr-xr-x   1 root  wheel   1474560 Feb 23  1999 boot2.fs
-rwxr-xr-x   1 root  wheel    548864 Feb 23  1999 boot3.fs
-rwxr-xr-x   1 root  wheel  38271173 Feb 23  1999 netbsd19990223.tar.gz
</pre>
   <p>

<li> ZIP をアンマウントする:
<pre>
yui# umount /mnt
yui#
</pre>
    <p>
<li> ZIP を取り出す:
<pre>
yui# eject sd0
yui#
</pre>
</ol>

<ENTRY>cdrom NetBSD で CD のデータを読む

Data CD は、プログラム、音声ファイル (mp3, wav)、動画 (mp3, quicktime) から、
ソースコード、テキストファイル、その他にいたるまで、
あらゆる物を入れることができます。
これらのファイルにアクセスする前に、 CD はハードディスクみたいに、
ディレクトリーにマウントされる必要があります。

ハードディスクが異なるファイルシステム( ffs, lfs, ext2fs, ...)で使えるように、
CD に固有のファイルシステムがあって、 "cd9660" です。

NetBSD cd9660 ファイルシステムは、
Rockridge と Joliet 拡張として、あるいは拡張とせず に扱うことができます。

<p>
CD デバイスは SCSI and IDE (ATAPI) 共に /dev/cd0a と名づけられています。
<P>
この情報で、始めることができ:
<P>

<ol>
<li> システムが CD ドライブを持っているか見てみます:
     <pre>
     # dmesg | grep ^cd
     cd0 at atapibus0 drive 0: &lt;CD-R/RW RW8040A, , 1.12&gt; type 5 cdrom removable
     cd0: 32-bit data port
     cd0: drive supports PIO mode 4, DMA mode 0
     cd0(pciide0:1:0): using PIO mode 0, DMA mode 0 (using DMA data transfers)
     </pre>
     ここに一つのドライブがあり、 "cd0" です。
     それは IDE/ATAPI ドライブで  atapibus0 上に見つかっています。
     もちろんそのドライブ (より正確にはそのメディア) はリムーバブルで、
     すなわち取り出すことができます。下記を見てください。
     <p>
<li>  CD を挿入します。
     <p>
<li> CD を手動でマウントします:
     <pre>
     # mount -t cd9660 /dev/cd0a /mnt
     # 
     </pre>

     このコマンドはなにも表示しません。
     それは、システムが CD を /dev/cd0a に見つけ、 "cd9660" ファイルシステムを使って
      /mnt にマウントしたという(暗黙の)知らせです。
     マウントポイント "/mnt" は存在するディレクトリーでなければなりません。
     <p>
     
<li> CD の内容を確かめます:
     <pre>
     # ls /mnt
     INSTALL.html INSTALL.ps   TRANS.TBL    boot.catalog
     INSTALL.more INSTALL.txt  binary       installation
     # 
     </pre>
     全部良く見えています! これは NetBSD CD です、もちろん。 :)
     <p>
     
<li> CD をアンマウントします:
     <pre>
     # umount /mnt
     # 
     </pre>

     CD がアクセスされたまま(たとえば、どれか他のシェルがまだその中に "cd"したまま)
     だと、これは、働きません。
     もし、システムをシャットダウンされるなら、 CD は自動的に アンマウントされ、
     それに関してはなにも心配はいりません。
     <p>

<li>  /etc/fstab にエントリーを作ります:
     <p>
     もし、いちいち "mount"コマンドを完全に打ちたくなければ、
     /etc/fstab の行中にその値を置くことができ:
     <pre>
     # Device        mountpoint      filesystem  mount options 
     /dev/cd0a       /cdrom          cd9660      ro,noauto    
     </pre>

     例示したマウントポイント - "/cdrom" はあらかじめ存在しなければなりません:
     <p>
     <pre>
     # mkdir /cdrom
     # 
     </pre>

     これで、次のコマンドで CD をマウントすることができ:
     <pre>
     # mount /cdrom
     #
     </pre>

     前の通り、アクセスとアンマウントをします。
     <p>
     CD は "noauto" によって、起動時はマウントされません。
     - これは、多分、常時ドライブに CD を入れていないだろうから便利です。
     他のいくつかの便利なオプションは  mount(8) と mount_cd9660(8) 
     を見てください。
     <p>
     
<li> CD を取り出します:
     <pre>
     # eject cd0
     # 
     </pre>

     CD がまだマウントされたままなら、もし可能ならアンマウントし、
     それでイジェクトします。
     <p>
</ol>

<ENTRY>multisession NetBSD でマルチセッション CD を読む

mscdlabel(8) を使って CD のディスクラベルに全セッションを追加してから、
適切なデバイスノードを使って必要なセッションをマウントします。
対応するデバイスノードを /dev 以下に手動で作る必要があるかもしれません。
以下に例を示します。
<pre>
# mscdlabel cd1                                                                
track (ctl=4) at sector 142312
 adding as 'a'
track (ctl=4) at sector 0
 adding as 'b'
# ls -l /dev/cd1b
ls: /dev/cd1b: No such file or directory
# cd /dev
# ls -l cd1*
brw-r-----  1 root  operator       6,  8 Mar 18 21:55 cd1a
brw-r-----  1 root  operator       6, 11 Mar 18 21:55 cd1d
# mknod cd1b b 6 9
</pre>
以上で cd1b が作成されました。
あらたに作成した各デバイスノードのパーミッションが適切か確認します。
<pre>
# ls -l cd1*
brw-r-----  1 root  operator       6,  8 Mar 18 21:55 cd1a
brw-r--r--  1 root  wheel          6,  9 Mar 18 22:23 cd1b
brw-r-----  1 root  operator       6, 11 Mar 18 21:55 cd1d
# chgrp operator cd1b
# chmod 640 cd1b
# ls -l cd1*          
brw-r-----  1 root  operator       6,  8 Mar 18 21:55 cd1a
brw-r-----  1 root  operator       6,  9 Mar 18 22:24 cd1b
brw-r-----  1 root  operator       6, 11 Mar 18 21:55 cd1d
</pre>
これで、マウントできるようになったはずです。
<pre>
# mount /dev/cd1b /mnt
</pre>

<ENTRY>cdrom-users 一般ユーザーが CD にアクセスできるようにする

NetBSD では、 "root" だけがファイルシステムをマウントすることができます。
どのユーザーでもそうできるようにするには、以下のような方法があります:
<p>
<ul>
    <li>グループおよび他者に、デバイスへのアクセス権限を与える。
        <dl>
        <dd><tt><b>chmod go+rw /dev/cd0a</b></tt></dd>
        </dl>
	</li>
    <li>ユーザーがファイルシステムをマウントできるよう NetBSD にお願いする。
        <dl>
        <dd><tt><b>sysctl -w vfs.generic.usermount=1</b></tt></dd>
        </dl>
	</li>
</ul>
<p>
注意: マウントポイントはマウントするユーザーの所有でなければなりません。つまり、例としては:
<p>
<pre>
        <tt><b>cd</b></tt>
        <tt><b>mkdir cdrom</b></tt>
</pre>
<p>
mount(8) と、その代わりとなる amd(8) のマニュアルをあわせて参照してください。

<ENTRY>vnconfig ISO イメージをマウントする

時には、 CD を焼く前に ISO9660 イメージファイルをマウントしたくなることがあります;
そうすれば、 CD の内容を確認できますし、個々のファイルを外にコピーすることもできます。
Linux を使っている方は、特殊な <i>loop</i>
ファイルシステムを使ってマウントできることを知っているはずです。
NetBSD ではこれとは方法が異なり、 <i>vnode</i> 仮想ディスクを使います。
<p>

ここでは、例を示しながらその方法を説明します。ホームディレクトリーに
ISO イメージファイルがあり、 <tt>mycd.iso</tt> という名前であると仮定します。

<ol>
  <li>まず、この ISO ファイルを「参照」する新しい vnode を設定します。
      <p>
      <tt><b># vnconfig -c vnd0 ~/mycd.iso</b></tt>
  <li>次に、この vnode をマウントします。
      <p>
      <tt><b># mount -t cd9660 /dev/vnd0c /mnt</b></tt>
  <li>はい、これでイメージの内容が <tt>/mnt</tt> 以下に現れます。
      このディレクトリーに異動してイメージを探索してください。
  <li>問題なければ、イメージを umount してください。
      <p>
      <tt><b># umount /mnt</b></tt>
  <li>最後に、 vnode の設定を解除します。
      <p>
      <tt><b># vnconfig -u vnd0</b></tt>
</ol>

<p>
なお、この手順は、 ISO イメージに限らず、ファイルシステムを含むファイルなら
どんなファイルに対しても可能です。

<p>
さらなる情報は、 vnd(4) および vnconfig(8) マニュアルページを参照してください。


<ENTRY>cdrom-video NetBSD で ビデオCD を使う
     多くの DVD プレイヤーのように、 NetBSD のもとで、
     MPEG ビデオストリームを再生するには、
     CD を普通の (データ) CD としてマウントし ( <a href="#cdrom">上</a> を見てください ) 、
     CD 上に蓄えられた mpeg ファイルを再生するために
     <PKGSRC>graphics/mtv, 
     <PKGSRC>multimedia/xine-ui, 
     <PKGSRC>multimedia/mplayer または 
     <PKGSRC>multimedia/gmplayer 
     パッケージを使ってください。
     <p>


<ENTRY>cdrom-audio  NetBSD で音楽 CD を使う

音楽 CD を扱うには2つの方法があって:
<p>
<ol>
<li> CD ドライブにヘッドフォンか、たいていの
     CDROM ドライブが内部的に接続されているサウンドカードの、
     いずれで再生するか指定して下さい。 cdplay(1),
     <PKGSRC>audio/xmcd,  <PKGSRC>audio/kdemultimedia パッケージの "kscd"
     のようなプログラムや、 mixerctl(1),
     <PKGSRC>audio/xmix, <PKGSRC>audio/xmmix,
     Curses ベースの <PKGSRC>audio/cam 
     や <PKGSRC>audio/kdemultimedia に含まれる kmix 
     のようなミキサープログラムを使ってください。
     <p>
     
     これは、SCSI と IDE (ATAPI) 両方の CDROM, CDRW, DVD ドライブで、
     大抵きちんと動きます。
     <p>
     
<li> オーディオトラックを、デジタル -&gt; アナログ変換してもう一回戻すことなしに
     バイナリー形式で<a name="rip">読み出す ("rip")</a> 。
     これを行なうためのプログラムは、いくつかあります:
     <p>

    <ul>
    <li>ATAPI と SCSI の CD-ROM のドライブで <PKGSRC>audio/cdd
         パッケージが使えます。 cdd でトラック 2 を抽出するには、
         以下のようにタイプします:
         <p>

         <pre> # cdd -t 2 `pwd`</pre>
         <p>

         これで、カレントディレクトリーに <tt>track-02.cda</tt>
         というファイルができます。
         <p>

    <li>SCSI CD-ROM ドライブでは <PKGSRC>audio/tosha パッケージが使えます。
        tosha でトラック 2 を抽出するには、以下のようにタイプします:
        <p>

        <pre> # tosha -d <i>CD-ROM-device</i> -t 2 -o track-02.cda</pre>
        <p>

    <li> ほとんどの ATAPI、 SCSI、いくつかの独自仕様の CDROM ドライブで、
         <PKGSRC>audio/cdparanoia パッケージが使えます。 cdparanoia を使うと
         データを WAV、 AIFF、 AFFF-C あるいは raw(生) フォーマットで、
         ファイルにセーブするか、あるいは直接標準出力に出力することができます。
         現在、 NetBSD版の cdparanoia には -g オプションが必要です。
         たとえば、トラック 2 を WAV ファイルとしてセーブするには、
         次のようにします:
         <p>

         <pre> $ cdparanoia -g /dev/rcd0d 2 track-02.wav</pre>
         <p>

         CD の内容をすべて抽出したい場合は、 cdparanoia の
         バッチモードが便利です:

         <pre> $ cdparanoia -g /dev/rcd0d -B</pre>
    </ul>

    これで、このデータを、たとえば <a
     href="#create-mpeg3">MP3 ストリームにエンコード</a>したり、 <a
     href="#cdr-audio">CD-R に焼いたり</a>
     するといった処理ができるようになります。
    <p>
</ol>

<ENTRY>create-mpeg3 オーディオ CD からMP3 (MPEG layer 3) ファイルを作る

<i><b>どうか注意:</b> これらの方法は <PKGSRC>audio/cdd パッケージ だけで確認をしていて、
 <PKGSRC>audio/tosha や <PKGSRC>audio/cdparanoia パッケージでは確認していません。
</i>


 <p> オーディオ CD から MPEG layer 3 (<tt>MP3</tt>) ファイルを作る
 基本的な 段階step は
 ( <a href="../software/packages.html">NetBSD パッケージコレクション </a> のソフトウェアを使って)
こうやって:
<p>
<ol>
<li> CD からオーディオデータを<a href="#rip">抽出 (<i>rip</i>)</a> します。
     さらなる説明は、 ``<a href="#cdrom-audio">NetBSD で音楽 CD を使う</a>''
     を参照してください。
     <p>

<li>CD オーディオフォーマットを WAV フォーマットに変換します。
    この作業は、リッピングプログラム(tosha、 cdd など)がやってくれて
    いない場合にだけ必要です。
    <p>
    <ul>
    <li>
 <PKGSRC>audio/sox package をつかって、(次のように)打ちます:
    <p>
    <dl><dd><tt><b>sox -s -w -c 2 -r 44100 -t cdr track-02.cda
	track-02.wav</b></tt></dd></dl>
    <p>

    これで raw CD フォーマット <tt>track-02.cda</tt> が
    符号あり( <b>s</b>igned) 16-bit 語長(<b>w</b>ords)、
     2 チャンネル(<b>c</b>hannels)、
    サンプリングレート(sampling <b>r</b>ate) 44100kHz の 
     WAV フォーマット <tt>track-02.wav</tt>
    に変換されるでしょう。

    </ul>
<p>
<li> WAV ファイルを MP3 フォーマットにエンコードします。
    <p>
    <ul>
    <li> <PKGSRC>audio/bladeenc パッケージを使って、打ちます:
    <p>
    <dl><dd><tt><b>bladeenc -128 -QUIT track-02.wav</b></tt></dd></dl>
    <p>

    これで、 <tt>track-02.wav</tt> は
    ビットレート <b>128</b>kBit/sec の MP3 フォーマットで、
     <tt>track-02.mp3</tt> にエンコードされるでしょう。

 bladeenc のドキュメンテーションが ビットレートのより詳しいことを記述しています。
    <p>
    <li> <PKGSRC>audio/lame パッケージをつかって、打ちます:
    <p>
    <dl><dd><tt><b>lame -p -o -v -V 5 -h track-02.wav
	track-02.mp3</b></tt></dd></dl>
    <p>
    あなたの好みやハードウェアによって、
    もっと低い品質で使いたいかもしれません。
    </ul>
</ol>
<p>

できあがった MP3 ファイルは、
<PKGSRC>audio/maplay, <PKGSRC>audio/mpg123, や <PKGSRC>audio/splay パッケージの
いずれでも再生できます。


<ENTRY>cdr CD-R ライターを使ってデータ CD を書き込む

CD に書きこむ過程は、 2 段階にわたります:
最初に、データの "イメージ" を作る必要があり、
第2段階で CD-R に書きこみます。
<p>

<ol>
<li> すでに有る ISO イメージを読み込む
     <pre>
     # dd if=/dev/rcd0a of=filename.iso bs=2k
     #
     </pre>
     代わりに、自分で新しい ISO イメージを作ることができ:
<li> ISO イメージをつくる
     <p>
     CD に入れたい全てのデータを1つのディレクトリーに入れてください。
     つぎに、ディスクのような ISO イメージをつくる必要があります。

     イメージは、データを ISO 9660 フォーマットを使って
     後で CD に書きこむのと同じ形式でたくわえます。

     基本 ISO9660 フォーマットは 8+3 ファイル名だけ
     (最大で8文字のファイルネームと、加えて3文字までの拡張子)
     が使えます。

これは Unix のファイル名としては実用的ではなく、
それで "Rockridge Extension" と呼ばれるものを長いファイル名を使うために使う必要があります。


     (そのような拡張の異なる方式は、 Microsoft の世界でも、
     それらのロングファイルネームを正しく扱うために存在します;
     それは、 Joliet ファイルシステムとして知られています)。
     <p>
     ISO イメージは <PKGSRC>sysutils/cdrecord パッケージに入っている
      mkisofs コマンドを使ってつくります。

     <p>
     例: データが /usr/tmp/data にあって、 /usr/tmp/data.iso に ISO イメージをつくるなら、
     このようなコマンドで:
     <pre>
     $ <b>cd /usr/tmp</b>
     $ <b>mkisofs -o data.iso -r data</b>
     Using NETBS000.GZ;1 for  data/binary/kernel/netbsd.INSTALL.gz (netbsd.INSTALL_TINY.gz)
     Using NETBS001.GZ;1 for  data/binary/kernel/netbsd.GENERIC.gz (netbsd.GENERIC_TINY.gz)
       5.92% done, estimate finish Wed Sep 13 21:28:11 2000
      11.83% done, estimate finish Wed Sep 13 21:28:03 2000
      17.74% done, estimate finish Wed Sep 13 21:28:00 2000
      23.64% done, estimate finish Wed Sep 13 21:28:03 2000
      ...
      88.64% done, estimate finish Wed Sep 13 21:27:55 2000
      94.53% done, estimate finish Wed Sep 13 21:27:55 2000
     Total translation table size: 0
     Total rockridge attributes bytes: 5395
     Total directory bytes: 16384
     Path table size(bytes): 110
     Max brk space used 153c4
     84625 extents written (165 Mb)
     $
     </pre>
     出版者 (publisher) や作成者 (preparer) についての記述の指定など、
     他のオプションについては、 mkisofs(8) マニュアルページを見てください。
     <a href="../bootcd.html">Bootable CD ROM How-To</a> が、
     ブータブル(起動可能) CD の作り方を説明してます。
     <p>
<li> CD-R に ISO イメージを書きこむ
     <p>
     ISO イメージファイルがあれば、単に CD に書くだけです。
     これは<PKGSRC>sysutils/cdrecord パッケージの "cdrecord" コマンドで行ないます。
     ブランク CD-R を入れて、さあ、始めましょう:
     <p>
     <pre>
     # <b>cdrecord -v dev=/dev/rcd0d data.iso</b>
     ...
     #
     </pre>

     コマンドの実行が始まると、 'cdrecord' はドライブ、ディスク、
     書きこむイメージに関する沢山の情報を表示します。
     止めるためのラストチャンスとして10秒間カウントダウンし
     - 中止したければ ^C を押します。
     中止しなければ、 process は CD に全イメージを書き
     シェルプロンプトにもどります。
     <p>
     注釈 cdrecord(8) は SCSI と IDE (ATAPI) ドライブ両方で動きます。
     <p>
<li> 試験
     <p>
     書き上がったばかりの CD をマウントし、 まったくの"標準"CD として試します。

<a href="#cdrom">上</a>を見てください。
     <p>
</ol>


<ENTRY>cdr-audio CD-R ライターを使ってオーディオ CD を作る

オーディオ CD のバックアップコピーを作りたい場合、 CD から
<a href="#cdrom-audio">オーディオトラック</a>を抽出 ("リッピング") して、
ブランク CD に書くことができます。
もちろん、複数の CD から個々のトラックを抽出して、
あなただけのミックス CD を作ることだってできます!
<p>

手順は以下のとおりです:
<p>

<ol>
<li> <a href="#rip">NetBSD で音楽 CD を使う</a>の説明に従って、
     オーディオトラックを抽出し、
     .wav ファイルにします。
     <p>

<li> この .wav ファイル群を <PKGSRC>sysutils/cdrecord を使って書き込みます:
     <p>

     <pre> # cdrecord -v dev=/dev/rcd0d -audio -pad *.wav </pre>
</ol>

<ENTRY>cdr-mp3 mp3 からオーディオ CD を作る

あなたがお持ちのオーディオ CD がすべて mp3 に変換済であって、
(たとえば) クルマで使うためにミックス CD を作りたいような場合、
まずはその .mp3 ファイルを .wav フォーマットに戻せばよいです。
それから、その .wav ファイルから通常のオーディオ CD として書き込みます。
<p>

この場合の手順は以下のとおりです:
<p>

<ol>
<li> .mp3 ファイルから .wav ファイルを作る:
     <pre> $ mpg123 -w foo.wav foo.mp3 </pre>
     これを、オーディオ CD 化したいすべての mp3 ファイルについて行ないます。
     .wav のファイル名はお好きなように付けてかまいません。
     <p>
<li> ``<a href="#cdr-audio">CD-R ライターを使ってオーディオ CD を作る</a>''
     の説明に従い、 .wav ファイルを CD に書き込む。
     <p>
</ol>

<ENTRY>copy-audio-cd オーディオ CD をコピーする

オーディオ CD をコピーするには、 CDDA 標準で定められただけの休止が挿入されていない
CD であっても、 cdrdao を使っておこなうことができます。

<pre>
# cdrdao read-cd --device=/dev/rcd0d data.toc
# cdrdao write   --device=/dev/rcd1d data.toc
</pre>

<ENTRY>copy-cd 2 台のドライブを使ってデータ CD をコピーする

CD-R と CD-ROM ドライブの両方を持つマシンでは、
下記のコマンドでデータ CD をコピーできます。

<pre>
# cdrecord dev=/dev/rcd1d /dev/rcd0d
</pre>

ここで、 CD-ROM (cd0) にはコピーしたい CD 、 CD-R (cd1) にはブランク
CD を入れておきます。この方法は、データの入ったコンピューターディスク
でのみ使え、オーディオ CD では<i>使えない</i>ことに注意してください。
実際には、より速くするために "<tt>speed=8</tt>" などを追加しても
よいでしょう。
<p>


<ENTRY>cdrw CD-RW リライタブルを使う

NetBSD では CD-RW ドライブは <a href="#cdr">CD-R</a> ドライブのように扱うことができ、
 mkisofs(8) でイメージをつくり、 cdrecord(8) で CD-RW メディアに書きこむことができます。

<p>
ブランク CD-RW が欲しいなら、 cdrecord の "blank" オプションで作ることができ:
<p>
<pre>
# cdrecord dev=/dev/rcd0d blank=fast
</pre>
ブランク CD-RW を作る他のいくつかの方法があり、
"blank=help" をつけ cdrecord(8) を呼ぶとリストが得られます。
より多くの情報は cdrecord(8) マニュアルページを見てください。

<ENTRY>dvd DVD サポート
現在、 NetBSD は CD-ROM でも使われている ISO9660 として だけども
DVD メディアをサポートしています。
DVD 上にある 新しい UDF ファイルシステムはサポートしていませんが、
ほとんど全ての DVD は ISO 9660 ファイルシステムを使っていて、良く使えます。
DVD、 DivX および多くの avi ファイルは、 <PKGSRC>graphics/ogle や
<PKGSRC>graphics/gmplayer で再生できます。
<p>
DVD 作成のうえでのいくつかのヒントについては、この
<a href="http://mail-index.NetBSD.org/current-users/2004/01/06/0021.html">
growisofs に関する記事</a>を参照してください。


<SECTION>一般の(それと一般ではない)問題

<ENTRY>nroff-missing 'man' を実行すると <b>/usr/bin/nroff: not found</b> となります
'text' セット (text.tgz) をインストールする必要があります。インストールノートを見てください。

<ENTRY>var-mail-permissions メールを読んでいる時 '<b>Unable to lock mailbox: Permission denied</b>'が出ます

 <tt>/var/mail</tt> ディレクトリーのパーミッションをチェックしてください。
それは '<tt>drwxrwxrwt</tt>'となっているべきで:
<pre>
% <b>ls -ld /var/mail</b>
drwxrwxrwt  2 root  wheel  512 Nov  6 08:21 /var/mail
</pre>
そうでなければ、 root になって '<tt><b>chmod 1777 /var/mail</b></tt>' を実行します。

<ENTRY>kernel-not-netbsd '<tt>netstat -r</tt>' を実行すると <b>netstat: kvm_read kvm_read: Bad address</b> となります

これはなにも心配はいりません。
 基本的に、 <tt>/netbsd</tt> というファイルは
あなたの現在のカーネルではありません。
たくさんのプログラム( <tt>ps</tt>, <tt>who</tt>, <tt>systat</tt> 等のような)
や libkvm (kvm(3))は
カーネル内がどうなっているかを知るために <tt>/netbsd</tt> をアクセスします。

それで、この手のエラーを回避する為に、
あなたの現在のカーネルを <tt>/netbsd</tt> に単純にリネームすることができます。

これをしている時に動作中のカーネルを上書きしていないか確かめてください。
それが、あなたがしようとしていることではないかぎり。

<ENTRY>libkvm-mismatch '<tt>netstat -r</tt>' をしてみると、限りないクエスチョンマークの列が帰ってきます。 何が悪いの?
それは、 <tt>libkvm/netstat</tt> と <tt>/netbsd</tt> の間で不適合になっているからです。
または、 <tt>/netbsd</tt> という名前ではないカーネルを走らせているからです。
この問題のほかの兆候は、
 <tt>who</tt>, <tt>ps</tt>, <tt>ifconfig</tt> や <tt>systat</tt> 
のようなものも良く動かないことでしょう。
もし、カーネルとバイナリーを同時にアップデートすれば、解決するでしょう。

<ENTRY>kernel-upgrade 新しいカーネルにアップデートしたあと、 <tt>w</tt>, <tt>ps</tt>, と <tt>netstat</tt> が働きません

2つのうちの1つです。
 現在起動しているカーネルが <tt>/netbsd</tt> と名づけられていないか、
使っているカーネルとバイナリーの間で不適合があるかのどちらかです。

 最初の場合、単純に現在起動されているカーネルを
 <tt>/netbsd</tt> にリンクをつくることで、問題は解決します。
<p>

2番目の場合、ダイナミックリンクされたバイナリーは、
 libkvm を新しいカーネルに適合するようにアップグレードすることで、
直せます。

スタティックリンクされたバイナリーは
より新しいバージョンの物に置きかえる必要があります。

それらはスタティックリンクされているので、
それらを再コンパイルしようとするなら、
問題のプログラムの再構築をする <b>前に</b> <tt>libkvm.a</tt> を再構築する必要が
あります。
<p>
John Wittkowski (jpw@netscape.com) に感謝、
これは彼による ( <tt>/bin/ps</tt> のほかに)
libkvm に依存するプログラムのほとんどの一覧です
(これらの全ては <tt>/usr/bin</tt> にあります): 
<ul>
<li><tt>fstat</tt>
<li><tt>gdb</tt>
<li><tt>ipcs</tt>
<li><tt>netstat</tt>
<li><tt>nfsstat</tt>
<li><tt>systat</tt>
<li><tt>uptime</tt>
<li><tt>vmstat</tt>
<li><tt>w</tt>
</ul>

<ENTRY>proc-size-mismatch カーネル変更後 'ps' が <b>"proc size mismatch"</b> と言います


この前にある3つの疑問のように、
その答えは、たいてい、
libkvm がカーネルやバイナリーと同期がとれていないからです。

この問題を解決するには、
カーネルに適合したバイナリー配布物を手に入れるか、
下に示した方法で構築するかのどちらかの方法がとれます:

<blockquote><pre>

"proc size mismatch" エラーが出て、 lib のアップデートが必要だと決意した場合、
次のようにします:

1. 全ソースコードを手に入れます。
   もし、あなたがこれをしたり、再コンパイルをすることを望まなくても、
誰かがこの作業をしたか探すよりは、
いちいち手作業をしてインストールに挑戦しましょう。

2. インクルードファイルが 更新されているか確認します。
   このようにし:
      cd /usr/src
      make includes
   これは、ちょっと時間がかかるでしょう。
   いくつかの Makefile に INSTALL 変数が定義されていなかったため、
   私は何度かトラブルに遭いました。

 "make includes" が失敗するごとに、
表示されている、最後のディレクトリーに行って、
 Makefile にこの行を加えました:
      INSTALL=/usr/bin/install

これを何度か行なうことで、エラーなしに終わることができました。


   (まず、 /usr/bin/make と /usr/share/mk 内の全てのファイルが
    更新されていることを確かめれば、 上の問題点を避けることができるでしょう。)

3.  libkvm を再構築し、インストールします:
      cd /usr/src/lib/libkvm
      make
      make install

   注意として、 libkvm を得る目的で
   私のシステムでコンパイルをするのに、
   次のようなリンクを加える必要がありました:
      cd /usr/include/machine
      ln -s ../m68k/kcore.h kcore.h
   これはたぶん私のシステムの癖なので、
   最初にこれをせずにコンパイルを試してください。

4. そして、 libkvm にスタティックリンクされたバイナリーを再構築します。
   私が気がついているスタティックリンクされたプログラムは
    "/bin/ps" だけで、  ps の再構築には、単純に:
      cd /usr/src/bin/ps
      make
      make install

5.  libkvm にダイナミックリンクされたバイナリーは、
   再構築が必要かもしれませんし、必要ないかもしれません。
   これは、なぜかと言うと(私が考えるに)、
   古いバイナリーに対し、 lib の メジャーバージョン番号 が変わるなら、
   古いバージョン番号を求めていて、新しいバージョンの lib では動かないでしょう。

   たとえば、 私の古い libkvm は libkvm.so.4.0 で、
   その新しいものは libkvm.so.5.0 です。
   ダイナミックリンクされたバイナリー を再コンパイルしなければ、
    "proc size mismatch" ( 4.0 lib がまだそこにあれば)か、
     some lib missing error ( /usr/lib から 4.0 lib が取り除かれていれば)
   と不平を言うでしょう。

   マイナーバージョンナンバーの変更 (たとえば 4.0 から 4.1) なら
    warning を出しながらも動き、
   これらの全てを再コンパイルする必要はないでしょう。

   私が気がついている ダイナミックリンクされたバイナリーは
    "proc size mismatch" エラー ( 4.0 lib がまだそこにあれば) か
    some lib missing エラー ( /usr/lib から 4.0 lib が取り除かれていれば) 
   を出すでしょう。
   マイナーバージョンナンバーの変更 (たとえば 4.0 から 4.1) なら
    warning を出しながらも動き、
   これらの全てを再コンパイルする必要はないでしょう。

   私が気がついているダイナミックリンクされたバイナリーは:
      /usr/bin/fstat
      /usr/bin/gdb
      /usr/bin/ipcs
      /usr/bin/netstat
      /usr/bin/nfsstat
      /usr/bin/systat
      /usr/bin/uptime ( /usr/bin/w にリンクされています)
      /usr/bin/vmstat
      /usr/bin/w
   注意 /usr/bin/uptime は /usr/bin/w にリンクされていて、
    w に対して "make install" をすることで、セットアップされるでしょう。

   これらを再コンパイルするには、次のようにし:
      cd /usr/src/usr.bin/&lt;cmd&gt;
      make 
      make install
   たとえば、 /usr/bin/vmstat を再コンパイルするには:
      cd /usr/src/usr.bin/vmstat
      make
      make install
</pre></blockquote>


これに関する具体的な答えをくれた John Wittkowski (jpw@netscape.com) に感謝

<p>

小さな背景: 
これらのシステムユーティリティーに、上にあげたすべての問題も含め、
カーネルメモリー情報を手に入れさせ続ける必要がある理由は、
この手段がカーネルクラッシュダンプに対しても働き、
カーネルデバッグ作業に便利な特徴になることが出来るからです。

<ENTRY>hash-map-alias0 '<b>hash map "Alias0":unsafe map file \
    <tt>/etc/aliases</tt>: No such file or directory</b>' が表示されます

root 権限で '<b><tt>newaliases</tt></b>' と打つことで直せます。<br>

sendmail は aliases(5) ファイルが存在しないとこれを報告します。

注 sendmail(8) は実際には
   <tt>/etc/aliases.db</tt> ( <tt>/etc/aliases</tt> からつくられる高速参照
   hash(3) マップ) を使い、それで、このエラーメッセージは小さな誤解をおこすのです。

これは、 NetBSD 1.3 から 1.4 だけで、注意すべきで、
ほかのバージョンでは、
必要に応じて <tt>/etc/sendmail.cf</tt> を自動的に再構築する
異なる <tt>/etc/sendmail.cf</tt> を持っています。

もし、古くても NetBSD 1.4.1 を走らせていなければ、
新しい <a href="../../Releases/formal.html">公式リリース</a> 
にアップグレードするべきです。

<ENTRY>portmap-messup どうやったら、 root でログインした時のシェルが出す <tt>portmap</tt> メッセージ を抑制できますか

 <PKGSRC>security/sudo をつかって、そして、決して root でログインしないでください。
<p>

root でログインする必要があるなら、
<tt>/etc/syslog.conf</tt> ファイルを編集することで、
うるさいメッセージを抑制するために
重要な 装備 を外すことができます。

たいていの場合、それは、次の行の
<tt>auth.debug</tt> を無効化することで充分で:
<pre>*.notice;auth.debug                                     root</pre>

これで、それらのうるさい 
<tt>portmap&nbsp;[pid]:&nbsp;connect&nbsp;from&nbsp;some.other.host&nbsp;...</tt> 
メッセージが消えるでしょう。

必ず
 <tt>kill&nbsp;-HUP</tt> <tt>syslogd</tt> の pid 
をしてください。
<p>

 <tt>xconsole</tt> を使うために、
 <a href="../x/#xconsole">FAQ 項目</a>も見るのもいいかもしれません。

<ENTRY>locales どうやったらウムラウトその他の地域的な文字を表示できますか?

NetBSD 1.6 には、デフォルトで数々のロケールがインストールされています。これらのロケールは
<tt>/usr/share/locales</tt> にあります。あなたの居住地にもっとも合ったロケールを選んで、
環境変数 LC_ALL を適切に設定してください。なお、 LC_ALL をたとえば ``de_DE''
に設定するのでは不十分なことに注意してください。 ``de_DE.ISO8859-15'' のような
<em>完全な</em>ロケールを使う必要があります
<p>
古いバージョンの NetBSD 向けに、<a
href="http://mail-index.NetBSD.org/netbsd-users/2000/11/09/0019.html">メール アーカイブ</a>
からの情報を以下に示します:
<ol>
<li> <a href="ftp://ftp.NetBSD.org/pub/NetBSD/arch/i386/french-1.4/locale.tgz">locale.tgz</a> を
取得してください。
<li> / にそれを展開し: <tt>tar plzvxCf / locale.tgz</tt>
<li> シェルで、 set LC_ALL=iso_8859_1 してください。
(常時設定にするには、 .cshrc 、 .profile 、 ...において)
<li> シェルを再起動するか、ログインしなおしてください。
<li> シェルを見ると、 vi その他 キーボードからのこれらウムラウトのすべてを
受け付けます: &ouml;&auml;&uuml;&Auml;&Ouml;&Uuml;...
(訳者注:環境によっては化けているかもしれません)
</ol>

<SECTION>ディスクおよびファイルシステム
<ENTRY>adding-a-disk 存在しているシステムにディスクを追加する
<ol>
<li>システムを Halt(停止) します
<li>新しいドライブをつなぎます
<li>マシンが PROM か BIOS を持っていて、ドライブ一覧が出せるなら、
    そのドライブが認識されているかチェックします:
    <ul>
    <li><b>最近の sparc</b>: 起動開始以前に
 <tt><b>[STOP][A]</b></tt> を押し、そして "<tt>ok</tt>" プロンプトの所で <tt><b>probe-scsi</b></tt>。

    <li><b>adaptec BIOS の入っている i386 </b>:起動開始以前に、
 <tt><b>[CTRL][A]</b></tt> を押し、BIOS にはいります。
    <li><b>他のもの</b>: もっと詳しいこと(を寄せられること)を歓迎します :)
    </ul>
<li>boot します。
<li> <tt><b>dmesg(8)</b></tt> 出力に ドライブが記録されているか確かめます
<li>ディスクラベルを用いてパーティションに disklabel(8) を書きこみます<br>
        (もし、ディスクにディスクラベルがまだなければ、たぶん以下のようにすることになるでしょう:<br>
  <tt><b> disklabel -i -I sd1</b></tt> # "sd1: no disk label" という警告はすべて無視します<br>
    パーティション 'c' は、ディスクのうち NetBSD 部分全体として予約されており、
    一部のポート (特に i386) では同様に 'd' がディスク全体として予約されています。
    以下はセッションの例で、ディスク全体をひとつのパーティション 'e'
    として設定しています:
<pre>
	partition&gt; <b>e</b>
	Filesystem type [?] [unused]: <b>4.2BSD</b>
	Start offset [0c, 0s, 0M]: 
	Partition size ('$' for all remaining) [0c, 0s, 0M]: <b>$</b>
 	e: 234375000         0     4.2BSD      0     0     0   # (Cyl.    0 - 232514*)
	partition&gt; <b>W</b>
	Label disk [n]? <b>y</b>
	partition&gt; <b>Q</b>
</pre>
    <tt>disklabel -i</tt> の実行中は、さらなるヘルプを '?' で参照できます。
<li>追加されたファイルシステムごとに、
 <tt><b>newfs &lt;filesystem&gt;</b></tt>
    (ここで <em>&lt;filesystem&gt;</em> は生(raw)デバイスのパーティションです。
      /dev/rsd1e, /dev/rwd1f, ... のような)
<li>ファイルシステムを <tt>/etc/fstab</tt> に書きこみます。
<li>それを fsck(8) します: <tt><b>fsck -f &lt;filesystem&gt;</b></tt>
<li>それを mount(8) します: <tt><b>mount -va</b></tt>
</ol>

<ENTRY>softdeps  soft updates (softdeps) はどうやって使うの?
    Frank van der Linden
    (<A HREF="mailto:frank@wins.uva.nl">frank@wins.uva.nl</A>)
    はメインツリーに
     Kirk McKusick の 精巧な sync + FFS soft update コードを
    持ってきました。
    <p>
    使うには、次のようにします:

    <ol>
    <li>カーネルコンフィグファイルに "<tt>options SOFTDEP</tt>" をつけて
        新しいカーネルをコンパイルします。
        このオプションは GENERIC カーネルでは有効になっています。
    <li>新しいカーネルを走らせます。
    <li> <tt>/etc/fstab</tt> の中で、 softdeps を使いたい全てのファイルシステムに
        "<tt>softdep</tt>" マウントオプションを追加します。
        たとえば、このような行は
<pre>
/dev/wd0e    /usr    ffs     rw                      1 2
</pre>
このように変更します:
<pre>
/dev/wd0e    /usr    ffs     rw<b>,softdep</b>              1 2
</pre>
    <li>リブートします。
    <li>遊ぼう!
    </ol>


<ENTRY>softdep-impact softdep による改善はどう判断してるの?

変化したデータが直ちにディスクに書き込まれない事実から、
システムがもっと速くなったと思われます。
現時点では、これを表わす数字はありません。
<p>

Paul Vixie は、softdep が
ありとなし
の両方のシステムで、一つのディレクトリーに (ランダム順に) 75.000 ファイル を蓄え検索する
ベンチマークを走らせました。
この結果は、大きなディレクトリーにおいて、生成および配置の両方のファイルアクセス時間が、
一般的に、soft dependencies なシステムのほうが良い結果であることを
示しています。(この場合の softdep システムは FreeBSD 4.2で、
非-softdep システムは BSD/OS 3.1 です。
 NetBSD システムでも softdep の有る無しで見られる挙動は似たものであるはずです)。
<p>

<ENTRY>ffs-integ Fast File System (FFS)、 softdeps を使った FFS および NetBSD の ext2fs の実装の、不適切なシャットダウンに対する回復性はどうですか?

FFS では、ファイルシステムがクラッシュ後に修復可能であることを保証すべく、
メタデータ操作をそれが参照するデータの実体の操作より先に行うことと、
さらに、あらゆるメタデータ操作は適切な順序で行なうことに注意を払っています。
最後の N 秒 (N は同期間隔) ぶんの<i>ファイルデータ</i>は、修復不可能に
なるかもしれませんが、それでもファイルシステムメタデータは修復可能です。
この N は通常は 30 です。
<p>    
softdeps を使うと、通常の FFS と<i>ほとんど</i>同じだけの信頼性が得られます。
softdeps では、クラッシュ前のある時点における、
矛盾のないファイルシステムのスナップショットを得られることが保証されます。
このため、たとえば、ロックファイルのリネームといった不可分な操作を行なった場合、
softdeps を使わない場合と同じく、ロックファイルが本当にあることはわかりません;
しかし、そのファイルのあったディレクトリーが消されないことと、
この不可分な操作と将来の不可分な操作の間の依存関係の順序が保持されることはわかります。
このため、制御が不可分な操作に依存している場合、
たとえば、ある種のデータベース的なプロセス (大量のメールスプールファイルの
書き込み、取引システムからのデータ集計などなど) では、
それが終わったように見えた時点で、安全にバックアップを取ることができます。
<p>
NetBSD の ext2fs の実装は、メタデータに関して、 (Linux の実装とは違って)
旧来の FFS 並の保証をしていますので、 Linux でネイティブの ext2fs
を使う場合よりも多くの信頼を持って実際に使うことができます。
若干遅くなるという欠点はあります。しかしこれは、
システムクラッシュ時に適切な扱いをして、
潜在的なファイルシステム破壊の可能性を避けるようにしたためなのです。

<ENTRY>moving-usr  /usr をルートからほかのパーティションに移す
    <ol>
	<li>希望する新しい位置(例えば <tt>/dev/sd0e</tt>)が
	   存在する他のどのパーティションとも重ならないことを確かめます。
	   disklabel(8) の出力をチェックします。
	<li>移動先にまだファイルシステムがなければ、以下を実行します。
	<dl>
	<dd><tt># <b>newfs /dev/sd0e</b></tt></dd>
	</dl>
	<li>それをマウントし、データを向こうへコピーします:
	<dl>
	<dd><tt># <b>mount /dev/sd0e /mnt</b></tt></dd>
	<dd><tt># <b>cd /usr</b></tt></dd>
	<dd><tt># <b>pax -rw -pe . /mnt</b></tt></dd>
	<dd><tt># <b>umount /mnt</b></tt></dd>
	</dl>
	<li><tt>/etc/fstab</tt> を編集し、
	   '<tt>/dev/sd0e /usr ffs rw 1 2</tt>' を加えます。
	   ( <tt>/dev/sd0e</tt> はあなたの状況に応じて変えて下さい)。
	<li>シングルユーザーモードに shutdown し、
	    新しいマウントポイントをつくります:
	<dl>
	<dd><tt># <b>shutdown now</b></tt></dd>
	<dd><tt># <b>mv /usr /usr.old</b></tt></dd>
	<dd><tt># <b>mkdir /usr</b></tt></dd>
	</dl>
	<li>システムを起動し、テストし、まったく良好なら、
	   '<tt>rm -rf /usr.old</tt>' します。
    </ol>

<ENTRY>read-only-to-read-write どうやって'リードオンリー'ファイルシステムを読み書きできるようにマウントするの?
mount(8) の <tt>-u</tt> (update) スイッチを使ってください:
'<b><tt>mount -u /</tt></b>'。
あなたはおそらくシングルユーザーで起動したのでしょうが、この場合、
ルートファイルシステムは、標準でリードオンリーでマウントされます。
これは、マルチユーザーでシステムが起動する前に、
手動で fsck を走らせる機会を与えてくれます。
読み書きできるように、
<tt>/etc/fstab</tt> の全てのファイルシステムをマウントするもうひとつの方法は
'<b><tt>mount -a</tt></b>' をつかうことです。
<p>
しかしながら、これをする一番良い方法は、シングルユーザーシェルを抜けて
マルチユーザーモードに入ることです。
これで、 <tt>/etc/fstab</tt> に載せられているモードで
その全てのファイルシステムをマウントします。

<ENTRY>using-fsck いつ fsck を使うのが安全なの?
 fsck(8) は、アンマウントされているか、
リードオンリーのファイルシステムにだけ
使うようにしてください。
読み書きできるファイルシステムに
fsck(8) をかけることは危険で、ファイルシステムをより悪くしてしまうかもしれません。
シングルユーザーモードでシステムを起動すれば、リードオンリーでマウントされます。
そこで '<b><tt>fsck -p</tt></b>' とすることで、
システムがマルチユーザーモードで起動する前に、
全てのファイルシステムをチェックすることができます。
もし、ファイルシステムに既に "clean," とマークされているけど、
それでもまだチェックしたいなら、
<tt>fsck(8)</tt> に <tt>-f</tt> フラグ を使うことができます。
<p>
fsck を使って、ファイルシステムになにかの変更がされたら
たぶん、ディスクを同期せずに機械をすぐリブートするために
 '<b><tt>reboot -n</tt></b>'
と打つのが、一番良いことでしょう。

<ENTRY>kernfs  <tt>/kern</tt> は何に使われているの?
それは、 kernfs ファイルシステムのマウントに使われています。
mount_kernfs(8) マニュアルページを見てください。

<ENTRY>procfs  <tt>/proc</tt> は何に使われているの?
それは、 procfs ファイルシステムのマウントに使われています。
<i>The Design and Implementation of the 4.3BSD UNIX Operating System</i>
by Leffler, McKusick, et al., p. 104-5, 436 を調べてください。
mount_procfs(8)  マニュアルページも見てください。
<p>

これは、普通 root で '/proc' ディレクトリーを作って、
/etc/fstab ( fstab(5) を見よ) に次のように加えることで使われています:<br>
<tt>/proc /proc procfs rw 0 0</tt>
<p>

NetBSD では <tt>/proc</tt> はプロセス関連のデータ専用になっているため、
それ以外の linux で使われているような項目は提供されません。しかし、
以下のようにファイルシステムフラグに "<tt>linux</tt>" オプションを加えることで、
変えることができます。<br>
<tt>/proc /proc procfs rw<b>,-olinux</b> 0 0</tt>
<p>

<ENTRY>cgd-swap cgd(4) を使ったスワップの暗号化
スワップの暗号化については時々話題にのぼるため、ここで示す情報は
スワップスペースの暗号化に関心がある人にとっては有用かもしれませんが、
必須のものではありません。
<p>
現在、制約がひとつあります。 cgd デバイスは、 4.2BSD
と記されているスライスただひとつを含んだディスクラベルから作られますが、
これはスワップに使うには不適切です。
これが、 cgd ドライブをスワップデバイスとして使うことが面倒な理由です。
Roland Dowdeswell がこのことを調べており、近い将来解決されるはずです。
<p>

実際の例を示します:

  スワップデバイス wd0b を、 256 ビット aes-cbc 鍵を使って cgd1
  として設定します。手順の説明は以下のとおりです。

<pre>
  1) cgd デバイス用のパラメーターファイルを作ります。デフォルトでは /etc/cgd/wd0b
     になりますが、ここでは説明しやすくするため /etc/cgd/swap を使います。

     # cgdconfig -g -V none -k randomkey aes-cbc > /etc/cgd/swap

  2) wd0b 上の cgd デバイスを設定します (この時点では wd0b
     がスワップデバイスとして使われていないことを確認してください)。

     # cgdconfig cgd1 /dev/wd0b /etc/cgd/swap

  3) cgd1 用にディスクラベルを編集します。妥当なスワップスライスを作る必要があるからです。
     編集したディスクラベルをファイルに保存します。

     # disklabel -e -I cgd1

     # /dev/rcgd1d:
     type: cgd
     disk: cgd
     label: default label
     flags:
     bytes/sector: 512
     sectors/track: 2048
     tracks/cylinder: 1
     sectors/cylinder: 2048
     cylinders: 128
     total sectors: 263655
     rpm: 3600
     interleave: 1
     trackskew: 0
     cylinderskew: 0
     headswitch: 0           # microseconds
     track-to-track seek: 0  # microseconds
     drivedata: 0

     4 partitions:
     #        size    offset     fstype  [fsize bsize cpg/sgs]
      d:    263655         0     4.2BSD      0     0     0   # (Cyl.    0 - 128*)

     スワップスライスを作り、ラベルを変更します (これは本当に必要なわけではなく、
     単に自分用の情報としてのものです)。

     # /dev/rcgd1d:
     type: cgd
     disk: cgd
     label: swap
     flags:
     bytes/sector: 512
     sectors/track: 2048
     tracks/cylinder: 1
     sectors/cylinder: 2048
     cylinders: 128
     total sectors: 263655
     rpm: 3600
     interleave: 1
     trackskew: 0
     cylinderskew: 0
     headswitch: 0           # microseconds
     track-to-track seek: 0  # microseconds
     drivedata: 0

     4 partitions:
     #        size    offset     fstype  [fsize bsize cpg/sgs]
      a:    263655         0       swap                      # (Cyl.    0 - 128*)

    そして、ファイルに保存します。

     # disklabel cgd1 > /etc/cgd/swap.disklabel

  4) cgd デバイスを、ブート時に自動的に設定されるようにします。
     /etc/cgd/cgd.conf に以下の行を追加します。

     cgd1 /dev/wd0b /etc/cgd/swap

  5) ここで、ブート時に新たに作られた cgd デバイスにディスクラベルを書き戻す必要があります。
     以下のような単純な関数が書かれた /etc/rc.conf.d/cgd を作ります。

     swap_device="cgd1"
     swap_disklabel="/etc/cgd/swap.disklabel"
     start_postcmd="cgd_swap"

     cgd_swap()
     {
             if [ -f $swap_disklabel ]; then
                     disklabel -R -r $swap_device $swap_disklabel
             fi
     }

  6) cgd デバイスを、スワップデバイスとして /etc/fstab に追加します。

     /dev/cgd1a none swap sw 0 0
</pre>

以上ですべてです。これで、 'swapctl -a /dev/cgd1a' または単にリブートすることで、
スワップパーティションを有効化できます。
<p>

以上でお見せした設定は、筆者のラップトップの設定です。
<pre>
   Device      1K-blocks     Used    Avail Capacity  Priority
   /dev/cgd1a     131827     8828   122999     7%    0
</pre>


<SECTION>ブート関連の質問
<ENTRY>why-single-user シングルユーザーモードってなに? 必要な理由と使い方は?
'single-user' モードはカーネルがブートした時の状態で、
コンソール上で1つのシェルが動いています。
シングルユーザーで起動すると、ルートファイルシステムだけが
リードオンリーでマウントされます。
多くのユーザーにとって、シングルユーザーモードは:
<ul>
<li>傷んでる疑いのためにファイルシステムに <tt>fsck</tt> をかける。
<li> <tt>/etc</tt> にある傷んだシステム設定ファイルを編集する。
<li>ダウンロードあるいは自分でコンパイルした新しいバイナリーセットをインストールする。
<li>ユーザープロセスからの干渉を気にせずにファイルシステムのバックアップをとる
</ul>
動作中のシステムから、 root 権限で 
 '<tt><b>shutdown now</b></tt>' を実行することで、
シングルユーザーモードに入れます。
または、システムの起動中に、
 '-s' フラグを使う(この方法はポートごとによってさまざまです)
ことでもできます。
<p>
シングルユーザーで起動した場合には、次のようないくつかのコマンドが便利かもしれません:
<ul>
<li><tt><b>fsck -p ; mount -va</b></tt><br>
    fsck(8) でファイルシステムをチェックし、それを mount(8) で使える状態にします。
<li><tt><b>set -E</b></tt><br>
    コマンドライン編集を有効にします。
<li><tt><b>TERM=vt220 ; export TERM</b></tt><br>
    'vi(1)' のようなエディターが動作できるように、
    TERM 変数を設定し、 export します。
    注意: コンソールタイプによって 'vt220' を別のターミナルタイプにする必要があります。
<li><tt><b>sh /etc/rc.d/network start</b></tt><br>
    ネットワークを起動します。
    nfs マウントされたファイルシステムがあるなら、
    fsck と mount の前に実行する必要があるでしょう。
    NetBSD 1.5 より前のシステムの場合は、このコマンドは
    <tt><b>sh /etc/netstart</b></tt><br> にします。
</ul>

<ENTRY>single-user-to-multi-user どうやって、シングルユーザーからマルチユーザーに移行するの
シングルユーザーシェルを "exit" か ctrl-D で抜けてください。
<p>

これで、システムはマルチユーザーモードで起動し、各種サービス等が開始されます。
シングルユーザーからマルチユーザーへの移行の際にはディスクが検査されないことに
注意してください。
<p>

<ENTRY>boot-messages ブートメッセージはどうやって読むの?
システムメッセージバッファーは dmesg(8) で表示できます。
これは(1.4 以降では)いつも起動後ごとにすぐに
 /var/run/dmesg.boot に自動的に貯められます。
カーネルインストールで kernfs ( mount_kernfs(8) を見よ) 
が有効になっているなら、
 <tt><b>more /kern/msgbuf</b></tt> もしてください。

<ENTRY>shutting-down どうやって機械をシャットダウンするの?
シングルユーザーモードに落ちるなら、
 '<b><tt>shutdown now</tt></b>' を使ってください。
機械を停止するのなら
 '<b><tt>shutdown -h now</tt></b>' を使ってください。
いくつかのポートでは、実際に電源を落とすなら
 '<b><tt>shutdown -p now</tt></b>' を使う必要があります。
完全な詳しいことは shutdown(8) マニュアルページを見てください。

<ENTRY>rebooting どうやって、機械をリブートするの?
'<b><tt>shutdown -r now</tt></b>' か '<b><tt>reboot</tt></b>' を使ってください。
  より細かいことは shutdown(8) や reboot(8) マニュアルページを見てください。

<ENTRY>cron-reboot 起動時にプログラムを開始する
システムのブート時にプログラムを起動するために、 <tt>/etc/rc.local</tt>
にあらゆるコマンドを追加することができます。これは、ブート過程の
一番最後に実行されます。
<p>

root 以外の大多数のユーザー向けの代替策として、
( NetBSD で使っている) Vixie cron(8) の特別な時間指定 <strong>@reboot</strong>
は、与えられたプログラムを cron(8) 起動時に開始することが可能です。
それはたいてい、システム起動時と一致します。これは root 特権の無いユーザーに、
起動時にコマンドを自動的に実行させることを許しているということです。
<p>


<SECTION>メモリー/スワップの構成
<ENTRY>swap スワップスペース(空間)はどのくらい
    古い unix システムでは、RAM の倍ほどの大きさのスワップスペースが推奨されています。
    これはなぜなら RAM のアクティブページは swap 上に配置されていなければならず、
    事実上、 仮想メモリーの合計は、 スワップ空間の大きさによって制限されていたからです。
     NetBSD では、これはもはや正しくなく、仮想メモリー合計は、スワップ + RAM が近似値です。
    <p>
     NetBSD の下では、スワップ空間は3つの基本的な利用目的があって:
    <p>
    <ol>
    <li><strong>仮想メモリーの追加</strong><br>
    変更されたデータを含むアクティブページが少なくなると、
    物理メモリーより大きく準備された仮想メモリーとして
    データがスワップ空間へ移動することができます。

    <p>
    <li><strong>カーネルのコアダンプのための場所</strong><br>
	これは起動時、 savecore(8) に読まれます。
	これが機能するためには、プライマリースワップパーティションは
	全 RAM 容量よりわずかでも大きい必要があります。
    <p>
    <li><strong> mfs(8) ファイルシステムのため</strong><br>

	 /tmp を使うあらゆるプログラムの高速化のために、
	古典的に /tmp をマウントすることで、
	 fstab(5) ファイルに次のように加えることによって:
	<pre>	swap  /tmp  mfs  rw,-s=<em>SIZE</em> 0 0</pre>
	ここで <em>SIZE</em> は 512byte ブロックのものです。
	この要求されたスペースは、スワップ空間から
	ファイルシステムとして使うために持ってこられます。

    </ol>
    <p>

    スワップの'正しい'値と言うのは、システムの利用法に依存しますが、
    いくつか一般的なルールがあって:
    <ul>
    <li>基本容量として良いのは、 RAM容量か 32MB の大きい方に
        mfs(8) ファイルシステムの全容量を足した量です。
    <li>
         X(1) を実行するつもりなら、 RAM 容量の 1/2 か 16MBの大きい方を加えます。

    <li>いつもスワップ帯域が増加するように、
        可能な限り沢山のディスクをまたがるようスワップを分割してみます。

    <li>少ないよりは多いほうがと思います。- スワップを使い果たすと、
	システムは実行しているプロセスを kill させることができます。

    </ul>

<ENTRY>adding-swap 動作中のシステムにスワップを追加する

システムは、
 <a href="#swap">スワップスペースはどのくらい</a>のとおりの
充分なスワップ空間が設定されているべきです。
    <p>
    設定されているシステムにスワップを追加するには3通りの方法があります:
    <p>
    <ol>
    <li><strong>システムディスクを再構築し、
	大きなスワップパーティションを使います。
	</strong><br>
	この方法はおそらく最も美しい解決法ですが、
	明らかに重大な困難を伴います。
    <p>
    <li><strong>スワップパーティションを追加します。</strong><br>

	ディスク追加時に、 小さい 'b' パーティションをスワップの追加のために
	含めるのは、大抵良いアイデアで、
	 <tt>/etc/fstab</tt> ファイルに 起動時に自動的に有効になるように
	次の形式のエントリーを追加します
	<pre>	/dev/<em>DISK</em>b       none    swap sw 0 0</pre>
	(ここで、 <tt><em>DISK</em></tt> は 'sd1' や 'wd2' のような ディスクの名前です).
    <p>
    <li><strong>スワップファイルを作ります。</strong><br>
	もっとも早く、簡単な選択は、
	存在するファイルシステムにファイルをつくり、
	追加スワップ空間として使うことです。

	これをアクセスすることは、
	専用のスワップパーティションをアクセスするよりわずかながら
	遅いでしょうが、
	 (フラグメンテーションやファイルシステムオーバーヘッドによる)
	スワップの不足を解決する一時的なものとしてはよいでしょう。

	<p>
	10 MByte のスワップ空間を追加することは、
	充分な空き空間のあるファイルシステムを選ぶだけの簡単なことで:

	<pre>	# <b>dd if=/dev/zero bs=1m count=10 of=/somefilesystem/swap</b>
	# <b>chmod 600 /somefilesystem/swap</b>
	# <b>swapctl -a -p 1 /somefilesystem/swap</b></pre>
	`dd(1)' コマンド が 10 MByte の
	`<tt>/somefilesystem/swap</tt>' ファイルをつくります。
	このスワップファイルは、特権のないユーザーが
	その内容を読めないように、 chmod(1) 600 をする必要があります
	(swapctl(8) は誰でも読めるファイルは拒否します) 。
	そして、 `swapctl(8)' コマンドは 
	<tt>/somefilesystem/swap</tt> を
	優先度 1 のシステムスワップ領域として加えます。
	優先度 0 が (デフォルトの) 最も高い優先度です。
	優先度 1 にする理由は、ファイルへのスワップはわずかに遅いので、
	これを使うのは従来型のスワップを使い切ったときだけにしたいからです。
	<p>
	このファイルをずっとスワップとして使うようにし、
	リブートの都度有効にするため、 /etc/fstab
	に以下のように書いておきます:
	<pre>/somefilesystem/swap none swap sw,priority=1 0 0</pre>
    </ol>
<ENTRY>tuning-vm メモリーが少ないシステムでの性能改善のための仮想メモリーの調整
tech-kern メーリングリストの <a href=http://mail-index.NetBSD.org/tech-kern/2002/11/27/0005.html>
Simon Burge の記事</a>によれば、仮想メモリーの設定に手を加えることで、
メモリーの少ないマシンの性能を大幅に改善することができます。
この記事をすべて読んだうえで、どう設定すべきか決めることが最善ではありますが、
要点は、 <tt>sysctl -w vm.anonmax=95</tt> を実行するとよいということです。 sysctl(3)
マニュアルページによれば、これは「匿名アプリケーションデータを保持するために、
他のメモリーの用途から取り戻される物理メモリーのパーセンテージ」を変更します。

<SECTION>その他の疑問

<ENTRY>editing-files  NetBSD でのファイル編集
基本システムには2通りの明らかな選択肢があって:
<ul>

<li><b>ed(1) (Line 指向 のテキストエディター)</b><br>

    <tt>ed</tt> は非常に単純なテキストエディターです。
    これには、コマンドモード(起動時に選択されている)と
    入力(インプット)モードがあります。

    その一番の利点は、 '/' ファイルシステムだけがマウントされた
    シングルユーザーモードでも存在していて、
    正しいターミナルタイプに設定されていなくても動作することです。

     ed(1) の基本的な理解をすることは、価値のあることで、
    - 非常時に、 fstab(5) と rc.conf(5) ファイルを直すのに充分です。

<li><b>vi(1) (Screen 指向のテキストエディター)</b><br>

    <tt>vi</tt> は ex(1) のコマンドモードとインプットモードを持ち、
    だが、フルスクリーンビジュアルインターフェースが加えられています。

    vi は基本インストールで存在する唯一のスクリーンエディターで、
    実行には、妥当なターミナルタイプが要求されます。<br>

    たくさんのオンラインの vi チュートリアル(個人指導)があって:
    <ul>
    <li><PKGSRC>editors/vilearn - pkgsrc にあって、高く推奨します。
    <li><a href="http://www.thomer.com/vi/vi.html">
	VI 愛好者ホームページ(英文)</a>.
    <li><a href="https://engineering.purdue.edu/ECN/Resources/KnowledgeBase/Categories/editors/vi/">Purdue
	University Engineering Computer Network</a>.
    <li><a href="http://engr.smu.edu/co/help/vi-tutorial.html">
	 Southern Methodist University のいくつかの参考文献</a>
    </ul>

     rc.conf(5) の設定に vi を使うことを試みるなら、
      <a href="#why-single-user">シングルユーザーモード</a> の
     項目を読むべきです。
</ul>
<p>

pkgsrc の <PKGSRC>editors カテゴリーには、沢山の数のエディターがあって:
<ul>
<li><b><PKGSRC>editors/joe</b><br>

    WordStar と emacs のキー割り当て (<i>jstar</i>, <i>jmacs</i>) を
    エミュレートできる小さくて高速なエディター
    <PKGSRC>editors/joe は Borland IDE を使う人達に知られているでしょう。
<li><b><PKGSRC>editors/pico</b><br>
    非常にシンプルに使えるテキストエディターで、
    <PKGSRC>mail/pine メール パッケージで使われています。
<li><b><PKGSRC>editors/nedit</b><br>
    シンプルだけど便利な、融通の利く X ベースの GUI エディター。
<li><b><PKGSRC>editors/emacs</b><br>
    ことわざにある 'なんでもかんでも (everything and the kitchen sink)'
    なエディターで、完全な lisp インタープリターを含みます。
    小さな機械には推奨されません。
</ul>


<ENTRY>rebuilding-dev /dev の再構築

 /dev ディレクトリーには、
ハードウェアと 擬似デバイスをアクセスするために必要な
デバイスファイルが含まれています。
もしそれが、ダメージを受けていれば、

もっと不思議なことが結果として起こるでしょう。<br>
 /dev ディレクトリーを再構築するには、
まずシングルユーザーで起動するべきです
 (マルチユーザーででもできるかもしれないが、推奨しません)。そして:

<blockquote>
<ul>
<li><b>mkdir /newdev</b>
<li><b>cd /newdev</b>
<li><b>cp /dev/M* .</b>
<li><b>sh MAKEDEV all</b>
<li><b>cd /</b>
<li><b>mv dev olddev; mv newdev dev</b>
<li><b>rm -r olddev</b>
</ul>
</blockquote>

<ENTRY>connecting-a-ups NetBSD システムに UPS をつなぐ
UPS をつなぐのは単純なことだけど、
監視して、電源が落ちたときに、
きちんと NetBSD をシャットダウンするには、ちょっとした事が必要で:<br>
Simon J. Gerraty は
<a href="http://www.crufty.net/sjg/apcmon.html">APC Smart-UPS</a> を使うための
ページを開設しています。
UPS と通信するソフトウェアを書くには、 tcsetattr() 経由で
 softcar フラグを設定する必要があるでしょう。
Wolfgang Rupprecht は、簡単なフィールド調査をしました:
<p>
<blockquote>
UPS インターフェースは異なる2種類の型があって、
ときどき、同じ UPS に両方存在しています。
UPS についている 9ピンのコネクターには、決して、普通の PC-style RS-232 として配線しないでください。
最善のものは、 3芯で、それを保つようにピンを再配置した RS-232 インターフェースです。
最悪なのは、内部信号端子(??)が RS-232 の 信号電圧 ですらなく、
変わったケーブルを使う必要のあるもので、
そのケーブルは電圧レベル変換装置がついていて、
それによってRS-232 ポートから見えるようになっているものです。
後者の型のインターフェースからの信号は、
1bit(通常/電源断)の信号を送出するだけです。
それは DCD のような モデム制御信号 で処理されるべきで、
プログラム経由でモデム制御信号の状態をチェックして検出するべきです。
注意しないと、 UPS に付いてきた、モデム制御信号だけのケーブルと
本物の RS-232 ケーブルがごっちゃになってしまいます。
<br><br>

 APC web page を捜しまわったり、
 altavista でいくつか当たった有望なものによると、
 3 つの基本的なインターフェースがあることがわかりました。

  低価格帯の UPS ("back UPS") は
 モデムコントロールライン タイプのインターフェースだけを持っています。

高価格帯の2つ ("Back UPS Pro", "Smart UPS") は
モデムコントロールラインと 3芯 RS-232 信号の両方の組み合わせを持っています。
どちらかのケースでは、
2つのうちのどらちかの種類の特殊ケーブルを使う必要があります。

モデムコントロールラインインターフェースのケーブルには、
レベルシフトのためにトランジスターとダイオードが入っています。
(電源はほかの線のどれかからとってきます)。

それは UGLY という単語がぴったりだと思えるほど
本当にぶざまな解決法で、正しく変更するべきです。(???)

2番目のタイプのケーブルは、 UPS とシリアルで会話できるでしょうが、
いくつかの 3-rd party のドキュメントには、 UPS は
ストップビットを2ビットで送信する時だけ喋ると示されています。	

プロトコルに関する公式ドキュメントは無いようで、
また、 back-UPS pro と smart UPS は異なるシリアルラインプロトコルを
喋るようです。

 back-UPS pro ラインだけが いくつかの サードパーティー のサポートがあるようで、
プロトコルの詳細の多くが推測だけのようです。

<br><br>

競合品のどれもが、 (modem コントロール信号 だけ、および、
特殊ケーブルで(知的財産)権利のある シリアル信号プロトコル)を真似しているようです。
  私は、標準規格についての公開された文書を見つけることができませんでした。
</blockquote>

<ENTRY>changing-motd <tt>/etc/motd</tt> を何らかの変更をしてももとの内容に戻ってしまいます
<tt>/etc/motd</tt> のヘッダーを消すと、
起動時にスタートアッププロセスがあなたのした変更を上書きします。
これは、 <tt>/etc/rc.conf</tt> 内で <tt>update_motd=NO</tt> と
設定することで無効にすることができ、
これで、<tt>/etc/motd</tt> にはまったく手が加わらなくなり、
あなたが、変更することができるようになります。


<ENTRY>selling-hardware どこへ NetBSD 関連のハードウェアを売ればいいの?
補助アイテムのために、一般的に、
その port の <a href="../../MailingLists/">メーリングリスト</a> と、
 <a href="mailto:netbsd-forsale@mono.org">netbsd-forsale@mono.org</a> 
に投稿することができます。<br>
NetBSD の開発を支援するために何らかのハードウェアを寄付したいのなら、
 <a href="../../contrib/hardware.html">ハードウェア寄付ページ</a> をチェックするか、
 <a href="mailto:finance-exec@NetBSD.org">finance-exec@NetBSD.org</a> に連絡してください。

<ENTRY>setup-ccd ストライプ (ccd) ドライブを設定する

ディスクストライピングは、 NetBSD では RAIDframe または ccd(4) を使っておこなうことができます。
ここでは ccd(4) の使い方を説明します。

<ol>
<li>全てのディスクに disklabel をつけます:<br>

結合したいパーティションをつくり、
開始オフセットを 確かめます
( 16 セクターでまったく充分 - 確信しているわけじゃないけど)。

この種の問題が起こっても、私にはわかりません。
"普通の" 4.2BSD パーティション を使っているので。

<li> ccd を設定します。<br>

性能チューニングで、
最も良いインターリーブを見つけるために少し試してみる必要があるでしょう。
私の場合、2つのディスクで 48 が良く動作します。

私が知る限り、16 かいくつかのほかの数字では、
全ての inode が同じディスク上に存在してしまうので、
パフォーマンス向上にはならないでしょう。
私の記憶が確かなら、
コンポーネントのセクター数をインターリーブの倍数にしないと、
いくつかの問題がありました。

<li>普通のハードディスクと同様に ccd に disklabel を書きます。
<li>ccd を newfs します。
<li>それをマウントします。
</ol>
<p>

より詳しい情報は ccd(4) と ccdconfig(8) のマニュアルページを見てください。

</LIST>

<DOCLINK>

<hr>
<address>
  <small>
  (連絡先 - <a href="http://www.NetBSD.org/cgi-bin/feedback.cgi">英語</a>,
       <a href="mailto:www@jp.NetBSD.org">日本語:
       www@jp.NetBSD.org</a>)<br>
  $NetBSD: index.list,v 1.111 2004/08/30 08:38:46 darcy Exp $<br>
  <a href="../../Misc/disclaimer.html">Copyright &copy; 1994-2004
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
  </small>
</address>

</body>
</html>
