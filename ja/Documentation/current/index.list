<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
<!-- Copyright (c) 1994-2004
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@NetBSD.org">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <title>Tracking NetBSD-current</title>
  </head>

<body bgcolor="#FFFFFF" text="#000000">

<HEADING>Tracking NetBSD-current

<LIST>

<SECTION>Frequently asked questions

<ENTRY>why-track Why track NetBSD-current?

The developers of NetBSD have made the current development sources
available to the public for several reasons.  Overall, providing
NetBSD-current helps us to create a more stable, accessible system.
<p>
It makes it easier for people to become involved in the development of
NetBSD.  Distributing the current development sources allows a greater
number of people to see where the system is going, and to become
involved with new features as they are implemented.
<p>
It also makes changes from users easier to integrate.
If users make changes against
the current development sources, then virtually no integration is
needed to get them into the master source tree. 
<p>
It also allows wider testing of the software as it is developed.  Users
of NetBSD-current are encouraged to send in <a
href="../../Misc/send-pr.html">bug reports</a> about the current sources,
and that helps find and fix bugs.  Because people are testing the
software soon after it's written, more bugs can be found and
eliminated.

<ENTRY>installing Installing a current snapshot

To quickly begin using current,
start with a snapshot generated by release engineering.
The current status of each platform can be seen at
<a href="http://releng.NetBSD.org/ab/global.html">
NetBSD Autobuild
</a>
and the corresponding releases found in
<a href="ftp://releng.NetBSD.org/pub/NetBSD-daily/current/">
pub/NetBSD-daily/current/
</a>
by date and platform.
<p>
<ol>
<li> Hunt down to the desired <code>binary/sets</code> directory,
and <tt><b>mget *.tgz</b></tt> files
into your favorite local administrative directory
(for example, <em><code>$HOME/current</code></em>);
when limited by disk space and/or time,
only kern-GENERIC, etc, base, and comp (if you want a compiler) are essential.
<li> Extract the desired <code>/etc</code> and kernel:
<br>
    <tt><b>su</b></tt><br>
    <tt><b>cd /root</b></tt><br>
    <tt><b>tar -zxpf ~/etc.tgz</b></tt><br>
    <tt><b>tar -zxpf ~/kern-GENERIC.tgz</b></tt><br>
    <tt><b>ln -fh /netbsd /netbsd.old</b></tt><br>
    <tt><b>mv netbsd /netbsd</b></tt><br>
    <tt><b>shutdown -r now</b></tt><br>
<li> <a href="#etcupdate">Update</a> <code>/etc</code>
before replacing basic utilities:
<br>
    <tt><b>su</b></tt><br>
    <tt><b>cd /root/etc</b></tt><br>
    <tt><b>./postinstall -s /root check</b></tt><br>
    <tt>Now follow any instructions to fix your system files/config</tt><br>
<li> Extract the matching <code>base</code>,
and any other desirable feature sets:
<br>
    <tt><b>cd /</b></tt><br>
    <tt><b>tar -zxpf ~/comp.tgz</b></tt><br>
    <tt><b>...</b></tt><br>
    <tt><b>tar -zxpf ~/base.tgz</b></tt><br>
    <tt><b>/usr/sbin/etcupdate -b /root</b></tt><br>
    <tt><b>shutdown -r now</b></tt><br>
</ol>
<p>
At this point,
you are relatively current
and ready to build your own current source.

<ENTRY>downloading Downloading current source

Traditionally,
the system source files are kept at <code>/usr/src</code>,
but this generally requires root privileges.
The current <tt><b>build.sh</b></tt> process can run entirely unprivileged,
although installation still requires root priviledges.
Whenever examples in this document assume <code>/usr/src</code>,
you can substitute another location
(such as <em><code>$HOME/current</code></em>).
<p>
<ol>
<li> Select a location for the source tree:
<br>
    <tt><b>cd /usr</b></tt><br>
    <tt><b>su</b></tt><br>
<li> Download the -current source from a
<a href="../../mirrors/">NetBSD mirror site</a>
near to you:
<ul>
<li> via ftp from <a
href="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/src/">
/pub/NetBSD/NetBSD-current/tar_files/src/</a>,
or
<li> using <a href="ftp://ftp.NetBSD.org/pub/NetBSD/README.sup">sup</a>.
</ul>
<p>
These files represent a snapshot of the source tree.
For the most up-to-date files
using <a
href="#using-anoncvs">anoncvs</a>,<br>
    <tt><b>cd /usr/src</b></tt><br>
    <tt><b>cvs -q -d $CVSROOT update -dP</b></tt><br>
<p>
The <code>-d $CVSROOT</code> is only needed on the first update,
to populate the CVS tags with your selected mirror.
Remember to always use the <code>-P</code> flag or add it to your .cvsrc file.
<p>
If you wish to track local changes to the NetBSD source you might want
to setup a local CVS tree, and then <a href="#using-sup-into-cvs">import the
sup changes</a>.

<li>
Fix permissions<br>
If you wish for the source tree to be maintained by a non-root user
that is a member of the (traditional) wsrc group,
do (as root):<br>
<tt><b>chown -R <em>user</em>:wsrc /usr/src</b></tt><br>
<tt><b>chmod -R u=rwX,g=rwX,o=rX /usr/src</b></tt><br>

</ol>

<ENTRY>building Building a release from source

<em>Please remember to check <a
href="http://cvsweb.NetBSD.org/bsdweb.cgi/src/BUILDING">src/BUILDING</a>
for the latest changes.</em>
<p>
Traditionally,
the system object files were kept at <code>/usr/obj</code>,
but this generally requires root privileges.
Alternatively,
keeping the object files on another filesystem
can significantly speed compilation time.
Whenever examples in this document assume <code>/usr/src</code>,
you can substitute another location
(such as <em><code>$HOME/current</code></em>).
<ol>
<li> Select a location for the object tree,
where there is enough space for a full install,
plus a set of release tarfiles:<br>
    <tt><b>cd /usr/src</b></tt><br>
    <tt><b>su</b></tt><br>
    <tt><b>mkdir ../tools</b></tt><br>
    <tt><b>mkdir ../obj</b></tt><br>
<li> From the root of the source tree:<br>
    <tt><b>cd /usr/src</b></tt><br>
    <tt><b>./build.sh -O ../obj -T ../tools -u -U release
</b></tt><br>
</ol>
<p>
In this example,
the <code>-u</code> option indicates that a <code>make clean</code>
operation should not be run before starting the build. This is useful when
doing an update from a previous build and/or a fresh build.
<p>
The <code>-U</code> option allows the entire build by a non-root user.
<p>
When completed,
you should have everything you need to install
in a directory that <code>build.sh</code> selects (and will display),
including install media and notes.
<p>
If you wish to
<a href="../cross/">cross compile</a>
for a different architecture,
include '<code>-m MACHINE -a ARCH</code>' when running build.sh.
<p>
For more details,
run '<code>./build.sh -h</code>',
and see <a href="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/BUILDING">
/usr/src/BUILDING</a>.

<ENTRY>updating Updating an existing system

<em>Please remember to check <a
href="http://cvsweb.NetBSD.org/bsdweb.cgi/src/UPDATING">src/UPDATING</a>
for the latest changes.</em>
<p>
<ol>
<li> From the root of the source tree:<br>
    <tt><b>cd /usr/src</b></tt><br>
<li>Build the toolchain:<br>
    <tt><b>./build.sh -O ../obj -T ../tools -U -u tools</b></tt><br>
<li>Build the distribution:<br>
    <tt><b>./build.sh  -O ../obj -T ../tools -U -u distribution</b></tt><br>
<li>Build the kernel:<br>
    <tt><b>./build.sh  -O ../obj -T ../tools -U -u kernel=GENERIC</b></tt><br>
<li>Install the kernel:<br>
    <tt><b>cd ../obj/sys/arch/&lt;ARCH&gt;/compile/GENERIC</b></tt><br>
    <tt><b>su</b></tt><br>
    <tt><b>mv /netbsd /netbsd.old</b></tt><br>
    <tt><b>cp netbsd /netbsd</b></tt><br>
<li>Reboot into the new kernel:<br>
    <tt><b>shutdown -r now</b></tt><br>
<li>Install the new userland:<br>
    <tt><b>cd /usr/src</b></tt><br>
    <tt><b>su</b></tt><br>
    <tt><b>./build.sh -O ../obj -T ../tools -U install=/</b></tt><br>
<li>Follow the instruction in the output for fixing obsolete files, for example
:<br>
    <tt><b>/usr/src/etc/postinstall -s /usr/src -d // fix defaults mtree obsolete</b></tt><br>
<li><a href="#etcupdate">Update</a> /etc:<br>
    <tt><b>/usr/sbin/etcupdate -s /usr/src/etc</b></tt><br>
<li>Optionally reboot to ensure all running services are using the new binaries:<br>
    <tt><b>shutdown -r now</b></tt><br>
</ol>
<p>
In this example,
the <code>-u</code> option indicates an update process,
and the <code>-U</code> option allows the entire build by a non-root user
followed with an install by root.
<p>
The build order (tools, distribution, kernel) is chosen to optimize the time
for updating the source whenever problems occur.
To ensure consistency,
the process should be restarted from the beginning in the case of errors/cvs
updates.
<p>
For more details,
see <a href="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/UPDATING">
/usr/src/UPDATING</a>.

<ENTRY>what-to-do Things you need to remember

<ul>
 <li>
  When upgrading to a more recent version of -current you should
  <em>always</em> compile and boot a new kernel before installing any
  new libs (<a href="#star">*</a>). In general the best approach is to
  try the new kernel before anything else, and if you hit any problems see
  the entry in the <a
  href="../kernel/#problems_compiling_a_current_kernel">
  Kernel FAQ</a>.
  <p>
  Once the kernel is running, you should have a look at the 
  <a href="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/BUILDING">BUILDING</a>.

  file at the base of the source tree, and use the build.sh script
  to build a new userland.
  <p>

 <li>
  When compiling a -current kernel, always remember to include the
  COMPAT_&lt;lastrelease&gt; option (e.g., COMPAT_16).  As current
  diverges from the last stable release, compatibility code will be
  added, but it will only be enabled if this option is present.  At a
  bare minimum, you will need this compatibility code for the time
  between booting the new kernel and finishing your build via 
  <code>build.sh</code>
  <p>

 <li>
  People using NetBSD-current are strongly encouraged to subscribe to
  the <b><a
  href="../../MailingLists/#current-users">current-users</a></b>
  mailing list.  The <b><a
  href="../../MailingLists/#source-changes">source-changes</a></b>
  mailing list is also of interest.
</ul>
<p>

<a name="star">*</a>: Unless you are certain there have been no new
system calls added, but do it anyway; it's safer.

<ENTRY>build-targets What are the various Makefile targets?

For further documentation concerning usage of the new toolchain
through the script 'build.sh' (in the toplevel source directory),
run '<code>./build.sh -h</code>',
and see <a href="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/BUILDING">
/usr/src/BUILDING</a>.
<p>
<b>WARNING:</b>
<em>
The usage of 'make build' has been deprecated by the updated toolchain,
and is strongly discouraged.
</em>
<p>
When you build your system for the first time using <code>build.sh</code>,
a set of tools for future use of compilations will be built, too.
Any subsequent compilation should reuse the already compiled tools,
and thus take less time.
<p>
Of course, don't invoke <code>./build.sh install=/</code>
unless the <code>./build.sh build</code> has succeeded previously or it's
entirely possible to end up with a non-working system.

<ENTRY>using-anoncvs-pserver Using anoncvs
 
<em>
These instructions cover unencrypted anoncvs connections.
If you wish to use encryption protocols,
see <a href="#using-anoncvs-over-ssh">below</a>.
</em>
<ol>
<li>Install <PKGSRC>devel/cvs.  
<em>If NetBSD is built from -current sources
past 2000-09-04, cvs is already installed.</em>  Note: some versions of cvs
(notably version 1.11.5) may lead to errors when using the '-z' flag.  See <a
href="#hints">useful hints</a> below.
<p>

<li>Set the CVSROOT environment variable to point to the
<a href="../../mirrors/#anoncvs">anoncvs server</a> of your choice:
<ul>
    <li>For csh(1) or <PKGSRC>shells/tcsh users:
<blockquote><pre><code>% setenv CVSROOT :pserver:anoncvs@anoncvs.NetBSD.org:/cvsroot
</code></pre></blockquote>
    <li>For sh(1), ksh(1), or <PKGSRC>shells/bash2 users:<br>
<blockquote><pre><code>$ CVSROOT=:pserver:anoncvs@anoncvs.NetBSD.org:/cvsroot; export CVSROOT
</code></pre></blockquote>
    </li><br>
</ul>
<li>
<blockquote><pre><code>$ cd /usr
$ cvs login
</code></pre></blockquote>
(use password "anoncvs")<br>
</ol>
<p>
You have to have write permission on the directory for the initial
checkout; after that you can just change the owner of the source tree
to some other user. One of the possible ways is to do the initial
checkout as root, and then give the source tree to a different user
for later use.

<ENTRY>using-anoncvs-over-ssh Using anoncvs over ssh

The methods described in <a href="#using-anoncvs-pserver">using anoncvs</a> can
be used over ssh to ensure the integrity of the sources you receive.
However,
this adds substantial overhead to the anoncvs servers.
<p>
Those servers in the <a href="../../mirrors/#anoncvs">mirrors</a>
that support ssh connections show the required information with
each entry.
<p>
In general,
remove the ':pserver:' prefix on the cvsroot,
and set the variable CVS_RSH to 'ssh',
using the method appropriate for your shell.

<ENTRY>using-anoncvs Tracking NetBSD-current with anoncvs

<h4>Setting up</h4>

<ol>
<li>To checkout only the kernel sources<br>
<blockquote><pre><code>$ cd /usr
$ cvs checkout -P src/sys
</code></pre></blockquote>
</ol>
<p>
This gives you the kernel sources in <tt>/usr/src/sys</tt>. Information
on <a href="../kernel/#how_to_build_a_kernel">how to build a
kernel</a> is also available.

<li>Checkout the entire source tree (including kernel)<br>
<blockquote><pre><code>$ cd /usr
$ cvs checkout -P src
</code></pre></blockquote>
</ol>
<p>
You should now have a full set of NetBSD sources in /usr/src.
<p>Note:  it is almost always faster for a first-time "whole
source" checkout to <a href="#downloading">FTP the tarballs</a> and untar
them locally because that makes best use of the network link. After that,
using cvs checkout/update works to minimize the number of bytes coming over
by sending only the changes.

<li>Fix permissions<br>
    If you wish for the source tree to be owned by a non-root user,
    do (as root):
<blockquote><pre><code># chown -R <em>user</em> /usr/src
</code></pre></blockquote>
</ol>

<h4>To update the sources</h4>

<ol>
<li>To update only the kernel sources<br>
<blockquote><pre><code>$ cd /usr/src/sys
$ cvs update -dP
</code></pre></blockquote><br>
<li>To update the entire source tree<br>
<blockquote><pre><code>$ cd /usr/src
$ cvs update -dP
</code></pre></blockquote>
</ol>
<p>
<b>Note:</b> Running <tt>cvs checkout -d dir src</tt> (or similar commands
with the other src* modules) does not work.  You will get error messages saying
"existing repository ... does not match ...; ignoring module _gnusrc-cmp" etc.
The workaround is to drop the <tt>-d</tt> option and let cvs create the
default directory.

<h4>To check out the sources from a certain date</h4>
<blockquote><pre><code>$ cvs checkout -D 20020501-UTC src
</code></pre></blockquote>

<h4>To check out the sources from a certain branch</h4>
<blockquote><pre><code>$ cvs checkout -rnetbsd-1-6 src
</code></pre></blockquote>
See
<CURRENTSRC>src/doc/BRANCHES
for a description of the branches in the CVS repository.

<h4><a name="hints">Useful hints</a></h4>
<p>
<ul>
<li>If you want to check out a certain branch of the tree, you may
want to take caution not to overwrite any existing directories by creating a
new directory for this branch:

<blockquote><pre><code>$ cd /parent/dir/to/checkout/into
$ mkdir NewName-temp
$ cd NewName-temp
$ cvs checkout ... src
$ mv src ../NewName
$ cd ..
$ rmdir NewName-temp
</code></pre></blockquote>
</li>
<li>
You will have to use objdirs in order for cvs updates to work
correctly.  If you happen to get errors from cvs saying things like:
<blockquote><pre><code>   cvs [update aborted]: could not chdir to gnu/usr.bin/gdb/gdb: Not a directory
</code></pre></blockquote>
you should do a <code>make cleandir</code> and try again.  Make sure to
run <code>make obj</code> after the cvs update.
</li>
<li>
If you're on a very low bandwidth line, you may want to add <code>-z5</code>
(or some other number from 1 to 9) to your commandline <em>before</em> the
command (eg "<code>cvs -z5 update -dP</code>"); this turns on
compression of all data. Keep in mind that this will put extra
load on the cvs server!
<p>
Note:  some versions of cvs (notably version 1.11.5) may lead to errors when
using the '-z' flag.  If you receive errors, try to either upgrade cvs or
disable compression by leaving out the '-z' flag.
<p>

You can put switches for specific commands in a .cvsrc in your home
directory, and they will be automatically used. A sample .cvsrc would be:

<blockquote><pre><code>   cvs -q -z5
   update -dP
   checkout -P
   diff -u
</code></pre></blockquote>
</li>
</ul>

<h4>Building NetBSD from source</h4>

<I>(assuming you have an up-to-date NetBSD binary
snapshot, and source in /usr/src, on your machine already; further
assuming your BSDOBJDIR should be /usr/obj):</I><p>

To build userland the first time:<p>
<blockquote><pre><code># mkdir /usr/obj
# cd /usr/src</code><br>
<code># ./build.sh -O /usr/obj -D /usr/NetBSD-new-build -T /usr/tools build
# ./build.sh -O /usr/obj -D /usr/NetBSD-new-build -T /usr/tools install=/
</code></pre></blockquote>
<br>

When you build your system for the first time using build.sh,
a set of tools for future use of compilations will be built, too.
Any subsequent compilation should reuse the already compiled tools,
and thus take less time.
<br>
Of course, don't invoke <tt>./build.sh install=/</tt>
unless the <tt>./build.sh build</tt> has succeeded previously or it's
entirely possible to end up with a non-working system.
<p>

To update userland binaries after a CVS update:

<blockquote><pre><code># cd /usr/src
# ./build.sh -D /usr/NetBSD-new-build -O /usr/obj -T /usr/tools -u build
# ./build.sh -D /usr/NetBSD-new-build -O /usr/obj -T /usr/tools -u install=/
</code></pre></blockquote>

These will install the new binaries on the running system - reboot to make
sure they all take effect.
<p>

If you update system frequently and want the build to directly update
your running system, you can use <em>expert</em> mode and build
with DESTDIR=/, eg:

<blockquote><pre><code># ./build.sh -E -O /usr/obj -T /usr/tools -u build
</code></pre></blockquote>

Note this is for <strong>expert</strong> users only and you can
very easily render your system into state where it won't be able
to compile anything anymore. Use only if you are <strong>sure</strong>
the build will finish successfully.

<ENTRY>using-sup-into-cvs Tracking NetBSD-current with SUP into CVS

    <h4>Overview</h4>

    <p>Current can be tracked in the following way. The baseline copy of
      the sources is kept up to date using sup approximately once a week.
      as normal. This baseline source tree is then imported into a local
      CVS repository. Current is then built from a checked out copy of
      the repository.

    <p>There are 3 major reasons for this approach
    <p>
    <ol>
      <li>It keeps track of how current changes over time.</li>
      <li>It allows for local changes to be almost automatically merged
	into the updated current sources.</li>
      <li>It ensures there is always a clean unmodified copy of the
	NetBSD-current source tree is available in case of problems when
	building.</li>
    </ol>
    
    <p>The only downside to this approach is that 3 independent copies 
      of the source tree are needed which amounts to about 150MB of
      disk space not including the space required to actually build
      current.

    <h4>Requirements</h4>
    <ul>
      <li>CVS 1.9 or later (either already installed if you're running
          -current after 2000-09-04, installed from pkgsrc or just
          built from source). CVS 1.10 or later is preferred as it
          handles merging better.</li>
      <li>SUP installation</li>
      <li>Perl 5 installation for supplied script (optional)</li>
    </ul>
    <h4>Details</h4>
    <p>Tracking and building current consists of 6 phases:
    <p>
    <ol>
      <li>Supping updated sources into master source tree.</li>
      <li>Importing supped sources into CVS and updating working copy
	of sources.</li>
      <li>Merging supped sources with local working sources.
      <li>Building and installing current.</li>
      <li>Tagging the sources for a successful build in the
	repository.</li> 
    </ol>
    <h3>Supping sources</h3>
    <p>Sources can be supped from any NetBSD sup server and the output 
      from the SUP should be stored in a file for later reference.

    <h3>Importing and merging sources.</h3>
    <p>Sources are imported as follows:<br>
<blockquote><pre><code>$ cvs -d /misc/cvsrep import -I ! -I CVS netbsd netbsd current-<i>date</i>
</code></pre></blockquote>
    <p><i>date</i> is replaced by the date of the SUP for tracking
      purposes. The <code>-I ! -I CVS</code> options ensure that no file in
      the source tree is ignored except 'CVS' directories.  This is because
      some NetBSD source files have extensions which are normally ignored by
      CVS. If there are any conflicts with local patches the import command
      will report them and will describe a command to merge the conflicts
      something like:<br>
<blockquote><pre><code>$ cvs checkout -jnetbsd:yesterday -jnetbsd netbsd
</code></pre></blockquote>
    <p>This merge command will correctly merge the imported NetBSD
      sources but it will not handle the removal of files locally
      which have already been removed by the SUP process. To do this the
      merge command would be:<br>
<blockquote><pre><code>$ cvs update -j<i>previous import tag</i> -j current-<i>date</i>
</code></pre></blockquote>
    <p><i>previous import tag</i> should be replaced with the name of
      the tag used for the previous cvs import. <i>date</i> should be
      replaced with the current date to yield the same tag used on
      the current import that has just been merged.
    <p>The conflicts reported by the import command are potential
      conflicts. These are usually merged by the update command but in
      some cases a real conflict occurs. In these cases a manual merge
      of the conflicting lines will be required. A real conflict will
      be reported in the cvs update output as a <code>C</code>
      followed by a filename.
    <p>Merging conflicts manually is not a simple process but in most
      cases it should be resolved by removing the local changes and
      making the file like the original NetBSD source code.  
    <p>CVS marks conflicts as follows:
<pre>
&lt;&lt;&lt;&lt;&lt;&lt;
  <i>code from local file</i>
======
  <i>code from imported file</i>
&gt;&gt;&gt;&gt;&gt;&gt; <i>local revision number of newly imported revision</i>
</pre>

    <p>If the import reports no conflicts the checked out copy of the
      tree should be updated in exactly the same way as for the
      conflicts case.
    <p> All update and checkout commands should be done in the
      directory where the sources have been checked out. On my system
      this is <code>/usr/src/netbsd</code>
    <p>If this is the first import then there will be no sources
      checked out. Assuming you wish to create the source tree in
      '<code>/usr/src/netbsd</code>' The following commands will check
      out the source and no merge step is required.
<blockquote><pre><code>$ cd /usr/src
$ cvs -d /misc/cvsrep checkout netbsd
</code></pre></blockquote>
    <h3>Building current.</h3>
    <ol>
    <li>Configure, <a href="../kernel/#how_to_build_a_kernel">
	build</a>, and reboot into a new kernel.
    <li>cd to the base of your -current source tree and type
	<code>./build.sh -T /usr/tools -O /usr/obj </code>.
    <li>You may need to merge in any changes that have been made to files in
	/etc.
    </ol>

    <h3>Tagging a successful build</h3>
    <p> If the <a href="#building">build</a> completes successfully,
      and produces a working set of binaries,
      it can be useful to tag the working sources.
      This allows rewinding to a working build tree with a single CVS
      command in the event that the current tree becomes unbuildable
      for any reason. This can be performed by issuing the following
      command:
<blockquote><pre><code>$ cvs tag successful-build-<i>build date</i>
</code></pre></blockquote>
    <h4>Notes</h4>
    <ul>
      <li>If the NetBSD customised version of CVS, which recognises
	<b>$Net</b><b>BSD$</b> markers in files, is not used, the
	NetBSD revision number of the file is available for reference
	purposes when build problems occur.</li>
      <li>The sup/import/merge sequence described above is quite
	easily automatable. The following Perl script automates this
	process.
<blockquote><pre><code>#!/usr/pkg/bin/perl
#
# Script to SUP NetBSD-current, import it into CVS and merge it with
# any local changes.
#
# NOTES:
# This script does no error handling so is not really suitable for 
# non-interactive use.
#
# This script has only been test with cvs-1.10.1 and cvs-1.9.18.
#
$SRCROOT="/usr/src/netbsd";
$IMPORTROOT="/misc/import";
$CVSROOT="/misc/cvsrep";
#run the sup into a perl stream
system "/usr/sbin/sup -zsv" ; # This may need to change for none
                              # current systems

# now import the new files into CVS 

chdir $IMPORTROOT or die "Could not cd to $IMPORTROOT\n";

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;
$date = localtime;
$shortdate = sprintf "%02d%02d%04d",$mday,$mon+1,1900+$year;
system "/usr/local/bin/cvs -d$CVSROOT import -I ! -m\"SUP Import $date\" netbsd netbsd current-$shortdate ";

# make the working directory the local NetBSD Tree
chdir $SRCROOT or die "Could not change to $SRCROOT directory\n";

# Now do the import.
$lastimport = `cat /usr/src/netbsd/.tag`; # `s are backquotes
$lastimport =~ s/\n//; # strip off any trailing newline in the string
system "/usr/local/bin/cvs update -j $lastimport  -j
current-$shortdate ";
# Now write the current file into tag save file
open TAG,"&gt;$SRCROOT/.tag" or die "Could not open new tag file";
 print TAG "current-$shortdate";
close TAG;
</code></pre></blockquote>
    <p>This script was written in Perl since it is the scripting tool
	  which the author has the most experience with. It should
	  be fairly straightforward to write a shell script to perform 
      the same task.</li>
      <li>Techniques for tracking current with CVS have been discuss several
	times on the NetBSD current-users mailing list. For
	alternative techniques try searching the NetBSD mailing lists.</li>
    </ul>
    <p>
    If you have any comments or suggestions please send them to
    Mike Pumford <a href="mailto:mpumford@black-star.demon.co.uk">
    mpumford@black-star.demon.co.uk</a> (who maintains this entry) or
    <a href="mailto:www@NetBSD.org">www@NetBSD.org</a>.

<ENTRY>getrepos Getting the whole repository

All the procedures described above allow you keeping your own
changes in your repository, which has its advantages if you develop
your own software based on NetBSD. If you don't want to maintain your
own CVS repository, but just want to mirror NetBSD's CVS repository,
there are four ways to do so.
<p>

Each of the methods described briefly below will get you a copy
of the NetBSD CVS repository (i.e. the RCS ,v files, not the checked
out files!). You can then setup your own anoncvs server or check
out to a local harddisk. It's also useful for fast access to the history
information stored in the repository.
<p>

The methods to retrieve the whole repository are:

<dl>
<dt> sup: 
<dd> If you use sup already to mirror other parts of the NetBSD source,
     you will want to add the following lines to your sup config file:
<blockquote><pre><code>anoncvs release=all  host=sup.NetBSD.org hostbase=/ftp/pub \
base=/usr prefix=/usr backup use-rel-suffix compress
</code></pre></blockquote>
     After that, run "sup /path/to/supfile anoncvs" to retrieve the files.
     <p>

     Some example sup files are available in <tt>/usr/share/examples/supfiles</tt>. 
     Also, check our <a href="../../mirrors/#sup">list of SUP mirrors</a>
     to find the server closest to you!

<dt> ftp:
<dd> Setup your favourite mirror program (e.g. <PKGSRC>net/mirror)
     and retrieve the files from ftp://ftp.NetBSD.org/pub/NetBSD-cvs/main/
     <p>

     Please see our <a href="../../mirrors/#ftp">list of FTP mirrors</a>!
<dt> rsync:
<dd> Note that rsync puts quite a heavy load on our rsync server, and
     as such the number of concurrent rsync users is restricted. If you
     still want to try rsync, the command to retrieve the repository is:
<blockquote><pre><code>rsync -v -a rsync://rsync.NetBSD.org/anoncvs/
</code></pre></blockquote>

     Please see our <a href="../../mirrors/#rsync">list of rsync mirrors</a>!
<dt> cvsup:
<dd> CVSup is not currently available for all NetBSD architectures, since the M3
     compiler has not been ported. On i386, you can mirror the repository
     from cvsup.de.NetBSD.org with the <PKGSRC>devel/cvsup package and the 
     following config file:
<blockquote><pre><code>*default host=cvsup.de.NetBSD.org
*default base=/usr
*default prefix=/local/NetBSD-cvs
*default release=cvs
*default delete use-rel-suffix
*default compress

netbsd
</code></pre></blockquote>

     Please see our <a href="../../mirrors/#cvsup">list of CVSup mirrors</a>!
</dl>

<ENTRY>error What if I get an error?

If you try to build -current, either from a snapshot or an earlier
-current, and it doesn't work, don't panic.  Try these steps:
<ol>
<li>Read the <a
    href="http://cvsweb.NetBSD.org/bsdweb.cgi/src/UPDATING">UPDATING</a>
    file from the release you're trying to build.
<li>Read the <a
    href="http://mail-index.NetBSD.org/current-users/">current-users
    archive</a> for hints.
<li>Update again.  You may have caught the repository in the middle of
    a commit to several related files, or the problem might have
    already been fixed.
<li>If all else fails, send email to current-users explaining the
    problem.  Include the date, time, and method you used to get your
    -current sources, as well as any local changes you've made.  Then
    put in a <b>short</b> script that includes the error messages
    you're getting.  Somebody will probably fix the problem
    momentarily.
</ol>

<ENTRY>etcupdate Updating the configuration and startup files with etcupdate

<h4>Overview</h4>

etcupdate is a script to help users compare, merge and install new
configuration and startup files (files found in the etc.tgz
distribution set) in /dev, /etc and /root after performing an operating
system upgrade. The upgrade of the operating system could have
been performed either by compiling sources or by extracting
the distribution binaries. 

<h4>Installing etcupdate</h4>

<ol>
<li>Get the latest version of etcupdate
<em>If NetBSD is built from -current sources,
etcupdate is already installed.</em>
<blockquote><pre><code># cd /usr/pkgsrc/sysutils
# cvs update -dP etcupdate
</code></pre></blockquote>

<li>Install it from pkgsrc
<blockquote><pre><code># cd /usr/pkgsrc/sysutils/etcupdate
# make install clean
</code></pre></blockquote>
</ol>

<h4>Using etcupdate with source files</h4>

In case where the sources are in /usr/src the following command should be
enough:

<blockquote><pre><code># etcupdate
</code></pre></blockquote>

But what if your NetBSD sources are in an alternative location, such as
in /home/jdoe/netbsd/src? Don't worry, tell etcupdate the location of
your source tree with -s srcdir and it will work just fine:

<blockquote><pre><code># etcupdate -s /home/jdoe/netbsd/src/etc
</code></pre></blockquote>

<h4>Using etcupdate with binary distribution sets</h4>

Sometimes it's not possible have the sources around but you still want
to update the configuration and startup files. The solution is to extract
the desired distribution files (at least etc.tgz) and use the -b
srcdir switch to tell etcupdate that we don't have the sources but
only the official distribution sets.

<blockquote><pre><code># mkdir /tmp/temproot
# cd /tmp/temproot
# tar xpzf /some/where/etc.tgz
# etcupdate -b /tmp/temproot
</code></pre></blockquote>

<SECTION>Specific problems

<ENTRY>wscons Console dead after updating to wscons

You should copy a current MAKEDEV from the appropriate etc.<i>port</i>
directory in <a
href="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/etc/">src/etc</a>,
into <tt>/dev</tt>, boot single user, then type:
<blockquote><pre><code># fsck -p
# mount -vt nonfs
# cd /dev
# ./MAKEDEV wscons
</code></pre></blockquote>

<ENTRY>rebuild-nbmake Why does build.sh always rebuild nbmake first?

Even after running <code>./build.sh tools</code> and using the <code>-u</code>
flag or specifing <em>TOOLDIR</em> in <code>/etc/mk.conf</code>,
<tt>nbmake</tt> is always rebuilt by <code>build.sh</code>.  This is normal.
The reason for this can be found in <code>./build.sh</code> itself, in the
function <code>rebuildmake</code>:
<blockquote><pre><code>        # Note that we do NOT try to grovel "mk.conf" here to find out if
        # TOOLDIR is set there, because it can contain make variable
        # expansions and other stuff only parsable *after* we have a working
        # ${toolprefix}make.  So this logic can only work if the user has
        # pre-set TOOLDIR in the environment or used the -T option to
        # build.sh.
        #               
</code></pre></blockquote>
So, if you do not want to rebuild <tt>nbmake</tt>, you will need to pass
<code>-T tooldir</code> or set the <em>TOOLDIR</em> variable in the
environment.

</LIST>

<DOCLINK>

<hr>
<address>
  <small>
  <a href="http://www.NetBSD.org/cgi-bin/feedback.cgi">(Contact us)</a>
  $NetBSD: index.list,v 1.70 2004/08/28 21:31:07 daniel Exp $<br>
  <a href="../../Misc/disclaimer.html">Copyright &copy; 1994-2004
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
  </small>
</address>

</body>
</html>
