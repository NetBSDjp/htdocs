<html>
<head>
<!-- Copyright (c) 1998, 1999
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@NetBSD.ORG">
<title>Kernel programming FAQ</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<HEADING>Kernel programming

This is currently just a placeholder. As people contribute more entries it
should become more useful.

<hr>
<h2>Other related links</h2>
<ul>
<li> bus_dma(9) - NetBSD's machine independent DMA framework
	(<a href="bus_dma.ps">postscript()</a>)
<li><a href="converting-ethernet-drivers.html">
	Converting ancient BSD Ethernet drivers to NetBSD-1.2D and later</a>
<li><a href="porting-freebsd-net.html">
	Notes on porting FreeBSD network drivers to NetBSD</a>
</ul>

<LIST>

<SECTION>Misc

<ENTRY>knf What is KNF
KNF stands for "Kernel Normal Form" - it's a C coding style documented in
<a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/share/misc/style">/usr/share/misc/style</a>.

<ENTRY>printf Using printf() for debugging
Probably the simplest way of generating debugging information from a kernel
driver is to use printf(). The kernel printf will send output to the console,
so beware of generating too much output and making the system unusable.

<ENTRY>forcing-ddb Forcing code to enter DDB.
Ensure your kernel config file contains '<code>options&nbsp;DDB</code>',
the file has '<code>#include&nbsp;"opt_ddb.h"</code>', then use
'<code>Debugger()</code>'.

<ENTRY>adding_a_new_driver Adding a new driver to the kernel
Every driver needs at least
<ul>
<li><tt><i>xxx</i>probe()</tt> (during which NetBSD will attempt to determine if the device is present)</li>
<li><code><i>xxx</i>attach()</code> routine which will configure and attach the device.</li>
</ul>
Once probe and attach routines have been written, add an entry to
<tt>/usr/src/sys/arch/&lt;your-arch&gt;/&lt;your-arch&gt;/conf.c</tt>.
There are two tables:
<ul>
<li><code>cdevsw</code> for character devices.</li>
<li><code>bdevsw</code> for block devices (for those that also perform "block"
I/O and use a strategy routine).</li>
</ul>
Most entries will be of the form <code>cdev_<i>xxx</i>_init()</code>, which
is a macro handling prototyping of the standard Unix device switch routines.
<p>
The probe/attach routines are called at boot time.  The
<code>open()</code>, <code>close()</code>, <code>read()</code>, and
<code>write()</code> routines are called when you open up the device
special file who's major number corresponds to the index into that
table.  For example, if you open up a device who's major number is 18,
the "open" routine for device number 18 in <tt>cdevsw[]/bdevsw</tt>
will be called.
<p>
Most drivers are split between bus specific attach code, and a machine
independent core. As an example, the driver for the PCI lance ethernet chip
has entries in the following files:
<ul>
<li><a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/sys/dev/pci/files.pci">/usr/src/sys/dev/pci/files.pci</a> - attach information (look for 'le at pci').
<li><a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/sys/dev/pci/if_le_pci.c">/usr/src/sys/dev/pci/if_le_pci.c</a> - PCI bus attach code for the driver.
<p>
<li><a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/sys/conf/files">/usr/src/sys/conf/files</a> - MI core attach information (look for 'le:').
<li><a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/sys/dev/ic/am7990.c">/usr/src/sys/dev/ic/am7990.c</a> - MI driver 24bit access code.
<li><a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/sys/dev/ic/am79900.c">/usr/src/sys/dev/ic/am79900.c</a> - MI driver 24bit access code.
<li><a href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/sys/dev/ic/lance.c">/usr/src/sys/dev/ic/lance.c</a> - MI core driver code.
</ul>

<ENTRY>adding_a_system_call Adding a system call
Add an entry in <tt>syscalls.master</tt>, and add the syscall stub to the
appropriate place in <tt> <a 
href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/lib/libc/sys/Makefile.inc"> 
/usr/src/lib/libc/sys/Makefile.inc</a></tt>.

<ENTRY>accessing_a_kernel_structure_from_userland Accessing a kernel structure from userland
The canonical example for this is:  <tt><a
href="ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/usr.bin/vmstat/dkstats.c">/usr/src/usr.bin/vmstat/dkstats.c</a></tt>, which reads disk statistics.

<ENDLIST>

<a href="index.html">Back to <em>NetBSD Documentation: Kernel</em></a>

<BASELINKS>

<hr>
<address>
  <a href="../../Misc/feedback.html">(Contact us)</a>
  $NetBSD: programming.list,v 1.6 1999/11/09 21:49:07 mason Exp $<br>
  <a href="../../../Misc/disclaimer.html">Copyright &copy; 1998, 1999
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
</address>

</body>
</html>
