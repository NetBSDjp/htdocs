<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
  PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-Documentation-kernel-kgdb">
  <config param="desc" value="NetBSD ドキュメンテーション: GDB を使い NetBSD カーネルをデバッグする HOWTO"/>
  <config param="cvstag" value="$NetBSD: kgdb.xml,v 1.1 2007/04/03 18:35:06 daniel Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: kgdb.xml,v 1.1 2007/04/03 18:35:06 daniel Exp   -->
  <config param="rcsdate" value="$Date: 2007/04/03 18:35:06 $"/>
  <head>

  <!-- Copyright (c) 1994-2007
        The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->

    <title>NetBSD ドキュメンテーション: GDB を使い NetBSD カーネルをデバッグする HOWTO</title>
  </head>


  <sect1 role="toc">
    <sect2 id="using_kgdb">
      <title>KGDB の使用方法</title>
      
      <sect3 id="introduction">
        <title>概要</title>

	<para>
	NetBSD カーネルに含まれている DDB デバッガーは、クラッシュ・トレースバック
	を入手したり、変数の値の検査、その他のこまかいデバッグのために、役に立ちま
	す。しかしながら、もし、真剣にカーネルをハックしているのであれば、DDB のか
	わりに、リモートデバッガー KGDB が動作するように設定したいと思うでしょう。</para>

	<para>
	DDB に対する KGDB の利点は、ディスアセンブルされたマシンコードでなく
	カーネルの <emphasis>ソースコード</emphasis> を見ることができることです。実際のところ、
	ほとんどすべての GDB の機能が使用可能で、gdb のいくつかのグラフィカル
	インターフェースを使うこともできます(例えば <filename>devel/ddd</filename> など)。</para>
      </sect3>

      <sect3 id="prerequisites">
        <title>事前に準備しておくこと</title>

	<itemizedlist>
	  <listitem>
	    <para>同一アーキテクチャーで NetBSD の動作しているマシン二台(オブジェクトコード
	      のフォーマットも同一であること):</para>
	    <itemizedlist>
	      <listitem>
	        <para>TARGET - デバッグするカーネルを実行するマシン
	          </para>
	      </listitem>
	      <listitem>
	        <para>REMOTE - gdb
	          を実行、表示するマシン</para>
	      </listitem>
	    </itemizedlist>
	    
	    <para>あるアーキテクチャーのホストで、他のアーキテクチャーのターゲット用の gdb 
	      を構築することも可能です。しかし、今のところこれについてはここでの対象範囲外です。
	    </para>
	  </listitem>
	  <listitem>
	    <para>空きのシリアルポートが両方のマシンに存在すること。</para>
	  </listitem>
	  <listitem>
	    <para>null モデムケーブル (詳しくは <ulink
	      href="../../Documentation/Hardware/Misc/serial.html">NetBSD
	      シリアルポート入門</ulink>参照)。</para>
	    </listitem>
	  <listitem>
	    <para>カーネルの構築とインストール、そして
	      gdb の使用法についての知識</para>
	  </listitem>
	</itemizedlist>
      </sect3>
  

      <sect3 id="instructions">
        <title>手順</title>

	<para>(以下の文中では、REMOTE マシン上(gdb が動作している)で
	  <filename>/dev/tty01</filename> を、TARGET 
	  マシン(デバッグされる)では <filename>/dev/tty00</filename>
	  を使用していると仮定して説明します。
	  お使いのマシンに合わせて、シリアルポートのデバイスを適切なもの─たとえば
	  <filename>/dev/dty00</filename>
	  ─に置き換える必要があるかもしれません。</para>

	<orderedlist>
	  <listitem>
	    <para>KGDB を有効にしたカーネルの構築</para>

	    <para>(注意: たぶん、これがリモートマシン上でカーネルを構築する最良の方法
	      でしょう。これで、デバッグする時には、すべての必要なソースファイルと
	      シンボルファイルはすでに準備されています。)</para>

	    <itemizedlist>
	      <listitem>
	        <para>TARGET マシンのためにカーネルのコンフィグファイル内の以下の行を
	         コメントアウトしてください。</para>
	        <programlisting>
  #options 	DDB			# in-kernel debugger
  #options 	DDB_HISTORY_SIZE=100	# enable history editing</programlisting>
                
		<para>以下の三行をアンコメントアウト(あるいは追加)
	          してください。</para>
	        <programlisting>
  options 	KGDB		# remote debugger
  options 	"KGDB_DEVNAME=\"com\"",KGDB_DEVADDR=0x3f8,KGDB_DEVRATE=9600
  makeoptions	DEBUG="-g"	# compile full symbol table</programlisting>
		<para>TARGET マシン上で使用するシリアルポートの IO アドレス(0x3f8 は tty00、
	          0x2f8 は tty01 用です)に一致するように、 KGDB_DEVADDR を変更してください。
	          それから、 KGDB_DEVRATE を、使用するビットレートに一致させてください。</para>
	      </listitem>
	      <listitem>
	        <para>TARGET マシンのカーネルの設定と<ulink
	          href="./#how_to_build_a_kernel">
	          構築</ulink>をおこなってください。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para>TARGET マシンの準備</para>

	    <para>ファイル <filename>netbsd</filename> を、カーネルを構築したディレクトリーから TARGET マシンの
	      ルートディレクトリーにコピーしてください。<emphasis role="bold">このカーネルをリモートマシンに
	      インストールしてはいけません</emphasis>。(特に、両方のマシンで同じ tty を使っている
	      時には注意してください!)</para>
	  </listitem>
	  <listitem>
	    <para>REMOTE マシンの準備</para>

	    <itemizedlist>
  	      <listitem>
	        <para>TARGET マシンでカーネルを構築したのであれば、
	          <filename>/usr/src/sys</filename> すべてを、
	          REMOTE マシンにコピーしてください。(注意: TARGET
	          マシンのディレクトリーを単に NFS マウントしてはいけません。
	          gdb がブレークポイントで停止した時に、TARGET マシン上の
	          <application>nfsd</application>
	          を含む<emphasis>すべてのプロセス</emphasis>は停止します。)</para>
	      </listitem>
	      <listitem>
	        <para>REMOTE マシン上で使う予定の(そして
	          REMOTE マシンで<emphasis>だけ</emphasis>使う) tty の
	          ために <filename>/etc/ttys</filename> を変更してください。
	          例えば以下のように。</para>
		  <programlisting>
  tty01 "/usr/libexec/getty std.9600" unknown off local</programlisting>
		<para>ここで重要なのは、<quote>off</quote>
	          (これで、init がこのポートで getty を起動することはありません)と
	          <quote>local</quote>です。なぜならば、
	          <application>ttyflags</application> は、
	          <filename>/etc/ttys</filename> に従ってブート時にポートのデフォルトを設定します。
	          そして、gdb を使うには、DTR を待たないようにするために
	          <quote>local</quote>が設定されていなければなりません。</para>
		<para><quote>std.9600</quote>を別のビットレートに変更したい場合もあるかもしれません。
	          この場合、ビットレートは、gdb で設定する
	          remotebaudrate (後で説明します)と同様に、
	          TARGET 用のカーネルオプションで設定したレートと一致していなければなりません。
	          <filename>/etc/gettytab</filename> の中に、
	          あなたが使う名前と一致するエントリーがあることを確認してください。</para>
	      </listitem>
	      <listitem>
	        <para>REMOTE マシンをリブートするか、
		  <application>ttyflags</application> を起動し
		  <filename>/etc/ttys</filename> を再読み込みさせてください。(<command>kill -1
		  1</command> で十分かもしれません。しかし、
		  <filename>/etc/ttys</filename> の項目の順番を変更したことにより、
		  init が混乱する可能性があります)。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	    <listitem>
	      <para>null モデムケーブルを使い、
	        シリアルポートに接続してください。</para> 
	    </listitem>
	    <listitem>
	      <para>TARGET マシンをリブートし、ブートローダーのメッセージが表示されたら
	        すぐに、スペースキーを押してください。そして、次のコマンドを入力して
	        ください。</para>
		<programlisting>
  boot -d</programlisting>
	      <para>これによりカーネルがロードされます。
		<quote>waiting for kgdb</quote>というメッセージが表示された後、
		TARGET は停止します。</para>
	    </listitem>
	    <listitem>
	      <para>REMOTE マシン側で、
	        カーネルを構築したディレクトリー (一般的には
	        <filename>/usr/src/sys/arch/&lt;something&gt;/compile/&lt;config-name&gt;</filename>)
	        に移動し、<command>gdb</command> を起動します。</para>
	      <screen>&rprompt; <userinput>gdb netbsd.gdb</userinput></screen>
	      <para>数秒後、
	        (gdb) プロンプトが表示されるはずです。</para>
  	    </listitem>
	    <listitem>
	      <para>gdb のいくつかのフラグを設定する</para>
	      <programlisting>
  # いつでも Ctrl-C により TARGET を停止させることができるようにする。
  (gdb) set remotebreak 1
  # gdb の使用するボーレートを設定する。(デフォルトは 9600、
  # TARGET にインストールされたカーネルの設定と一致していること)
  (gdb) set remotebaud 9600
  # シリアル上でラインエラーが発生した場合の再送速度を速くする。
  (gdb) set remotetimeout 3</programlisting>
	    </listitem>
	    <listitem>
	      <para>TARGET マシンに接続します(REMOTEマシン側で tty01 を使用していると
	        仮定しています)</para>
	      <programlisting>
  target remote /dev/tty01</programlisting>
	      <para>以下のようなメッセージが表示されます。</para>
	      <programlisting>
  Remote debugging using /dev/tty01
  kgdb_connect (verbose=1) at 	../../../../arch/i386/i386/kgdb_machdep.c:244
  244             if (verbose)
  (gdb)</programlisting>
	      <para>もし、これらのメッセージが表示されるかわりに、
  	        GDB が<quote>hang</quote>しているようなら、
  	        シリアルハードウェア、ケーブル、あるいは設定に何か間違いがあります。
  	        トラブルシューティングのセクションを参照してください。</para>
	    </listitem>
	    <listitem>
	      <para>さて、プロンプトが表示されれば、ハックする準備はできています。
	        ブレークポイントを設定したり、データを確認したり、一ステップ毎に実行する
	        ことができます。ちょうど、ローカルマシン上で動作しているユーザーレベル
	        アプリケーションを gdb でデバッグするのと同じです。カーネルのブートプロ
	        セスを続行させるには、<command>cont</command>を使ってください。後でデバッガーにもどるため
	        には、Ctrl-C を押してください。</para>
	    </listitem>
	    <listitem>
	      <para>5 から 7 の手順を自動化するためには、カーネルを構築するディレクトリーに
	        以下の内容のファイル
	        <filename>.gdbinit</filename> を作成してください。</para>
	      <programlisting>
  file netbsd.gdb
  set remotebreak 1
  set remotebaud 9600
  target remote /dev/tty01</programlisting>
	    <para>さて、これで<command>gdb</command>とタイプするだけで、
	      デバッグを始めることができます。</para>
          </listitem>
	</orderedlist>
      </sect3>

      <sect3 id="troubleshooting">
        <title>トラブルシューティング</title>

	<para>もし、うまく動作しない場合は、以下の事を試してみてください。</para>
	
	<itemizedlist>
	  <listitem>
	    <para><option>-d</option> を指定せずに TARGET マシンをリブートしてください。
	      デバイスのプローブ時に以下のようなメッセージが表示されるはずです。
	      二行目が表示されていなければ、
	      構築したカーネルでは KGDB が有効になっていないか、
	      間違ったカーネルを使用しています。</para>
	    <programlisting>
  com0 at isa0 port 0x3f8-0x3ff irq4: ns16550a, working fifo
  com0: kgdb</programlisting>
          </listitem>
	  <listitem>
	    <para>シリアルポートとケーブルが
	      <quote>normal</quote>のアプリケーションで動作することを確認してください。
	      KGDB を無効にしたカーネルで TARGET マシンをリブートし、二つのマシン間で
	      <application>tip</application> を実行してみてください。もし、
	      <application>tip</application> について知らないのであれば、
	      以下の簡単な手順を参考にしてください。</para>
	    <itemizedlist>
	      <listitem>
	        <para>以下の行を、TARGET と REMOTE 両マシンの
		  <filename>/etc/remote</filename> に追加してください。</para>
		<programlisting>
	tty00-9600:dv=/dev/tty00:br#9600:pa=none:dc:
	tty01-9600:dv=/dev/tty01:br#9600:pa=none:dc:</programlisting>
	      </listitem>
	      <listitem>
	        <para>TARGET マシン上で <command>tip
	          tty00-9600</command> を、REMOTE マシン上で
	          <command>tip tty01-9600</command> を実行してください。</para>
	      </listitem>
	      <listitem>
	        <para>両方のマシンのキーボードで適当な文字を入力してください。
	          文字は<emphasis>他の</emphasis>マシンのディスプレイに表示されるはずです。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para><filename>/etc/ttys</filename> の中の、
	      自分が使っている tty の行を再度確認し、
	      それが有効かどうかを確認するためにリブートしてください。</para>
	  </listitem>
	  <listitem>
	    <para>今まで書いてた文章の中では、root で作業している事を仮定していました。
	      一般ユーザーの場合、tip と gdb は動作しません。(<filename>/dev/tty0*</filename>
	      のパーミッションに依存します)。もちろん、root での作業は、<quote>一般的には</quote>おすすめできません。
	      かわりに、以下のようにしてください。</para>
	    <orderedlist>
	      <listitem>
	        <para><filename>/dev/tty0*</filename> のグループを
	          <literal>wheel</literal> にしてください(そうなっていなければ)</para>
	      </listitem>
	      <listitem>
	        <para>あなたのユーザー名を、<filename>/etc/group</filename> の
	          <literal>wheel</literal> 行に追加してください</para>
	      </listitem>
	      <listitem>
	        <para>あなたのユーザー名を、<filename>/etc/group</filename> の
	          <literal>dialer</literal> 行に追加してください</para>
	      </listitem>
	    </orderedlist>
	    <para>(2) により、gdb のプロセスが(そして、
	      あなたが起動している他のプロセスも)、tty をオープンできるようになる。(3) により、
	      tip を起動することができるようになる。</para>
	  </listitem>
	</itemizedlist>
      </sect3>
      
      <sect3 id="general_caveats">
        <title>一般的な注意</title>

	<orderedlist>
	  <listitem>
	    <para>コマンドを入力してから反応が返ってくるまでに、時々長い時間がかかる
	      ことがあります。これは、おそらくシリアルコネクション上の不正なデータの
	      せいです。みじかい休止と再送の後、すべて正常にもどります。
	      remotetimeout の値をデフォルトの 20 秒より短かく設定するとよいでしょう。
	      (これはある人から報告がありました。(彼の場合は)カーネルの <function>printf()</function> が
	      コマンドの間に実行されたことが原因でした。これにより gdb のデータがこわれ
	      たようです)。</para>
	  </listitem>
	  <listitem>
	    <para>カーネルが高優先度の割り込み(機種依存)ロック中は、Ctrl-C は動作しません。
	      例えば、i386 では、<function>splimp()</function> の中の永久ループを停止させることはできません。
	      しかし、ブレークポイントを、そのループの前にセットすれば、そこを一ステップ
	      ずつ実行することができます。</para>
	  </listitem>
	</orderedlist>
      </sect3>
    </sect2>
  </sect1>
  
  <parentsec url="./" text="NetBSD ドキュメンテーション: カーネル"/>

</webpage>