<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
  PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
         "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-Documentation-kernel-index">
  <config param="desc" value="NetBSD ドキュメンテーション: カーネル"/>
  <config param="cvstag" value="$NetBSD: index.xml,v 1.15 2006/11/25 18:48:10 kano Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: index.xml,v 1.15 2006/11/25 18:48:10 kano Exp   -->
  <config param="rcsdate" value="$Date: 2006/11/25 18:48:10 $"/>
  
  <head>
    <!-- Copyright (c) 1994-2005
         The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
    <title>NetBSD ドキュメンテーション: カーネル</title>
  </head>

  <sect1 role="toc">
  <sect2>
    <title>FAQ - よくあるカーネルに関する質問</title>

    <sect3 id="downloading_kernel_source">
      <title>どこでカーネルソースをダウンロードできますか</title>
      
      <sect4 id="official_release_kernel_source">
        <title>公式リリース</title>

        <para>
          すでにインストールされているものと同じリリースのカスタマイズしたカーネルを
  	コンパイルするには、カーネルの <code>syssrc.tgz</code> ファイルだけあれば十分です。
  	特定のリリースに対して、このファイルは、そのリリースのメインディレクトリーの中の
  	gzip された tar ファイル 'source/sets/syssrc.tgz' にあります。
  	たとえば、NetBSD 3.1 のカーネルソースは、ファイル <ulink
  	url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-3.1/source/sets/syssrc.tgz">/pub/NetBSD/NetBSD-3.1/source/sets/syssrc.tgz</ulink>
  	にあります。
        </para>
        
        <para>
          もし <ulink url="../../Sites/cdroms.html">NetBSD
  	CD-Rom</ulink>を持っていたら、 'source/syssrc.tgz'
  	も含まれています。ソースはどこでも展開できますが、
  	習慣的に /usr/src に置かれます。
  	展開するには "<emphasis role="bold"><code>cd / ; tar xvzpf
  	&lt;ファイル名&gt;</code></emphasis>" と
  	してください。
        </para>
      </sect4>
  
      <sect4 id="bleeding_edge">
        <title>'最前線' -current ソース、
               冒険好きな人限定!</title>
  
        <para>
          最新のカーネルソースは ftp.NetBSD.org かミラーサイトの <ulink
  	url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/sys/">/pub/NetBSD/NetBSD-current/src/sys/</ulink>
  	ディレクトリーにあります。
  	カーネルをコンパイルするには、以下のものを <ulink
  	url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/src/">
  	/pub/NetBSD/NetBSD-current/tar_files/src</ulink> からダウンロードした方が
  	いいでしょう:
        </para>
  
        <para>
  	<itemizedlist>
  	  <listitem>
  	    <ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/src/config.tar.gz">config.tar.gz</ulink>
              (&man.config.8; プログラムのソース)
            </listitem>
            <listitem>
  	    <ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/src/sys.tar.gz">sys.tar.gz</ulink>
              (全てのアーキテクチャーの完全なカーネルソース)
            </listitem>
  	</itemizedlist>
        </para>
  
        <para>
  	あなたが使っているバージョンから変更があった場合、最初に 'config'
  	プログラムをビルドとインストールすべきです。
  	-current は NetBSD 開発の最先端なので、<ulink
  	url="#problems_compiling_a_current_kernel">-current カーネルの
  	コンパイルに関する問題</ulink> があるかもしれません。
  	あなたがコンフィグの手順に慣れるまでは <ulink
  	url="#official_release_kernel_source">公式リリース</ulink> のソースを
  	使うことをお勧めします。
        </para>
      </sect4>
        
      <sect4 id="downloading_kernel_source_by_date">
        <title>特定の日付のカーネルソースをダウンロードするには</title>
  
        <para>
          スナップショットをあなたのマシンにインストールしていて、
  	カーネルを作り直したい(でも -current カーネルは新しすぎる)場合に、
  	このような事が必要かもしれません。
  	<ulink url="../current/#using-anoncvs">anoncvs
  	を用いた NetBSD-current の追跡</ulink>の方法に従ってください。
        </para>
      </sect4>
    </sect3>

    <sect3 id="how_to_build_a_kernel">
      <title>カーネルの作り方</title>
      
      <anchor id="building_a_kernel" />
      <!-- Don't change the above targets - SAs reference them. -->

      <orderedlist>
        <listitem>
	  あなたのベースシステムに付属していたコンパイラーセット(<code>comp.tgz</code>)を
  	  インストールしたことを確認してください。
        </listitem>
        <listitem>
	  カーネルソースをダウンロードし展開します (
  	  <ulink url="#downloading_kernel_source">どこからカーネルソースを
	  ダウンロードできますか</ulink>参照)。
        </listitem>
        <listitem>
	  -current を使っている場合、新しい tool-chain のコンパイルが
          必要かもしれません:
	  完全な -current のソースをダウンロードしたら:
          <code>cd /usr/src &amp;&amp; ./build.sh tools</code>
        </listitem>
        <listitem>
	  "<code>cd /usr/src/sys/arch/&lt;ARCH&gt;/conf</code>", 
  	  &lt;ARCH&gt; には 'i386', 'sparc', 'mac68k' のような
	  あなたのマシンアーキテクチャーが入ります。
        </listitem>
        <listitem>
	  "<code>cp GENERIC &lt;MYCONF&gt;</code>",
  	  &lt;MYCONF&gt; はこの設定にあなたが名づけた名前です。ホスト名や
  	  マシンタイプ、あなたの名前を使ってもよいのです。英文字、数字、
  	  そして _ 文字が使えます。
        </listitem>
        <listitem>
	  <emphasis role="bold">&lt;MYCONF&gt; の編集</emphasis>。
	  最初はこのステップは飛ばしても構いません。
	  i386 上で仮想コンソールを得るために
	  'pc0' をコメントアウトして 'vt0' を有効にしたりするように、
	  あなたが持っていなかったり使っていない CPU タイプやハードウェア、
	  デバイスのドライバーを削除することができます。
	  あなたがどのハードウェアドライバーを使い続けるかを決めるよい第一歩
	  となるのは、"<emphasis role="bold"><code>dmesg</code></emphasis>" か
	  "<emphasis role="bold"><code>dmesg | grep ' at '</code></emphasis>" の出力を読むことです。
	  '&lt;XXX&gt; at &lt;YYY&gt;' を含む全ての行について
	  &lt;XXX&gt; と &lt;YYY&gt; の両方のエントリーを残す必要があります。
	  他のカーネル設定のオプションの情報のために、 <emphasis role="bold">&man.options.4;</emphasis>
	  も読んでください。
        </listitem>
        <listitem>
          NetBSD 1.6 のアップデート以外では、
          以下のコマンドを使ってカーネルを再構築します。
          <code>cd /usr/src &amp;&amp; ./build.sh
  	  kernel=MYCONF</code>.
          このコマンドは、カーネルの構築前に、必要に応じて toolchain を更新します
          次の 4 個のステップは省いてください。
        </listitem>
        <listitem>
          <emphasis>NetBSD 1.6 の</emphasis>アップデートの場合は
	  <quote><code>config &lt;MYCONF&gt;</code></quote> を実行します。こうすると、
  	  &lt;MYCONF&gt; に対するカーネル構築用ディレクトリーが作成されます。
        </listitem>
        <listitem>
	  "<code>cd ../compile/&lt;MYCONF&gt;</code>" して、
  	  カーネルをビルドするためのディレクトリーに移動します。
        </listitem>
        <listitem>
	  "<code>make depend</code>" して、
  	  make プログラムがどのファイルをリビルドすればいいのか
  	  わかるように(この時点では全て!)、'.depend' ファイルを生成します。
        </listitem>
        <listitem>
	  "<code>make</code>" して、
  	  カーネルをコンパイルします。もし全てがうまくいけば、'netbsd'
  	  カーネルができているでしょう。もしあなたが VAX を使っていれば
  	  これは相当時間がかかり、大規模な Alpha マシンなら短い時間であり、
  	  残りの人たちはこの中間の時間になります。
        </listitem>
        <listitem>
	  "<code>mv /netbsd /netbsd.old ; mv
  	  /usr/src/sys/arch/&lt;ARCH&gt;/compile/&lt;MYCONF&gt;/netbsd
  	  /</code>" して、
  	  現在のカーネルを保存し、(<emphasis>とても</emphasis>重要)、
  	  新しいカーネルをブートできるよう移動します。
        </listitem>
        <listitem>
	  "<code>reboot</code>" して、あなたの新しいカーネルを使ってリブートします -
  	  ブートメッセージには次の行が含まれているはずです:
  	  'NetBSD &lt;VERSION&gt; (&lt;MYCONF&gt;) #0: &lt;COMPILE_DATE&gt;'
        </listitem>
        <listitem>
	  <emphasis role="bold">何か問題があったら:</emphasis>
  	  シングルユーザーモードで 'netbsd.old' カーネルをブートしましょう。
	  変更する手順はブート手順に依存していますが、
	  i386 ではこうでしょう:
	  
	  <orderedlist>
	    <listitem><emphasis role="bold">最初の NetBSD のメッセージが表示されたら <code>SPACE</code> を押す</emphasis></listitem>
	    <listitem>"<emphasis role="bold"><code>boot netbsd.old -s</code></emphasis>"</listitem>
	  </orderedlist>
	
	  次にカーネルを元に戻す:
	
          <orderedlist>
            <listitem>"<emphasis role="bold"><code>fsck /</code></emphasis>"</listitem>
            <listitem>"<emphasis role="bold"><code>mount /</code></emphasis>"</listitem>
            <listitem>"<emphasis role="bold"><code>mv netbsd.old netbsd</code></emphasis>"</listitem>
            <listitem>"<emphasis role="bold"><code>exit</code></emphasis>"</listitem>
          </orderedlist>
        </listitem>
      </orderedlist>
    </sect3>

    <sect3 id="generic_kernel">
      <title>GENERIC カーネルっていったい何なんですか?</title>
      
      <para>
        GENERIC という言葉はマシンアーキテクチャーでサポートされている
	全てのマシンで実行できるように設定されたカーネルを意味します。
	この言葉はもともとカーネルの設定ファイル中に含まれていた、
	設定オプションでもあるルートデバイスを"汎用(generic)"と
	することを示す行に由来します。このオプションと設定行の書式は
	すでに用いられていませんが、この名称はしばらく残ることでしょう。
      </para>
      
      <para>
        このため、GENERIC カーネルは、全てのデバイスドライバーとたくさんの
	マシンモデルをサポートするコードを含んでいます。
	多くはあなたにとって必要ないものなので、
	<ulink url="#how_to_build_a_kernel">あなた用のカスタム化したカーネルを
	コンパイルする</ulink>事をお勧めします。
      </para>
    </sect3>

    <sect3 id="mclpool-limit">
      <title><code>mclpool limit reached: increase NMBCLUSTERS</code> ってどういう意味ですか?</title>
      
      <para>
        これはカーネルが、mbuf クラスターにマップした空間を使い果たしたことを意味します。
        mbuf クラスターはネットワークコードでパケットやその他の
        ネットワーク関係のデータを格納するのに使用されています。
      </para>
      
      <para>
        デフォルトの NMBCLUSTERS の設定は 1024 (NetBSD 1.5 以前では 256) なので、
        もしこの問題が起きたならば、エラーメッセージが出なくなるまで、
        この値を倍に増やしていってください。現在の NMBCLUSTERS の値は、以下のように
        &man.sysctl.8; を使って表示できます:
	
<screen>
	# sysctl kern.mbuf.nmbclusters
</screen>

        または、以下のようにすることもできます
	
<screen>
        # echo 'print nmbclusters' | gdb -q /netbsd
</screen>

        カーネル設定に関するオプションについてのより詳しい情報は
	&man.options.4; を参照して下さい。
        この値を変更するには、
	
<screen>
	options NMBCLUSTERS=2048
</screen>

        を<ulink url="#how_to_build_a_kernel">カーネル設定ファイル</ulink>に加えるか、
	カーネルを直接変更してください:
	
<screen>
        # <emphasis role="bold">gdb --write /netbsd</emphasis>
        (gdb) <emphasis role="bold">set nmbclusters=2048</emphasis>
        (gdb) <emphasis role="bold">quit</emphasis>
</screen>

        カーネルを直接変更した場合は、変更が有効になるようにするためにリブートが必要です。
	もし、使用中のプラットフォームがサポートしていれば、次のコマンドを用いて
	値を設定することもできます。
	
<screen>
	# <emphasis role="bold">sysctl -w kern.mbuf.nmbclusters=2048</emphasis>
</screen>

        この方法はすぐに有効になりますが、次回のリブート時には設定されません。
	この方法とカーネルの変更を組み合わせれば、新しくカーネルを作る必要も
	リブートする必要もありません。
      </para>
    </sect3>

    <sect3 id="spl_not_lowered">
      <title><code>WARNING: SPL NOT LOWERED ON SYSCALL EXIT</code> ってどういう意味ですか?</title>
      
      <para>
        このカーネルメッセージはカーネル中に 
	"<code>int x = splfoo();</code>" したのに復帰する前に "<code>splx(x);</code>" を実行しなかった syscall が
	あるというバグがあることを意味します。
	この例で <code>splx(x);</code> 関数はシステムの優先度レベルを <code>x</code> にエンコードされた状態、
	つまり他の spl 関数(この場合は <code>splfoo();</code> という関数)によって返された値に
	レストアします。
      </para>
	
      <para>
        このカーネルメッセージが出力された場合、カーネル内デバッガーである &man.ddb.4; に
	入って下さい。ddb 内で 't' を押すことによりスタックトレースを得ることができ、
	問題の syscall() を確認することができるかもしれません。
	このカーネルメッセージは本来出力されるはずが
	ないものですので、trace コマンドの出力(ほかの関連情報も含めて)を
	&man.send-pr.1; する方がいいでしょう。
      </para>
      
      <para>
        spl 関数についてのより詳しい情報は &man.spl.9; を参照して下さい。
      </para>
    </sect3>

    <sect3 id="stray-ir7">
      <title><code>Stray interrupt on IRQ 7</code> ってどういう意味ですか?</title>
      
      <para>
        このカーネルメッセージ "Stray interrupt on IRQ 7" は、割り込み
        コントローラーが、 IRQ 7 上のマスク解除された割り込みを報告したが、
        その IRQ で要求されたドライバーがないことを意味しています。
      </para>
      
      <para>
        これが起きうる原因は、ふたつあります:
      </para>
 
      <para>
        <orderedlist> 
          <listitem>
	    <para>
  	      PC 以外では、ほとんどの場合は、その IRQ にドライバーがアタッチされたが、
	      そのドライバーが不適切だったことを
	      (この場合のほかは、その IRQ がマスクされていたことを) 意味します。
	    </para>
          </listitem>
          <listitem>
	    <para>
	      PC では、もっとやっかいな 'default IR7' の問題があります。
	      これは、デバイスがある IRQ をアサートした時に、
	      PIC が割り込みを検知した後に CPU がそれを知る前にその IRQ がデアサートされたため、
	      その IRQ が何だったかについて PIC が公然と嘘をつくのです。
	    </para>
	    
	    <para>
	      'default IR7' を前提にするという方法もありますが、
	      古いマシンの中にはかえって状況が悪化するものもありますし、
	      一般論としても、まず第一にドライバーを改良してこれを出さないようにした方がよいです。
	      とはいえ、エッジトリガーな割り込みを使っていると、
	      完全な予防は困難な場合もありますが。
	    </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        なお、このカーネルメッセージは、 DEBUG
        オプション付きのカーネルを走らせているときにしか出ません。
      </para>
    </sect3>

    <sect3 id="why_msoft_float">
      <title>なぜカーネルを <code>-msoft-float</code> 付きでコンパイルするのですか</title>

      <para>
        プロセスがシステムコールを呼び出したとき、
        後でそのプロセスに戻ってこられるように、
        カーネルはプロセッサーの状態を保存する必要があります。
        浮動小数点レジスターは比較的大きくなりがちなので、それらを保存したり
        回復したりすることは高価な操作です。もし FPU がまだ処理を実行途中であっ
        たなら、CPU はその処理が完了するまで待ってからでないと、レジスターのコピー
        を行うことができません。
      </para>
      
      <para>
        カーネル内で浮動小数点レジスターを利用するのを避けることで、システムコール実行
        の効率を、かなり向上させることができます。
        また sparc など、いくつかのプロセッサーでは、浮動小数点コンテキストの切
        り替えを lazy に行うことによって、プロセス切り替えの際の浮動小数点レジ
        スターの保存/回復処理を、場合によっては省略することもできます。
      </para>
      
      <para>
        いくつかのアーキテクチャーではコンパイラーは主要な操作 (メモリーブロック転送など)
        のスピードアップのために浮動小数点レジスターを使うことができ、
        上記の動作を止めるためには '-msoft-float' が必要です。
      </para>
    </sect3>

    <sect3 id="kernel-compile-slow">
      <title>メモリーの少ないマシンでカーネルをコンパイルするとすごい遅いのですが</title>

      <para>
        デフォルトでは NetBSD はサポートしているほとんど全てのハードウェアに対する
        ドライバー、ネットワークプロトコル、ファイルシステムを含む GENERIC カーネルを
        インストールします。これは、そのポートのいかなる計算機でもそのカーネルが
        実行されることを保証しますが、結果として、特にメモリーが少ない計算機では、
        必要以上の(メモリー)空間を占有します。また、カーネルのコンパイルの際には
         -O2 最適化が行われています。コンパイラーが、この最適化を行うことにより
        出来上がるカーネルは可能な限り速くなりますが、コンパイルの際には
        通常より多くのメモリーと時間を必要とします。
      </para>
      
      <para>
        <ulink url="#how_to_build_a_kernel">あなた専用のカーネルを構築する</ulink>
        際のひとつの方法としては、コンパイラーに対して通常の使用にとって
        十分である最適化のみを行うように指示するために "<code><emphasis
        role="bold">make&nbsp;COPTS=-O</emphasis></code>" を使うことです。この結果として
        できあがったカーネルはほんの少し遅くなりますが、コンパイルにかかる
        時間は短くなります。
      </para>
	
      <para>
        もし、メモリーの少ないマシンを使用していて、カーネルをカスタマイズ
        するために何度も 'コンパイル、新しいカーネルでリブート' を繰り返す
        つもりがあるのならば、始めの何回かは "<code>make&nbsp;COPTS=-O</code>"
        を使い、最後に "<code>make</code>" を使うのが良いかもしれません。
      </para>
      
      <para>
        もちろん、メモリーが少ししかないマシンでカーネルをコンパイルするのに、
        一般的にもっとも速い方法は、別のマシンを使用すること、または一時的に
        もっとメモリーを増設することです!
      </para>
    </sect3>

    <sect3 id="problems_compiling_a_current_kernel">
      <title>-current カーネルのコンパイルに関する問題</title>
      
      <para>
        最初に注意すべき点は、
        <ulink url="../../MailingLists/#current-users">current-users</ulink>
        メーリングリストに参加した方がよいということです。
        current-users を読まずに -current を追うことはライトを灯けずに夜道を
        ドライブしているようなものです。警告しましたよ :)
      </para>
      
      <para>
        最新の
        <ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/src/config.tar.gz">config.tar.gz</ulink>
        をダウンロードし、コンパイル、インストールし、あなたの
        コンフィグファイルに対して再度 config を実行してください。
         (config コマンドはリリースごとにかなり頻繁に変更されますから)
      </para>
      
      <para>
        時々、あらかじめバイナリーやライブラリーをアップグレードしておかないと、
        リリース版で -current の構築ができなくなることがあります。このような場合、
        それらをバイナリースナップショットからインストールした上で
        -current を構築したほうが簡単かもしれません。 i386 の -current
        スナップショットは、 (たとえば) 
        <ulink
        url="ftp://ftp.NetBSD.org/pub/NetBSD/arch/i386/snapshot/">/pub/NetBSD/arch/i386/snapshot/</ulink> にあります。 <ulink
        url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/UPDATING?rev=HEAD&amp;content-type=text/x-cvsweb-markup">src/UPDATING</ulink>
        ファイルには、このような、 -current や -current カーネルの構築に際して
        知っておくべき重要な変更点に関する情報が載っています。
      </para>
    </sect3>
	
    <sect3 id="debugging_a_kernel_crash_dump">
      <title>カーネルクラッシュダンプのデバッグの方法</title>
      
      <orderedlist>
        <listitem>
	  同じソースを用いて設定ファイルの中で <code>DEBUG</code> と '<code>makeoptions
          DEBUG="-g"</code>' を有効にして
          <ulink url="#how_to_build_a_kernel">カーネルの作成</ulink>をしたことを
          確認してください。
	</listitem>
        <listitem>
	  "<code>gdb netbsd.gdb</code>" (カーネルをコンパイルしているディレクトリーで)
	</listitem>
        <listitem>
	  gdb プロンプトで
          "<code>target kcore /var/crash/netbsd.0.core</code>"
	</listitem>
      </orderedlist>

      <para>
        一般の &man.gdb.1; コマンドも使えます。例えばバックトレースを得るには '<emphasis
        role="bold"><code>bt</code></emphasis>' とします。
      </para>
    </sect3>

    <sect3 id="backtraces">
      <title>カーネルクラッシュダンプをデバッグしているときにバックトレースを得る方法</title>

      <para>
        カーネルのクラッシュダンプをデバッグしている場合、
        次の簡単な 2ステップで任意のプロセスのバックトレースを gdb から得ることができます。
      </para>
      
      <orderedlist>
        <listitem>
	  プロセスの proc addr を調べる: <code>ps -ax -O paddr -M
          netbsd.x.core</code>  
        </listitem>
        <listitem>
	  gdb に id として "<code>proc 0x&lt;addr&gt;</code>" を使うように指示する
        </listitem>
      </orderedlist>
    </sect3>

    <sect3 id="ddb">
      <title>DDB ってなんですか、それを使うと何ができるんですか</title>
      
      <para>
        DDB はオプションとして提供されるカーネル内部のデバッガーです。
        次の 3通りの方法で起動することができます:
      </para>
      
      <itemizedlist>
        <listitem>
	  いつでも、ポート特有のキーの組合せで起動する(組合せについては
          &man.ddb.4; 参照)。
        </listitem>
	<listitem>
	  カーネルがパニックした時に起動するように設定できます。
        </listitem>
	<listitem>
	  '-d' をブートフラグに指定する (<code>boot netbsd -d</code>)。
        </listitem>
      </itemizedlist>
      
      <para>
        いくつかの有用なコマンドは次の通りです:
      </para>
      
      <itemizedlist>
        <listitem>
	  <code>trace</code> - スタックトレースを作ります。カーネルパニックの
          <ulink url="../../Misc/send-pr.html#submitting">問題報告を送る
          </ulink>のにとても便利です。
        </listitem>
	<listitem>
	  <code>reboot</code> - システムをリブートします。
        </listitem>
	<listitem>
	  <code>sync</code> - クラッシュダンプを作った後、リブートします
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3 id="generating-a-crash-dump">
      <title>カーネルのクラッシュダンプを作るには</title>
      
      <para>
        通常、カーネルはパニックした時に自動的にクラッシュダンプを生成し、
        リブート時に &man.savecore.8; によって回収されます。
        しかし、 &man.ddb.4; で <code>sync</code> (または <code>reboot&nbsp;0x100</code>)
        を用いると強制的にクラッシュダンプを作る事ができます。もし、
        カーネルが buffer キャッシュをシンク(同期)しようとしている間に panic したり
        ハングするならば、シンクを行わない
        <code>reboot&nbsp;0x104</code> を使うことができます。
      </para>
    </sect3>
	
    <sect3 id="adding_a_kernel_to_a_boot_floppy">
      <title>ブートフロッピーにカーネルを追加する方法</title>

      <para>
        いくつかのポートでは既に
        "<code>cd
        /usr/src/distrib/<emphasis>&lt;ARCH&gt;</emphasis>/floppies ;
        make </code>" としてブートフロッピーを構築することができます。
        (これを実行する前に INSTALL カーネルを手動で構築する必要があるかもしれません。)
        既に <filename>boot.fs</filename>ファイルがあるのなら、次の手順でカーネルを置き換え
        ることもできます:
      </para>

      <orderedlist>
        <listitem><emphasis role="bold"><code>vnconfig -c vnd0 boot.fs</code></emphasis></listitem>
        <listitem><emphasis role="bold"><code>mount /dev/vnd0a /mnt</code></emphasis></listitem>
        <listitem><emphasis role="bold"><code>gzip -c -9 &lt; netbsd &gt; /mnt/netbsd.gz</code></emphasis></listitem>
        <listitem><emphasis role="bold"><code>umount /mnt</code></emphasis></listitem>
        <listitem><emphasis role="bold"><code>vnconfig -u vnd0</code></emphasis></listitem>
      </orderedlist>

      <para>
        この手順は、コンフィグファイルに "<code>pseudo-device vnd</code>" を指定して
        作成したカーネルを、現在利用していることを前提としています。
      </para>
    </sect3>

    <sect3 id="scsi_device_numbers">
      <title>新しく SCSI デバイスを増設したら、今までマウントできていたデバイスがマウントできなくなってしまいました。いったいどういう規則でデバイスに番号をつけてるんですか?</title>

      <para>
        デフォルトでは、NetBSD での SCSI デバイスは SCSI ID 番号の順に 0 から
        番号付けされます。いいかえると、一番小さな番号の SCSI デバイスが
        <code>/dev/sd0</code> となり、次のデバイスが <code>/dev/sd1</code> という
        ふうになります。これはブートプロセスの間に対応づけられる事に
        注意してください。
      </para>

      <para>
        もし、あなた専用のカーネルをコンパイルするならば、
        お好きな SCSI ID 番号を示す SCSI デバイスをセットすることができます。
        そのためのカーネル設定ファイルは次のようになります:
      </para>
	
<screen>
sd0             at scsibus0 target 4 lun 0
sd*             at scsibus? target ? lun ?
</screen>

      <para>
        上の 2行を用いると sd0 は SCSI ID 番号が 4 のディスクとなり、
        残りのデバイスは上で述べられたルールで対応づけられます。
        これは、しばしば、SCSI デバイスの "hardwiring" と呼ばれ、
        RAIDframe や <code>ccd</code> を使う場合には使用することをお勧めします。
        こうしておくと、一つのデバイスの電源が入っていなかったり
        故障した場合にデバイス ID が変わってしまうことを避けることができます。
      </para>
    </sect3>
  </sect2>

  <sect2 id="FAQ_hardware">
    <title>よくあるハードウェアに関する質問</title>

    <sect3 id="device-not-configured">
      <title><code>device not configured</code> ってどういう意味ですか?</title>

      <itemizedlist>
        <listitem>
          <para>
            このメッセージがシステムブートの autoconfiguration の出力中に
            現れたのならば、それはカーネルがシステム中に、あるハードウェアを
            検出したがそれに対応するデバイスドライバーが無いことを意味します。
            これにはデバイスドライバーは存在するがブートに使用したカーネルには
            含まれていない場合と、デバイスドライバーが本当に存在しない場合の
            両方の可能性があります。
            (後者の場合、優しい開発者に連絡を取り、テスト用のハードウェアを
            提供してデバイスドライバーを書いてもらいましょう)
          </para>

          <para>
            GENERIC カーネルは基本インストールに用いられるので、
            安定で動くことが保証されている事が重要です。そのため、
            まだ安定ではないデバイスドライバーは GENERIC カーネルに含まれていません。
            あなたのシステム用の GENERIC カーネルの設定ファイルを見てみると
            「コメントアウト」されている実験的なデバイスドライバーが見つかるかも
            しれません。もしあなた用のカーネル(それを GENERIC とは呼ばないでください)を
            コンパイルするならば、実験的なデバイスドライバーを試すことができます。
          </para>
        </listitem>
        <listitem>
          <para>
            もし、このメッセージが <code>/dev</code>にあるデバイスノード
            (例えば SCSI ディスク)へアクセスしようとしたときに出力されたならば、
            それはアクセスしようとしたそのデバイスユニットを見つけられなかった
            事を意味します。例えば、存在しない、またはドライバーがカーネルにコンパイルされていない
            SCSI ディスクにアクセスしようとした場合です。
          </para>

          <para>
            しばしば、これは <code>/etc/fstab</code> に書かれたデバイスノードと
            カーネルがブート時の autoconfiguration で見つけたものが一致しない状態で、
            <code>/etc/rc</code>中の "mount" コマンドが全てのファイルシステムを
            マウントしようとした時に起ります。いま一度、使用しようとした
            デバイスがブート時にカーネルによって検出されているかを確認してください。
            確認には <code>/var/run/dmesg.boot</code> (ブート時の autoconfiguration の
            出力のコピーが保存されています) を用いることができます。
          </para>

	  <para>
	    以上のほかに、このメッセージが出力されることがあるのは、
	    疑似デバイスとして実装されているあるカーネルサブシステムが
	    カーネルにコンパイルされておらず LKM としてもロードされていない場合で、
	    コンフィギュレーションプログラムがその疑似デバイスを
	    <code>/dev</code> 以下のデバイスノードを使って設定しようとしたときです。
	    たとえば、防火壁がカーネルにコンパイルされておらず
	    LKM としてもロードされていない場合で、&man.pfctl.8; または &man.ipf.8;
	    ユーティリティーが防火壁のルールを読み込もうとしたときが相当します。
	    これらのユーティリティーが、
	    使おうとされたデバイスはどれかなどの有用なメッセージを表示しなかった場合、
	    コマンド内部で何がおこなわれているかを調べて、
	    このエラーメッセージの原因を突き止めるには、
	    &man.ktrace.1; を使うと便利です。
	  </para>

	  <para>
	    このほかの多くの場合、このメッセージが出力されることがあるのは、
	    存在しないデバイスやドライバーのないデバイスにアクセスしたとき、
	    たとえば、存在しないネットワークインターフェース名が &man.ifconfig.8;
	    に渡されたときなどです (この場合、適切なドライバーが存在するとわかっていればですが、
	    そのインターフェースを <code>ifconfig vlan0
	    create</code> のようなコマンドで明示的に作成する必要があるかもしれません
	    &mdash; このことは、&man.sl.4;, &man.vlan.4;,
	    &man.stf.4; など、たいていのネットワーク疑似デバイスにあてはまります)。
	  </para>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3 id="atapi_devices">
      <title>ATAPI や ATA (IDE) デバイスのデバッグ</title>
      
      <para>
        もしカーネルが <code>WDCDEBUG</code> を有効にしてコンパイルされていれば、
        gdb が <code>wdcdebug_atapi_mask</code> と <code>wdcdebug_mask</code> 
        の値の変更に使用できます。
        これらの変数中の適切なビットを設定することで、カーネルは ATAPI と ATA 操作に
        ついての詳しい情報を出力するようになります。
        (現在 NetBSD のデフォルトでは <code>WDCDEBUG</code> は有効になっています。)
      </para>
      
      <para>
        最高レベルの出力を得るには次の手順に従ってください:
      </para>
      
<screen>
	# <emphasis role="bold">gdb --write /netbsd</emphasis>
	(gdb) <emphasis role="bold">set wdcdebug_atapi_mask=0xff</emphasis>
	(gdb) <emphasis role="bold">set wdcdebug_mask=0xff</emphasis>
	(gdb) <emphasis role="bold">quit</emphasis>
</screen>

      <para>
        註: この例の設定は<emphasis>非常に</emphasis>大量の出力を行います。
        個々のオプションを選択するためには、次に掲げる行のすぐ上に
        ある、ビットフラグのリストを見てください:
      </para>

      <itemizedlist>
        <listitem>
	  <ulink
        url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/sys/dev/scsipi/atapi_wdc.c?rev=HEAD&amp;content-type=text/x-cvsweb-markup">/usr/src/sys/dev/scsipi/atapi_wdc.c</ulink> 中の <code>wdcdebug_atapi_mask</code>
        </listitem>
	<listitem>
	  <ulink
        url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/sys/dev/ic/wdc.c?rev=HEAD&amp;content-type=text/x-cvsweb-markup">/usr/src/sys/dev/ic/wdc.c</ulink> 中の <code>wdcdebug_mask</code>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3 id="usb-debugging">
      <title>USB デバイスのデバッグ</title>

      <para>
        USB デバイスの問題が起きた場合、USB ドライバーのメッセージを冗長にすることが
        できます。
      </para>

      <itemizedlist>
        <listitem>
	  <code>USB_DEBUG</code> と <code>DDB</code>
          を含むカーネルをコンパイルする。
	</listitem>
	<listitem>
	  <code><emphasis role="bold">-d</emphasis></code> をつけてブートし、
          &man.ddb.4; に入る。
	</listitem>
	<listitem>
	  ddb で変数 usbdebug と uhcidebug を 5 にセットする。
          ("write usbdebug 5" と "write uhcidebug 5")
	</listitem>
	<listitem>
	  デバイスを挿入して <code>continue</code> と入力する。
	</listitem>
      </itemizedlist>
    </sect3>

    <sect3 id="new_pnp_device">
      <title>あたらしい PnP デバイスを認識させるには</title>
      
      <para>
        この手順は対応する汎用のデバイスがすでにサポートされており、
        デバイス ID が認識されないだけである時のみ有効です。
        動作の異なるデバイスを加えるにはソースコードを書く必要があります。
      </para>

      <orderedlist>
        <listitem>
          <para>
	    デバイスは、ブートメッセージ中に '<code>not configured</code>' として
            表示されているはずです。出力中に含まれる
            デバイス ID を記録して下さい(この例だと <code><emphasis role="bold">USR3031</emphasis></code>です):
          </para>
	
	  <screen>isapnp0: &lt;U.S. Robotics 56K FAX INT, <emphasis role="bold">USR3031</emphasis>, , &gt; port 0x3e8/8 irq 5 not configured</screen>
        </listitem>

	<listitem>
	  <para>
	    適切なエントリーを <filename>
	    <ulink
	    url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/sys/dev/isapnp/isapnpdevs?rev=HEAD&amp;content-type=text/x-cvsweb-markup">/usr/src/sys/dev/isapnp/isapnpdevs</ulink></filename> に加えて下さい:
          </para>

	  <screen>devlogic       com     USR3031         USR 56k Faxmodem</screen>
	</listitem>

	<listitem>
	  <code>isapnpdevs.{c,h}</code> を
	  '<code>make -f Makefile.isapnpdevs</code>' として作り直します。
	</listitem>
	
	<listitem>
	  <ulink url="#how_to_build_a_kernel">カーネルの再構築</ulink>をしてください。
	</listitem>
	
	<listitem>
	  変更点を &man.send-pr.1; または
          <ulink url="../../Misc/send-pr.html#submitting">オンラインフォーム</ulink>を用いて
          報告して下さい。
	</listitem>	
      </orderedlist>
    </sect3>

    <sect3 id="new_pcmcia_device">
      <title>あたらしい PCMCIA デバイスを認識させるには</title>
      
      <para>
        この手順は対応する汎用のデバイスがすでにサポートされており、
        デバイス ID が認識されないだけである時のみ有効です。
        動作の異なるデバイスを加えるにはソースコードを書く必要があります。
      </para>
	
	<orderedlist>
	  <listitem>
	    カーネルを &man.options.4;
            <code>PCMCIAVERBOSE</code> を有効にしてコンパイルします。
	</listitem>	
	<listitem>
	  ブートメッセージをチェックします - 該当のカードは
          '<code>not configured</code>' とレポートされているはずです。製造元
          (Manufacturer) とプロダクトコード(例題では <code><emphasis
          role="bold">0x143</emphasis></code> と <code><emphasis
          role="bold">0x201</emphasis></code> です)を記録します:
	
<screen>pcmcia0: CIS version PCMCIA 2.0 or 2.1
pcmcia0: CIS info: Grey Cell, GCS2000, Gold II, 1
pcmcia0: Manufacturer code <emphasis role="bold">0x143</emphasis>, product <emphasis role="bold">0x201</emphasis>
pcmcia0: function 0: network adapter, ccr addr 3f8 mask 1
</screen>
	</listitem>	

	<listitem>
	  <code>ベンダー(vendor)</code> と <code>プロダクトコード(product)</code> を
          <code> <ulink
          url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/sys/dev/pcmcia/pcmciadevs?rev=HEAD&amp;content-type=text/x-cvsweb-markup">/usr/src/sys/dev/pcmcia/pcmciadevs</ulink> </code> に加えます
	</listitem>
	
	<listitem>
	  <code>pcmciadevs.h</code> と
          <code>pcmciadevs_data.h</code> を '<code>make -f
          Makefile.pcmciadevs</code>' として作り直します。
	</listitem>
	
	<listitem>
	  付け加えたエントリーを適切な <code>/usr/src/sys/dev/pcmcia/</code> にある
          bus attach ファイルの先頭部分にあるデバイステーブルに付け加えます。
          例えば ne2000 互換カードの場合には <ulink
          url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/sys/dev/pcmcia/if_ne_pcmcia.c?rev=HEAD&amp;content-type=text/x-cvsweb-markup">/usr/src/sys/dev/pcmcia/if_ne_pcmcia.c</ulink> に加えます。
	</listitem>

	<listitem>
	  <ulink url="#how_to_build_a_kernel">カーネルの再構築</ulink>をします。
	</listitem>
	
	<listitem>
	  変更点を &man.send-pr.1; または
          <ulink url="../../Misc/send-pr.html#submitting">オンラインフォーム</ulink>を用いて
          報告して下さい。 
	</listitem>
      </orderedlist>
    </sect3>

    <sect3 id="plip_support">
      <title>PLIP (Parallel Line IP) をサポートしていますか</title>

      <para>
        NetBSD/i386 で PLIP をサポートするための Martin Husemann のパッチが
        <ulink
	url="http://www.NetBSD.org/cgi-bin/query-pr-single.pl?number=1278">PR 1278</ulink>
	として出ています。この PR の末尾にあるパッチは、NetBSD
        1.3.3 ソースツリーに対して適用することができます。
      </para>
    </sect3>
	
    <sect3 id="ubc">
      <title>UBC ってなんですか?</title>
      
      <para>
        UBC とは統合されたバッファーキャッシュ(Unified Buffer Cache) プロジェクトを
        意味します。これは Chuck Silvers によって書かれ、1.5L(2000年11月)以降の
        NetBSD に統合されています。UBC でない状態からセットアップする際には
        config(8) を再実行する必要がありますが、その前に "BUFCACHE", "NBUF" や
        "BUFPAGES" の設定を消去して、バッファーキャッシュのサイズをデフォルトに
        戻した方が良いかもしれません。UBC のもとでは、伝統的な
        バッファーキャッシュは通常ファイルのデータの格納には用いられず、
        metadata だけに用いられますので、物理メモリーのほとんどを
        仮想記憶システムに任せてしまった方が良いでしょう。デフォルトの
        バッファーキャッシュサイズはマシンのメモリー量に関わらず、
        ほとんどの場合、最適となります。ブートメッセージ中の
        メモリー量を示している "using X buffers containing Y memory" は
        ファイルデータのキャッシュ用のメモリー量を示していませんので
        数字が変わらなくても心配しないでください。
      </para>

      <para>
        重要な変更点はより多くのメモリーを通常ファイルデータのキャッシュに
        用いることができるということです。このためアクセスしようとした
        ファイルのデータがすでにメモリー中に存在することが多くなり、結果として
        ファイルシステムの入出力が速くなります。速くなる割合は何をするかにも
        よりますが、多くの場合その違いに気付くことができるでしょう。
      </para>

      <para>
        以下も参照してください:
	Chuck Silvers の論文 <ulink
        url="http://www.usenix.org/publications/library/proceedings/usenix2000/freenix/full_papers/silvers/silvers_html/">UBC:
        An Efficient Unified I/O and Memory Caching Subsystem for
        NetBSD</ulink>
      </para>
    </sect3>
  </sect2>

  <sect2 id="further_reading">
    <title>さらなる読み物</title>

    <sect3 id="NetBSD_specific_documentation">
      <title>NetBSD に特有のドキュメント</title>
    
      <itemizedlist>
      <listitem><ulink url="programming.html">カーネルプログラミング FAQ</ulink></listitem>
      <listitem><ulink url="pseudo/">疑似(pseudo)デバイスドライバーを書くには</ulink></listitem>
      <listitem><ulink url="profiling/">カーネルプロファイリング HOWTO</ulink></listitem>
      <listitem><ulink url="elf-notes.html">ベンダー特有の ELF Note Element</ulink></listitem>
      <listitem><ulink url="uvm.html">UVM、あたらしい仮想メモリーシステム</ulink></listitem>
      <listitem><ulink url="vfork.html">なぜ伝統的な vfork() を実装したか</ulink></listitem>
      <listitem><ulink url="kgdb.html">GDB を用いた NetBSD カーネルのデバッグ HOWTO</ulink></listitem>
      <listitem><ulink url="../../../Documentation/kernel/non-exec.html">非実行マップ機能に関する情報</ulink></listitem>
      <listitem><ulink url="../../internals/en/">NetBSD Internals</ulink></listitem>
      </itemizedlist>
    </sect3>

    <sect3 id="other_online_documentation">
      <title>その他のオンライン ドキュメント</title>
    
      <itemizedlist>
        <listitem><ulink url="http://www.teamten.com/lawrence/291.paper/291.paper.html">
          Porting BSD UNIX to a New Platform</ulink></listitem>
        <listitem><ulink url="http://www.netapp.com/tech_library/nfsbook.html">
          4.4BSD のデザインと実装、第9章 (NFS)</ulink></listitem>
        <listitem><ulink url="config-torek.ps">4.4BSD のデバイスコンフィギュレーション</ulink></listitem>
        <listitem><ulink url="http://www.mckusick.com/softdep/index.html">Soft Updates に関する情報 (Soft Dependencies、softdep) とスナップショット</ulink></listitem>
        <listitem><ulink url="http://www.ccrc.wustl.edu/pub/chuck/">ATM ネットワーキングの BSD への統合</ulink></listitem>
        <listitem><ulink url="http://www.pdl.cs.cmu.edu/RAID/index.html">RAID と RAIDframe 関連の多くのドキュメント</ulink></listitem>
        <listitem><ulink url="http://dinsen.net/netbsd/kernel.html">Anders Dinsen の
          カーネルドキュメンテーションの概要</ulink></listitem>
        <listitem>
	  <para>
	  Jochen Kunz による "NetBSD Device Driver Writing Guide": 
	  </para>
	  <para>
          [<ulink url="http://www.unixag-kl.fh-kl.de/~jkunz/projekte/NetBSD-driver_writing-1.0.1e.pdf.gz">gzip 圧縮された PDF</ulink> | <ulink url="http://www.unixag-kl.fh-kl.de/~jkunz/projekte/NetBSD-driver_writing-1.0.1e.ps.gz">gzip 圧縮された PS</ulink>] (<small>英語</small>)
	  </para>
	  <para>
          [<ulink url="http://www.unixag-kl.fh-kl.de/~jkunz/projekte/NetBSD-treiber_schreiben-1.0.1.pdf.gz">gzip 圧縮された PDF</ulink> | <ulink url="http://www.unixag-kl.fh-kl.de/~jkunz/projekte/NetBSD-treiber_schreiben-1.0.1.ps.gz">gzip 圧縮された PS</ulink>] (<small>ドイツ語</small>)
	  </para>
           </listitem>
        <listitem><ulink url="http://www.home.unix-ag.org/bmeurer/NetBSD/howto-lkm.html">NetBSD ローダブルカーネルモジュール入門</ulink></listitem>
      </itemizedlist>
    </sect3>
  </sect2>
  
</sect1>

<parentsec url=".." text="NetBSD ドキュメンテーション"/>
</webpage>
