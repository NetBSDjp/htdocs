<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
<!-- Copyright (c) 1994-2004
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@NetBSD.org">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <title>Cross-building NetBSD</title>
  </head>

<body bgcolor="#FFFFFF" text="#000000">

<HEADING>Cross-building NetBSD

<LIST>

<h2>Other sources of information</h2>
<ul>
<li><a href="../current/">Tracking NetBSD-current</a></li>
<li><a href="../../Documentation/">General NetBSD Documentation</a>
    - for questions not specific to cross building.</li>
<li>``<a
href="http://www.mewburn.net/luke/talks/bsdcon-2003/index.html">Cross-building
NetBSD</a>'' - Luke Mewburn and Matthew Green's presentation of their <a
href="http://www.mewburn.net/luke/papers/build.sh.pdf">paper</a> for BSDCon
2003</li>
</ul>

<SECTION>Frequently asked questions

<ENTRY>terminology  Terminology
<ul>
<li>Host system: the system you are willing to perform cross build on.

<li>Target system: the system you are willing to perform cross build for.

<li>Cross build: if the host system is different from the target system,
you are running a cross build.

<li>Self build: if the host system is equal to the target system,
you are running a self build.
</ul>

If you are running build on top of NetBSD/i386 to produce NetBSD/sh3 binary,
you are running a cross build.
NetBSD/i386 is the "host system", and NetBSD/sh3 is the "target system".

<ENTRY>why  Why cross-build?  When do we need to do cross-builds?
Here are couple of reasons for cross-builds:
<ul>
<li>NetBSD supports <A HREF="../../Ports/">numerous architectures</A>.
Some of them are not that performant compared to other modern architectures.
If you would like to build more frequently for older architectures,
cross build is a good solution.

<li>If the target systems is embedded system products (like cell phones),
and you would like to port NetBSD onto that, you may not be able to run
self build on top of the target system.

<li>If you need to build NetBSD binary on top of non-NetBSD host system for
some reason, you need to run a cross build.

<li>If you are trying to port NetBSD onto new architecture,
cross compilation would be the only choice.
</ul>

<SECTION>Step-by-step

<ENTRY>host-system  Selecting a host system
If you have no particular reasons, we'd suggest you to use NetBSD
(probably the latest release, or NetBSD-current) as your host system.
Other platforms are supported too, but do not get as much testing.
For a (semi-)current state of affairs, please refer
<CURRENTSRC>src/tools/compat/README .

<ENTRY>build-tree Preparing build tree
First of all, you need to get the whole NetBSD source code tree.
See <a href="../current/">"Tracking NetBSD-current"</a> for details.
In the following descriptions, we assume that the tree is under $TOP/src.
<p>
<ENTRY>create-toolchain Create the cross-compiler toolchain
To create a toolchain e.g. for <em>macppc</em> into the directory
/usr/cross/{bin,include,lib,libexec,...}, do:
<pre>
	% cd $TOP/src
	% ./build.sh -m macppc -T /usr/cross tools
</pre>
<p>
For more options (including building a complete NetBSD tree from the
checked out tree), see
<pre>
./build.sh -h
</pre>

<ENTRY>compile-kernel Actual cross compilation - kernel
Use the toolchain created by the build script to build the kernel.
NetBSD config(8) is architecture independent, so you can use it on the
host system. (But note that it is version dependent, you can not create 1.6
kernels with -current config, so the nbconfig binary from the cross binaries
directory is used below.)
<pre>
% cd $TOP/src/sys/arch/macppc/conf
% cp GENERIC MYCONF
% vi MYCONF
</pre>

To cross-compile the kernel by hand, use the following commands:
<pre>
% /usr/cross/bin/nbconfig MYCONF
% cd ../compile/MYCONF
% /usr/cross/bin/nbmake-macppc depend
% /usr/cross/bin/nbmake-macppc 
</pre>

Alternatively, you can let ./build.sh do all the work:
<pre>
% cd $TOP/src
% ./build.sh kernel=MYCONF
</pre>  

<p>

<ENTRY>compile-userland Actual cross compilation - userland
Use the build script to build the whole tree, as documented in
<a href="../current/">"Tracking NetBSD-current"</a>.
<pre>
# cd $TOP/src
# ./build.sh -D $DESTDIR -d
</pre>

<SECTION>Common problems

<ENTRY>compiler-issue  Compiler died with internal error, or something similar
With cross build, compiler settings get trickier.
With cross build configuration compiler bugs tend to show up
more frequently.
We also need to use different version of compiler from self builds,
so compiler compatibility issue (like between different version of GCC, or
compiler from different vendors) can become a headache.
<p>

Use the correct cpp, or you will be in trouble with predefined symbols
like <tt>__NO_LEADING_UNDERSCORES__</tt> or <tt>__LITTLE_ENDIAN__</tt>.
<p>

Of course we need to do more about stabilizing cross builds.

<p>

There is no magic wand for this:
<ul>
<li>Review the content of the compilation script.
	If you mix compilers for different targets (like using /usr/bin/as
	during cross build) you will be in trouble.
<li>As a workaround, try to decrease the optimization level (like -O2 to -O);
	change compiler settings at runtime.
<li>Review your compiler settings at cross-compiler generation time.
<li>If you know how to repeat it, and you are using gcc,
	<a href="http://www.gnu.org/software/gcc/bugs.html">
	submit a bug report to the gcc guys</a>.
</ul>

<ENTRY>compiler-usage  How to use the NetBSD crosscompiler outside the NetBSD source tree?
After building a crosscompiler toolchain in $TOOLDIR, how do you get
the compiler to find the target system's includes and libs in $TARGETROOT?
Assuming you have the 1.6.x toolchain and 'vax' as target, do the following
steps:

<pre>
	% cd $TOOLDIR/vax--netbsdelf
        % mv include include.BAK
        % ln -s $VAXROOT/usr/include .
        % mv lib lib.BAK
        % ln -s $VAXROOT/usr/lib .
        % set path=($path `pwd`/bin)
        % rehash
</pre>

On -current and 2.0 systems, you'll have to take extra care for libraries
in /lib, see
<a href="http://mail-index.netbsd.org/tech-toolchain/2004/02/03/0006.html">this
posting</a> in the tech-toolchain archives.
<p>

After that, your crosscompiling gcc will be used:

<pre>
	% which gcc
	/home/cvs/src-1.6/tools/obj.vax/tools.NetBSD-1.6-vax/vax--netbsdelf/bin/gcc
	% gcc h.c -o h
	% file h
	h: ELF 32-bit LSB executable, Digital VAX, version 1 (SYSV), for NetBSD, dynamically linked (uses shared libs), not stripped
</pre>

</LIST>

<DOCLINK>

<hr>
<address>
  <small>
  <a href="http://www.NetBSD.org/cgi-bin/feedback.cgi">(Contact us)</a>
  $NetBSD: index.list,v 1.35 2004/02/04 11:58:59 hubertf Exp $<br>
  <a href="../../Misc/disclaimer.html">Copyright &copy; 1994-2004
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
  </small>
</address>

</body>
</html>
