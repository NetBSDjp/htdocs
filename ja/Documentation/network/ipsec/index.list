<html>
<head>
<!-- Copyright (c) 1998, 1999, 2000
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@jp.NetBSD.ORG">
<title>IPセキュリティーFAQ</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<HEADING>NetBSD IPセキュリティー

このページは作成中ですので、
<a href="../../../Misc/feedback.html">コメントや提案</a>を歓迎します。

<LIST>
<h2>他のリンク</h2>
<ul>
  <li><a href="http://www.kame.net/">かめプロジェクト</a>,
	現在マージされているIPv6実装のでもと
  <li><CURRENTSRC>/sys/netinet6/IMPLEMENTATION:
	実装に関する詳細情報
</ul>

<SECTION>IPセキュリティーFAQ

<ENTRY>getting_started はじめましょう
IP Security(IPsecと略す)のコードは1999年6月にNetBSDのディストリビューションにマージされました。
IPsecは、NetBSD 1.5の公式リリースに含まれるでしょう。
IPsecが提供するパケット毎の認証/機密性は、IPsecを使用して通信するpeer間通信を保護します。
IPsecは IPv6とIPv4で利用可能です。
<p>

しかしIPsecを使用するには、カーネルの再構成が必要であることに注意して下さい。
それはGENERICカーネルでは有効にはなっていません。
<p>

<ul>
  <li>NetBSD 1.4.xを利用しているなら、<a href="http://www.kame.net/">かめプロジェクト</a>の
      webpageを見てIPv6サポートのパッチを入手するとよいでしょう。IPsecはIPv4とIPv6両方で使用可能です。
  <li>1999年11月以前のNetBSD-currentを利用しているなら、IPsecを使用するには
      カーネル設定ファイル(<tt>GENERIC.v6</tt>)が必要です。
  <li>1999年11月21日以降のNetBSD-currentを利用しているなら、標準ではコメントアウトされた
  	IPsecをサポートする<tt>GENERIC</tt>カーネル設定ファイルが含まれています。
</ul>

<p>

ユーザーランドにはIPsecサポートコードが含まれていますが、IPsecをサポートするカーネルからサポートしていない
カーネルに切り替えても、ユーザーランドの再コンパイルは必要ありません。
<p>

<ENTRY>ipsec_breakdown  IPsec = AH + ESP + IPcomp + IKE
IPsecは以下に挙げられる別々のプロトコルで成り立っています。

<ul>
  <li>Authentication Header (AH): 強い暗号チェックサムをパケットに付加することによってパケットの信頼性を保証します。
	AHのついたパケットを受け取りチェックサムが正常なら、
	<em>あなたとpeerが秘密鍵を共有し他の誰もがキーを知らないなら、</em>
	2つのことについて確信できるでしょう。
    <ul>
      <li>パケットはpeerによって作成され、パケットは偽造されていません。
      <li>パケットは転送中に変更されませんでした。
    </ul>
	他のプロトコルと異なり、AHは、IPヘッダーからパケットの終わりまで
	パケット全体をカバーします。

  <li>Encapsulating Security Payload (ESP): 暗号化アルゴリズムで暗号化されたパケットを機密性を保証します。
	ESPでパケットを受け取って、解読に成功したなら
	パケットが途中で盗聴されていないと確信できるでしょう。
	<em>あなたとpeerが秘密鍵を共有し、他の誰もがキーを知らないなら。</em>

  <li>IP payload compression (IPcomp): ESPがパケットに暗号化サービスを提供します。
	しかし、暗号化は(ppp compressionのように)伝走路上の圧縮に打撃的な影響を与える傾向があります。
	IPcompはESP(IPcompだけを使うことができる)によって暗号化を行う前にパケットを圧縮する方法を提供します。

  <li>Internet Key Exchange (IKE): これまで書いたように、AHとESPはpeerと秘密鍵を共有することが必要となります。
	遠い場所との通信のために、秘密理にキーを交渉する方法を提供する必要があります。
	IKEはそれを可能にします。
</ul>

AH、ESP、IPcompはカーネルに実装されています。
IKEはユーザーランドでデーモンプロセスとして実装されています。
カーネルとユーザーランドは、キー管理テーブルを通して協調しています。
<p>

IKEはオプションです。AH/ESPのために手作業で秘密鍵を構成することができます。
しかし、永久に同じ秘密鍵を使うことができないことを理解して下さい。
もし長い間同じ秘密鍵を使うなら、トラフィックが危険にさらされる可能性がますます高くなります。
<p>

NOTE: <strong>IPsecプロトコルのセキュリティーは秘密鍵の機密性如何です。
</strong>
もし秘密鍵が危険にさらされるなら、IPsecプロトコルは安全であり得ません。
設定ファイル、キーデータベースファイルのパーミッションあるいは情報漏洩につながるかも知れないさまざまなことに注意して下さい。

<pre>

	userland programs		IKE daemon
	  ^ | AF_INET{,6} socket	  ^ | PF_KEY socket
========= | | =========================== | | ======== Kernel/user boundary
	  | v				  | v
	transport layer, TCP/UDP	key management table
	  ^ |				  ^ | key information
	  | |				  | |
	  | v				  | v
	IP input/output logic <------->	AH/ESP/IPcomp logic
	  ^ |
	  | v
	Network drivers (ethernet)
</pre>

<ENTRY>trans_tunnel  トランスポートモードとトンネルモード
AH, ESP そして IPcompにはトランスポートモードとトンネルモードの2つの操作モードがあります。
トランスポートモードは、通常の通信を暗号化します。
トンネルモードは、新しいIPv4/6ヘッダ中のパケットを暗号化します。
トンネルモードは、VPNゲートウェイとして使用できるように設計されています。
<pre>
[[transport mode]]
my host ======== peer's host
	transport
	mode

packets: [IP: me->peer] ESP payload
			&lt;---------&gt; encrypted


[[tunnel mode]]
	(a)		     (b)			(c)
my host ---- my VPN gateway ======== peer's VPN gateway ---- peer's host
			    tunnel mode

packets on (a): [IP: me->peer] payload
packets on (b): [IP: mygw->peergw] ESP [IP: me->peer] payload
			  	   &lt;------------------------&gt; encrypted
packets on (c): [IP: me->peer] payload
</pre>

<ENTRY>policy  IPsecポリシー管理
カーネルはパケットをセキュアーにする方法を知っていますが
<em>どのパケット</em>がセキュリティーを必要とするか知りません。
我々はどのパケットをセキュアーにするかをカーネルに示す必要があります。
IPsecポリシー設定によりそれらを指定します。
<p>

IPsecポリシーは、パケット毎またはソケット型毎に設定できます。
<ul>
  <li>パケット毎: パケットフィルターと同じようにカーネルに設定できます。
	「10.1.1.0/24にメッセージを送っているなら、外向なパケットを暗号化してください」
	というように指定することができます。
	これは、IPsecルーターを走らせている時、うまく働きます。
  <li>ソケット毎: 特定のソケットに setsockopt(2) を使って設定します。
	「このソケットから外向なパケットを暗号化してください」のように指定することができます。
	これは、IPsec-awareサーバープログラムを走らせたい時、うまく働きます。
</ul>

IPsecポリシーはパケットに対して使われるプロトコル(AH、ESPまたはIPcomp)を決定します。
パケットに対してAH、ESP、IPcompのどの組み合わせを使用するカーネルなのかを構成することができます。
ひとつのパケットに対して、多数のESPオペレーションのような、
同じプロトコルを複数の時間に適用することができます。
多数のESPオペレーションが役に立つかどうかはわかりません。しかしテスト/デバッグには興味深いのですが。

<ENTRY>export_issues  輸出問題
合衆国輸出法案のため暗号技術に対して、NetBSDプロジェクトは
<tt>crypto-intl</tt>（合衆国以外の）そして <tt>crypto-us</tt>（合衆国国内の使用のみ）の
2つのソースコードリポジトリーを持っています:
ESPとIKEは輸出規制を受けやすいです。
あなたは適切なロケーションからソースコードをもらう必要があるでしょう。
<p>

規制はもうじき変更されるでしょう。(2000年初頭に)NetBSDプロジェクトはリポジトリー構成を変更しているでしょう。

<ENTRY>config_kernel  IPsecカーネルの設定
<strong>(1.5リリース前に)</strong>
crypto-readyなバイナリーを再配布できるかわかりません。
ソースコードツリーからcrypto-readyなバイナリーを作成するには、ドキュメントに従って下さい。
作成手順の詳細は<A HREF="/Documentation/current/"><em>NetBSD-currentの追跡</em></a>を参照して下さい。
<ol>
  <li>適切な場所から<A HREF="#export_issues">ソースコードツリー</A>を取得します。
	ソースツリーは下のように配置されているはずです。
<pre>
NetBSD -+- src ---------+- bin
	|		+- sbin
	|		+- usr.bin
	|		+- usr.sbin
	+- cryptosrc-intl -- crypto-intl -+- dist
					  +- usr.sbin
</pre>
  <li><tt>src/crypto-intl</tt>から
	<tt>../cryptosrc-intl/crypto-intl</tt>にシンボリックリンクを作成します。
	ツリーはこのようになります。
<pre>
NetBSD -+- src ---------+- bin
	|		+- sbin
	|		+- usr.bin
	|		+- usr.sbin
	|		+- crypto-intl
	|		     | symbolic link
	|		     v
	+- cryptosrc-intl -- crypto-intl -+- dist
					  +- usr.sbin
</pre>
  <li>カーネル設定ファイルで次の部分を有効にして、新しいカーネルを構築してください。
<pre>
prefix ../crypto-intl/sys
cinclude "conf/files.crypto-intl"
prefix
options IPSEC
options IPSEC_ESP
</pre>
  <li><tt>make build</tt>を実行します。
		buildが終わると racoon(8) IKE デーモンや
		kerberos5が利用可能な telnet(1)/telnetd(8)
		などが追加されたユーザーランドツールが使えるようになります。
  <li>カーネルを置き換えて、そしてリブートしてください。
</ol>

<ENTRY>sample_esp  設定例: ホスト間の暗号化
もしマニュアルで設定した秘密鍵でホスト間の暗号化(トランスポートモード)を行うなら、
下記の構成で充分です。マニュアルでキーを設定するために<a href="http://www.flame.org/cgi-bin/uncgi/hman?page=setkey&amp;sect=8">setkey(8)</a>を
使用します。
<pre>
#! /bin/sh
#
# packet will look like this: IPv4 ESP payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 esp 9876 -E des-cbc "hogehoge";
add 20.1.1.1 10.1.1.1 esp 10000 -E des-cbc "mogamoga";
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec esp/transport//use;
EOF
</pre>
<p>

最初の2つの行は、ESPで使用する秘密鍵を設定しています。
4番目の数字は SPI(セキュリティー・パラメーター・インデックス)と呼ばれています。
この値はESPパケットに付加され、受信した側でパケットから秘密鍵を見つけるために送られます。
この値はノード上でユニークである必要があります。
<ul>
  <li>10.1.1.1から20.1.1.1に、秘密鍵<tt>hogehoge</tt>で、DES-CBCアルゴリズムを使います。
	トラフィックは SPI値9876によって識別されます。
  <li>20.1.1.1から10.1.1.1に、秘密鍵<tt>mogamoga</tt>で、DES-CBCアルゴリズムを使います。
	トラフィックは SPI値10000によって識別されます。
</ul>
<p>

最終行はノードのパケット毎のIPsecポリシーを設定しています。
この設定で、node(10.1.1.1)からpeer(20.1.1.1)に送られるパケットは暗号化されます。秘密鍵はカーネル内部
で構成されます。
この設定は、20.1.1.1から10.1.1.1に届く暗号化されていないパケットを禁止していません。
もし暗号化されていないパケットを拒否したい場合、次の行を追加して下さい。
<pre>
spdadd 10.1.1.1 20.1.1.1 any -P in ipsec esp/transport//require;
</pre>
<p>

ポリシー設定の構文は ipsec_set_policy(3)
で述べられています。

<p>

回線上の暗号化されたパケットを見るために
tcpdump(8) を実行して下さい。
パケットは暗号化されます。それらのパケットを盗聴することはできません。

<p>

上記の例は人間が読むことができる秘密鍵を使います。
しかしながら、人間が読むことができる秘密鍵の使用がバイナリーキーより危険であることから、
実際のオペレーションでは、バイナリーキーを使用する方がいいでしょう。
<p>

キーの長さはアルゴリズムによって決定されます。
des-cbcでは、秘密鍵は64ビット(=8バイト)でなければなりません。
もしそれより短いまたは長いキーを指定するなら、<a href="http://www.flame.org/cgi-bin/uncgi/hman?page=setkey&amp;sect=8">setkey(8)</a>はエラーになるでしょう。

<ENTRY>sample_ah  設定例: ホスト間の認証
ESPと同じように、AHを設定することができます。
<pre>
#! /bin/sh
#
# packet will look like this: IPv4 AH payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 ah 9877 -A hmac-md5 "hogehogehogehoge";
add 20.1.1.1 10.1.1.1 ah 10001 -A hmac-md5 "mogamogamogamoga";
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec ah/transport//use;
EOF
</pre>
<p>

<ENTRY>sample_both  設定例: ホスト間の暗号化+認証
もしAHとESP双方で秘密鍵を設定した場合、双方とも使うことができます。
IPsecのドキュメントでは、AHの後にESPを適用することを推奨しています 。
<pre>
#! /bin/sh
#
# packet will look like this: IPv4 AH ESP payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 esp 9876 -E des-cbc "hogehoge";
add 20.1.1.1 10.1.1.1 esp 10000 -E des-cbc "mogamoga";
add 10.1.1.1 20.1.1.1 ah 9877 -A hmac-md5 "hogehogehogehoge";
add 20.1.1.1 10.1.1.1 ah 10001 -A hmac-md5 "mogamogamogamoga";
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec esp/transport//use ah/transport//use;
EOF
</pre>

<ENTRY>sample_vpn  設定例: VPN
(to be written)

<ENTRY>config_ike  IKEによるAH/ESPキーの設定
(to be written)

<ENTRY>conformance  標準化、互換性への適合
KAMEのIPsecの実装(NetBSDツリーに含められる)が、最新のIPsec標準に適合しています。
<a href="http://cvsweb.netbsd.org/bsdweb.cgi/syssrc/sys/netinet6/IMPLEMENTATION?rev=HEAD&content-type=text/x-cvsweb-markup">/sys/netinet6/IMPLEMENTATION</a>は、
実装するための包括的な標準化文書があります。
<p>

他の実装との互換性が、さまざまな場所で確認されました。
<CURRENTSRC>/sys/netinet6/IMPLEMENTATION
に含まれる実装は、過去に互換性は確認されたものです。
しかし、互換性のテスト後にコードは変更される可能性がありますので、互換性がなくなっている可能性もありますので注意して下さい。
NetBSDデバイスとpeerデバイスがある特定の構成のみで互換性をとることも可能です。
<p>

もし他の実装でNetBSDデバイスを設定する場合、そのIPsecの仕様/実装には多くの難点があることに注意してください。
互換性を取るためにはpeerのデバイスと同じデバイスでNetBSDデバイスの構成を設定する必要があります。

<ENTRY>compatibility  他のIPsecスタックとのAPI互換性
IPsecの知識がありユーザーランドのコードを書きたいなら、あなたはIPsecプラットフォーム間のAPI互換性について知りたくなるしょう。
<p>

我々はカーネル内に秘密鍵データベースを操作するためにRFC2367 PF_KEY APIを持っています。
このAPIの基本的な部分は他のUNIXベースのIPsecスタック上で利用可能であり、そしてある程度(例えば、OpenBSDが同様にPF_KEY APIを実行する)の互換性があるかも知れません。
かめIPsecスタックが、他のグループがそうするのと同じように、ある特定の方法でこれを拡張します。
拡張された部分は他の(非かめ)IPsecスタックと両立できません。
<p>

IPsecポリシー管理APIの仕様書ドキュメントはありません。
それ故に、IPsecポリシー管理APIで(非かめ)IPsecスタックとの互換性を想定することができません。
<p>

設定・ファイルシンタックスの標準がありません。
非NetBSD IPsecの間の設定をコピーしたいなら、変換する必要があるでしょう。
<p>

NetBSDとFreeBSDは同じ原点(かめ)からIPsecコードベースを共有するため、API互換性があります。
しかしながら、異なった日付のかめコードをマージした時点で、NetBSDとFreeBSDのIPsecコードには違いが生じます。
標準的なユーザーランドアプリケーションがその違いを認識する必要はありません。
<ul>
  <li>NetBSD-current は1999年12月下旬にかめIPsecスタックを取り込んでいます。
  <li>FreeBSD-current は1999年12月初旬にかめIPsecスタックを取り込んでいます。
  <li>マニュアルでのipsecキー設定、 AH/ESPオペレーションまたは
	ipsec_set_policy(3) APIはカーネルにおける相違はありません。
  <li>PF_KEYソケット、libipsec API、PF_KEYラッパー関数などには違いがあります。
	直接PK_KEYソケットを操作する
	(racoon(8)のようなIKEデーモンやsetkey(8)のようなキー設定プログラム)
	アプリケーションを実装する際に、その違いは辛いかもしれません。
</ul>

</LIST>

<a href="../"><em>NetBSDドキュメンテーション:ネットワーク</em>へ戻る</a>
<hr>

<DOCLINK>

<hr>
<address>
  <a href="../../../Misc/feedback.html">(Contact us)</a>
  $NetBSD: index.list,v 1.7 2000/02/26 06:29:54 itojun Exp $<br>
  <a href="../../../Misc/disclaimer.html">Copyright &copy;
    1998, 1999, 2000
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
</address>

</body>
</html>
