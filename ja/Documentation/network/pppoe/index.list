<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<!-- Copyright (c) 1994-2002
        The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@JP.NetBSD.ORG">
<title>NetBSD Documentation: Steps to connect via PPPoE (DSL)</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<HEADING>PPPoE (DSL) 経由の接続手順

<LIST>

<SECTION>PPPoE (DSL) 経由の接続手順

<ENTRY>intro はじめに
この文書は、 PPPoE (DSL プロバイダーでよく使われています) 経由で
インターネットに接続するための簡単なセットアップについて説明します。
<p>
読者が NetBSD-1.5Z 以降のカーネルを使っていることを仮定しています (つまり、
1.5 リリースブランチのカーネルでは<em>ダメ</em>です) 。カーネル内 PPPoE
サポートのない古いバージョンの NetBSD を使っている場合は、 pkgsrc から
net/rp-pppoe パッケージをインストールするようおすすめします。これには
すべてを設定してくれる <pre>adsl-setup</pre> というコマンドが含まれています。
<p>
PPPoE は  <b>P</b>oint-to-<b>P</b>oint <b>P</b>rotocol <b>o</b>ver
<b>E</b>thernet の略です。典型的な設定は、 DSL モデム (これは DSL 線経由で
<i>Access Concentrator</i> と呼ばれるプロバイダーのルーターと喋ります)
とあなたのマシンを通常のイーサネットでつなぐことです。このため、対 DSL
モデム専用のイーサネットインターフェースが必要です。このイーサネット
インターフェース上に PPP 接続が構築されます。
<p>
よく見るとこれは妙なことのように見えます。イーサネットで接続しているのです - 
プロバイダーはなぜその上層で IP を使わないのでしょう? いくつかのプロバイダーは、
(ケーブルモデム接続のように) DHCP で IP アドレスを割り振って、 IP を使っています。
ほとんどのプロバイダーは、そのようにはしていません。 PPPoE を使ったほうが、
プロバイダーにとっては若干楽になるからです。 PPPoE では妙に小さい MTU
を使っており、そのせいで、インターネット上の不適切に設定された防火壁の
向こうにいるシステムの多くとの通信ができなくなるため、ユーザーにとっては若干面倒になります。
回避策は<a href="#clamping">あとで</a>説明します。
<p>
以下の例では、対 DSL モデム用のイーサネットインターフェースとして
<i>ne0</i> を使います。もちろん、これ以外のインターフェースでも
使えます。

<ENTRY>check-kernel カーネルの確認
PPPoE を使うためには、カーネルが PPPoE をサポートしている必要があります。
そのことを確認するため、
<pre>
  ifconfig -C
</pre>
を実行し、出力から pppoe を探します。もしなければ、カーネルコンフィグファイルに
<pre>
  pseudo-device pppoe
</pre>
を追加する必要があります。

<ENTRY>manual-test 手動で接続テストする
マシンを自動接続するよう設定する前に、手動でテスト接続をすることを
おすすめします。うまくいかない場合、このテストは設定のデバッグのための
簡単な方法になります。
<p>
まず最初に、 pppoe インターフェース自体を作り、ダミーの IP アドレス (これは PPP
ネゴシエーションによって置き換えられます) を割り振ります。このインターフェース
はまだ準備できていないので、ここでは down させておきます。
<pre>
  ifconfig pppoe0 create
  ifconfig pppoe0 inet 0.0.0.0 0.0.0.1 down
</pre>
次に、この pppoe インターフェースを、 DSL モデムへの接続に使っている
イーサネットインターフェースに割り付けます。このインターフェースは UP
されている必要がありますが、 IP アドレスが振られている必要はありません。
<pre>
  ifconfig ne0 up
  pppoectl -e ne0 pppoe0
</pre>
ここで、認証データが必要になります。 windows のソフトウェアはよく悪さをしたり
プロバイダーが個別に対応する必要があったりするため、ほとんどのプロバイダーは、
Linux ユーザー向けにデータのフォーマット方法の資料を提供しています。
t-online を使っている場合は <a href="#t-online-usernames">この傍注</a>
をご覧ください。以下のようなコマンドで認証データを入力します (特殊な文字は、
シェルが解釈しないように単引用符を使って保護する必要があることに注意) :
<pre>
  pppoectl pppoe0 myauthproto=pap 'myauthname=XXX' 'myauthsecret=XXX' hisauthproto=none
</pre>
ここで <tt>XXX</tt> はユーザー名、 <tt>YYY</tt> はパスワードです。
<tt>hisauthproto=none</tt> は、 PPP が通信相手に認証を要求すること
-多くのプロバイダーはこれを拒否します-を防ぎます。お使いのプロバイダーが CHAP
プロトコルに対応している場合は <tt>myauthproto=chap</tt> にすることもできます。
<p>
これで、最初の接続を試す準備ができました。設定が誤っている可能性があるため、
ここでは再試行を制限しておきます:
<pre>
  pppoectl pppoe0 max-auth-failure=1
</pre>
そしてインターフェースをアクティブにします:
<pre>
  ifconfig pppoe0 up
</pre>
何事も起こりません (詳細なデバッグメッセージを有効にはしていないので) 。すべて
順調であれば PPPoE セッションが接続され、そのことは以下のようにして
確認できます:
<pre>
  # pppoectl -d pppoe0
  pppoe0: state = session
          Session ID: 0x254f
          PADI retries: 0
          PADR retries: 0
</pre>
この出力例は動作している設定のものです。 PPPoE セッションが確立して、
それを使用中 (state = session) です。もし出力中に session state がなければ、
認証データが間違っている (上記参照) か、アクセスコンセントレーターが
応答しないかセッションを確立していないかで、この場合は PADI または PADR
再試行が起きるでしょう。これは、 DSL のセットアップがうまくできていないか、
サービス名を指定する (pppoectl で <tt>-s</tt> オプションを使う) 必要があるか、
または、アクセスコンセントレーター名を指定する (pppoectl で <tt>-a</tt>
オプションを使う) 必要があるということです。プロバイダーでは必要な事項を
文書化しているはずです。詳細は pppoectl(8) を参照してください。
<p>
PPPoE セッションが張れると、 PPP の IP ネゴシエーションを確認することが
できるようになります:
<pre>
  # ifconfig pppoe0
  pppoe0: flags=8851<UP,POINTOPOINT,RUNNING,SIMPLEX,MULTICAST> mtu 1492
          inet 117.80.111.85 -> 118.5.113.169 netmask 0xff000000
</pre>
これは、ローカル (118.80.111.85) とリモート (117.5.113.169) の IP アドレスが
割り振られていて (もちろん、実際にはこの例とは異なる IP アドレスになります) 、
動作する接続です。この例のような表示にならない場合、 PPP 認証データが
間違っています。再確認のうえ、 pppoectl の設定を再度おこなうところから
やり直してください。

<ENTRY>permanent-setup 永続的な接続の設定
動作確認は済んだので、マシンが自動で接続を行なうように
設定したくなるでしょう。
<p>
マシンのブート時に自動で接続するためには、
先ほどの手動設定で行なった手順をコード化して、スクリプトや設定ファイル内に
書いておく必要があります。
<p>
プロバイダとの契約が<a href="#stay-connected">均一</a>料金体系ならば、
常時接続にすることになるでしょう。
<p>
接続時間に応じて料金を払うのであれば、<a href="#connect-on-demand">
オンデマンド</a>接続がよいでしょう。

<ENTRY>stay-connected 常時接続回線の設定
この設定の目標は、できるかぎりの間、回線を確保しておくことと、
(なんらかの理由で) 切断された場合はすみやかに再接続することです。
これはデフォルトの操作モードです。
上記の手動のテストで使った認証データを用意して、ファイルに書きます:
<p>
以下の内容を <tt>/etc/ifconfig.pppoe0</tt> ファイルに書きます:
<pre>
create
# PPPoE インターフェースとして使われる物理インターフェースを up する
! /sbin/ifconfig ne0 up
# $int が ne0 をイーサネットインターフェースとして使うようにする
! /sbin/pppoectl -e ne0 $int
# 認証の設定
! /sbin/pppoectl $int myauthproto=pap 'myauthname=XXX' 'myauthsecret=XXX' hisauthproto=none
# PPPoE インターフェース自身の設定。ここで使うアドレスはいずれも、
# 私たちは面倒を見ず、リモート ppp で選ばれたものを意味する
# 特殊なもの。
0.0.0.0 0.0.0.1 up
</pre>
このファイルが root にしか読めないことを確認してください。
<p>
<tt>/etc/ppp/ip-up</tt> に以下の内容を書きます:
<pre>
#! /bin/sh
/sbin/route add default $5
</pre>
このファイルは root が実行可能にしておきます。
<p>
<tt>/etc/ppp/ip-down</tt> に以下の内容を書きます:
<pre>
#! /bin/sh
/sbin/route delete default $5
</pre>
このファイルも root が実行可能にしておきます。
<p>
最後に、次の一行を <tt>/etc/rc.conf</tt> に追加します:
<pre>
ifwatchd=YES
</pre>
<p>
これで完了です。 pppoe0 インターフェースに <tt>link1</tt> フラグがないので
可能な限り接続が確立されたままになり、また、接続が失われた場合は
すみやかに再構築されます。接続できた時はいつも
<tt>/etc/ppp/ip-up</tt> スクリプトが実行され、切れたときはいつも
<tt>/etc/ppp/ip-down</tt> が実行されます。さらに、これらのスクリプトは、
クリーンアップ (例えば、接続が切れたときに古い NAT コネクションを捨て、
再接続時に動的に新しい IP が振られる) や、
再接続したときの情報を必要とするサーバーへの通知
(たとえば、 named のフォワードやキャッシュ) に使うことができます。
<p>
システムが ifwatchd デーモン (これは ip-up と ip-down スクリプトを実行します)
をブートするのは、おそらくかなり遅い時期になることに注意してください。
PPPoE 接続は、ネットワーク起動の初期の、 ifconfig.pppoe0 ファイルが実行される
ころに確立されます。接続はすみやかにされますが、 <tt>/etc/ppp/ip-up</tt>
スクリプトはまだ実行されていません。
ifwatchd(8) 起動時に、常時接続の場合は ip-up スクリプトが実行されます。
多くのネットワークデーモンはこの間に起動されますが、
デフォルトルートがないために外部への接続ができません。
これらのデーモンを ip-up スクリプトでキックするのはよい考えです
(そして、動的 IP アドレスを使った場合にこれらのデーモンの引き起こす問題の
ほとんどにも注意を払ってください) 。典型的な例としては、すべての NAT
コネクションを捨て、 named と ntpd を再起動するものです:
<pre>
#! /bin/sh
/sbin/route add default $5
/etc/rc.d/ntpd restart
/etc/rc.d/named restart
</pre>

<ENTRY>connect-on-demand オンデマンド接続回線の設定
この接続設定では、トラフィックが生じたときのみ PPPoE 接続を確立します。
あらかじめ設定したアイドル時間が経過すると自動的に接続を切ります。
<p>
常時接続との主な違いは以下のとおりです
<ul>
<li>pppoe0 インターフェースに <tt>link1</tt> フラグがある
<li>idle timeout  (以下の例では 60 秒) により、トラフィックがないまま
一定時間経過すると接続を切断する
<li>ルーティングの設定。たとえ接続が確立されていない間であっても、
ルートパケットを pppoe0 インターフェースに向けておく必要があります。
</ul>
<p>
以下の内容を <tt>/etc/ifconfig.pppoe0</tt> に書きます:
<pre>
create
# PPPoE インターフェースとして使われる物理インターフェースを up する
! /sbin/ifconfig ne0 up
# $int が ne0 をイーサネットインターフェースとして使うようにする
! /sbin/pppoectl -e ne0 $int
# 認証の設定
! /sbin/pppoectl $int idle-timeout=60 myauthproto=pap 'myauthname=XXX' 'myauthsecret=XXX' hisauthproto=none
# PPPoE インターフェース自身の設定。ここで使うアドレスはいずれも、
# 私たちは面倒を見ず、リモート ppp で選ばれたものを意味する
# 特殊なもの。
0.0.0.0 0.0.0.1 link1 up
! /sbin/route add default -iface 0.0.0.1
</pre>
<p>
この設定では、デフォルトルートは上記設定ファイルによるものが常に使われるので
ifwatchd を使う必要はありません。 IP アドレスの変更や接続の切断や再構築を
知る必要がある場合は、 ifwatchd を設定して <tt>/etc/ppp/ip-up</tt> と
</tt>/etc/ppp/ip-down</tt> を使うようにすることもできます。
例は、<a href="#stay-connected">常時接続</a>の場合を
参照してください (ただし、デフォルトルートを変えてはいけません) 。

<ENTRY>clamping MSS の調節を伴う NAT の設定
誤設定された防火壁の向こうにあるシステムは Path-MTU-Discovery を使おうと
しますが、その防火壁があらゆる ICMP メッセージをブロックしてしまいます。
これは不正な設定ですが、珍しいことではありません。通常、このような
(遠隔で、あなたの管理下にない) 状況をあなたが修正することはできません。
しかも、時にはこういったリモートシステムを利用 (そこからデータをダウンロード
したり、オンラインバンキングするなど) する必要があります。
<p>
上記の説明のように特に配慮されたシステム群以外では、大きなデータ塊を PPPoE
経由で接続しているシステムに送ることはできないでしょう。しかし、回避策
(いんちきとも言うかも) があります: 最初の TCP ハンドシェークにおいて、
小さいサイズの MSS (maximum segment size) オプションを送って、
大きなパケットを扱えないように見せかけるのです。
<p>
PPPoE 接続されたあなたのマシン側からのコネクションについては、 sysctl 変数
net.inet.tcp.mss_ifmtu を 1 に設定します。
つまり、

<PRE>
# Obey interface MTUs when calculating MSS
net.inet.tcp.mss_ifmtu=1
</PRE>

を /etc/sysctl.conf に追加します。 PPPoE ルーターの向こうのシステム側からの
コネクションについては、以下の /etc/ipnat.conf の例のようにして、 NAT ルールに
mssclamp オプションを設定する必要があります:

<PRE>
map pppoe0 192.168.1.0/24 -> 0/32 portmap tcp/udp 44000:49999 mssclamp 1452
map pppoe0 192.168.1.0/24 -> 0/32 mssclamp 1452
</PRE>

NAT を使わないのであれば、単に MSS 調節をするために 1:1 の NAT ルールの
設定が必要です:

<PRE>
map pppoe0 x.x.x.x/24 -> 0/0 mssclamp 1452
</PRE>

<b>注意:</b>
(上で例示したような) 1452 バイトの MSS が理論的には適切な値
(これは、小さめの PPPoE MTU 、 TCP ヘッダーと、最大 0x40 バイトの
TCP オプションからなります) ですが、これでも場合によっては不十分のようです。
他の PPPoE の実装では MSS を 1412 バイトに収めるよう薦めていますし、
ある状況下ではこれが実際に役立つとの報告を私たちは受けています。
したがって、妙な問題がある場合 (特定のサイトへのセッションが途切れるなど)
は、このより小さい値を使って問題が解消するかどうか試してみてください。

</LIST>

<H2><a name="t-online-usernames">t-online ユーザー向け傍注</a></H2>
従来 ISDN で t-online に接続していたユーザーは、 T-DSL でのユーザー名が
ISDN でのものとは異なることに注意してください。 DSL でのユーザー名は
末尾に <tt>@t-online.de</tt> を追加したものになるため、
<tt>000XXXXXXXXXYYYYYYYYYYYY#0001@t-online.de</tt> という形になります
(<tt>#</tt> は省けるとの説があり、また <tt>0001</tt> はあなたのサブユーザー番号です) 。
<hr>

<DOCLINK>

<hr>
<address>
  <small>
  (連絡先 - <a href="../../../Misc/feedback.html">英語</a>,
       <a href="mailto:www@JP.NetBSD.ORG">日本語:
       www@JP.NetBSD.ORG</a>)<br>
  $NetBSD: index.list,v 1.9 2002/07/15 22:01:21 wiz Exp $<br>
  <a href="../../../Misc/disclaimer.html">Copyright &copy; 1994-2001
  The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
  </small>
</address>

</body>
</html>
