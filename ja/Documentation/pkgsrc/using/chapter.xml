<!-- $NetBSD: chapter.xml,v 1.3 2003/05/24 04:24:41 grant Exp $ -->

<chapter id="using"> <?dbhtml filename="using.html"?>
<title>Using The NetBSD package system</title>

<sect1 id="getting started">
<title>Working with precompiled binary packages</title>
<para>
This section describes how to find, retrieve and install a precompiled
binary package that someone else already prepared for your type of machine.
</para>

<sect2>
<title>How to get packages</title>
<para>
Precompiled packages are stored on ftp.NetBSD.org and its mirrors in the
directory <filename>/pub/NetBSD/packages</filename> for anonymous FTP access.
Please pick the right
subdirectory there as indicated by <command>uname -p</command>. In that
directory, there is a subdirectory for each category plus a subdirectory
<filename>All</filename> which includes
the actual binaries in .tgz files. The category subdirectories use symbolic
links to those files (this is the same directory layout as in
<filename>/usr/pkgsrc/packages</filename>).
</para>

<para>
This same directory layout applies for CDROM distributions, only that the
directory may be rooted somewhere else, probably somewhere below
<filename>/cdrom</filename>. Please consult your CDROMs documentation for
the exact location.
</para>
</sect2>

<sect2>
<title>How to use</title>
<para>
If you have the files on a CDROM or downloaded them to your hard disk, you
can install them with the following command (be sure to
<command>su</command> to root first):
</para>

<programlisting># pkg_add /path/to/package.tgz</programlisting>

<para>
If you have FTP access and you don't want to download the packages via FTP
prior to installation, you can do this automatically by giving
<command>pkg_add</command> an FTP URL:
</para>

<programlisting># pkg_add ftp://ftp.NetBSD.org/pub/NetBSD/packages/&lt;OS Ver&gt;/&lt;arch&gt;/All/package.tgz</programlisting>

<para>
If there is any doubt, the uname utility can be used to determine the
&lt;OS Ver&gt;, and &lt;arch&gt; by running <command>uname -rp</command>.
</para>

<para>
Also note that any prerequisite packages needed to run the package in
question will be installed, too, assuming they are present where you install
from.
</para>

<para>
After you've installed packages, be sure to have
<filename>/usr/pkg/bin</filename> in your <varname>PATH</varname>
so you can actually start the just installed program.
</para>
</sect2>

<sect2>
<title>A word of warning</title>
<para>
Please pay very careful attention to the warnings expressed in that manual
page about the inherent dangers of installing binary packages which you did
not create yourself, and the security holes that can be introduced onto
your system by indiscriminate adding of such files.
</para>
</sect2>

</sect1>

<sect1>
<title>Building packages from source</title>
<para>
This assumes that the package is already part of the NetBSD package system.
If it is not, then you are advised to read part II of this document,
"Package Constructor's Guide".
</para>

<sect2>
<title>Requirements</title>
<para>
To build packages from source on a NetBSD system the
<quote>comp</quote> and the <quote>text</quote>
distribution sets must be installed. If you want to build X11 related
packages the <quote>xbase</quote> and <quote>xcomp</quote> distribution
sets are required, too.
</para>

<sect3>
<title>Where to get pkgsrc</title>
<para>
There are three ways to get pkgsrc. Either as a tar file, via SUP, or
via CVS. All three ways are described here.
</para>

<para>
To get the package source going, you need to get the pkgsrc.tar.gz file
from <ulink
url="ftp://ftp.NetBSD.org/pub/NetBSD-current/tar_files/pkgsrc.tar.gz">ftp.NetBSD.org</ulink> and unpack it into <filename>/usr/pkgsrc</filename>.
</para>

<para>
As an alternative, you can get pkgsrc via the Software Update Protocol,
SUP. To do so, make sure your supfile has a line
<quote>release=pkgsrc</quote> in it, see the examples in
<filename>/usr/share/examples/supfiles</filename>, and that the
directory <filename>/usr/pkgsrc</filename> does exist. Then, simply run
<command>sup -v /path/to/your/supfile</command>.
</para>

<para>
To get pkgsrc via CVS, make sure you have cvs installed. If not present on
your system, it can be found as precompiled binary on ftp.NetBSD.org. 
To do an initial (full) checkout of pkgsrc, do the following steps:
</para>

<programlisting>% setenv CVSROOT anoncvs@anoncvs.NetBSD.org:/cvsroot
% setenv CVS_RSH ssh 
% cd /usr
% cvs checkout -P pkgsrc</programlisting>

<para>
This will create the <filename>pkgsrc</filename> directory in your
<filename>/usr</filename>, and all the package source will be stored
under <filename>/usr/pkgsrc</filename>.  To update pkgsrc
after the initial checkout, make sure you have
<varname>CVS_RSH</varname> set as above, then do:
</para>

<programlisting>% cd /usr/pkgsrc
% cvs -q update -dP</programlisting>

<para>
Please also note that it is possible to have multiple copies of the
pkgsrc hierarchy in use at any one time - all work is done relatively
within the pkgsrc tree.
</para>
</sect3>

<sect3>
<title>Fetching distfiles</title>
<para>
There is one gotcha: The distribution file (i.e. the unmodified source)
must exist on your system for the packages system to be able to build it.
If it does not, then <command>ftp</command> is used to fetch the
distribution files automatically.
</para>

<para>
You can overwrite some of the major distribution sites to fit to sites
that are close to your own.  Have a look at
<filename>pkgsrc/mk/bsd.pkg.defaults.mk</filename> to find some examples
- in particular, look for the <varname>MASTER_SORT</varname>,
<varname>MASTER_SORT_REGEX</varname> and
<varname>INET_COUNTRY</varname> definitions.  This may save some of your
bandwidth and time.
</para>

<para>
You can change these settings either in your shell's environment, or,
if you want to keep the settings, by editing the
<filename>/etc/mk.conf</filename> file,
and adding the definitions there.
</para>

<para>
If you don't have a permanent Internet connection and you want to know
which files to download, <command>make fetch-list</command> will tell you
what you'll need. Put these distfiles into
<filename>/usr/pkgsrc/distfiles</filename>.
</para>
</sect3>

<sect3>
<title>How to build and install</title>
<para>
Assuming that the distfile has been fetched (see previous section), become
root and change into the relevant directory. Then you can type

<programlisting>% make</programlisting>
</para>

<para>
at the shell prompt to build the various components of the package, and

<programlisting># make install</programlisting>
</para>

<para>
at the shell prompt to install the various components into the correct
places on your system.
</para>

<para>
Taking the top system utility as an example, we can install it on our
system by building as shown in <xref linkend="logs"/>.
</para>

<para>
The program is installed under the default root of the packages tree -
<filename>/usr/pkg</filename>. Should this not conform to your tastes,
simply set the <varname>LOCALBASE</varname>
variable in your environment, and it will use that value as the root of
your packages tree. So, to use <filename>/usr/local</filename>, set

<programlisting>LOCALBASE=	/usr/local</programlisting>
</para>

<para>
in your environment.  Please note that you should use a root which is 
dedicated to packages and not shared with other programs (ie, do not try
and use <varname>LOCALBASE=/usr</varname>).  Also, you should not try to
add any of your own files or directories (such as, for example, src, obj,
or pkgsrc) below the <varname>LOCALBASE</varname> tree.  This is to
prevent possible conflicts between programs and other files installed by
the package system and whatever else may have been installed there.
</para>

<para>
There is, of course, one exception to this - X11 packages are traditionally
installed in the X11 tree. The definition used to identify the root of the
X11 tree is the <varname>X11BASE</varname> definition.
</para>

<para>
It is possible to install X11 packages in the
<varname>LOCALBASE</varname> tree, for which you must install the
<pkg>pkgtools/xpkgwedge</pkg> package - see <xref
linkend="build.prefix"/> for further details.
</para>

<para>
Some packages look in <filename>/etc/mk.conf</filename> to alter some
configuration options at build time.  Have a look at
<filename>pkgsrc/mk/bsd.pkg.defaults.mk</filename> to
get an overview of what will be set there by default.  Environment
variables such as <varname>LOCALBASE</varname>, and
<varname>X11BASE</varname> can be set in <filename>/etc/mk.conf</filename> to
save having to remember to set them each time you want to use pkgsrc.
</para>

<para>
Occasionally, people want to <quote>look under the covers</quote> to see
what is going on when a package is building or being installed. This may be
for debugging purposes, or out of simple curiosity. A number of utility
values have been added to help with this.
</para>

<para>
(1) If you invoke the make(1) command with PKG_DEBUG_LEVEL=2, then a
huge amount of information will be displayed.  As a worked example,
</para>

<programlisting>% make patch PKG_DEBUG_LEVEL=2</programlisting>

<para>
will show all the commands that are invoked, up to and including the
<quote>patch</quote> stage.
</para>

<para>
(2) If you want to know the value of a certain make(1) definition, then
the <varname>VARNAME</varname> definition should be used, in conjunction
with the show-var target. e.g.
</para>

<programlisting>% make show-var VARNAME=DISTFILES</programlisting>

<para>
will show the expansion of the make(1) variable
<varname>DISTFILES</varname>.
</para>

<para>
If you want to de-install and re-install a binary package that you've
created (see next section), that you put into pkgsrc/packages manually or
that's located on a remote FTP server, you can use the the "bin-install"
target. This target will install a binary package - if available - via
pkg_add, and do a <command>make package</command> else. The list of remote
FTP sites searched is kept in the variable
<varname>BINPKG_SITE</varname>, which defaults to
ftp.NetBSD.org. Any flags that should be added to pkg_add(8) can be put
into <varname>BIN_INSTALL_FLAGS</varname>. See <filename>pkgsrc/mk/bsd.pkg.defaults.mk</filename> for more details.
</para>

<para>
A final word of warning: If you setup a system that has a non-standard
setting for <varname>LOCALBASE</varname> (or
<varname>X11BASE</varname>, for that matter), be sure to set that
before any packages are installed, as you can not use several directories
for the same purpose. Doing so will result in pkgsrc not being able to
properly detect your installed packages, and fail miserably. Note also that
precompiled binary packages are usually built with the default
<varname>LOCALBASE</varname> of
<filename>/usr/pkg</filename>, and that you should <emphasis>not</emphasis>
install any if you use a non-standard <varname>LOCALBASE</varname>.
</para>

</sect3>
</sect2>
</sect1>

</chapter>
