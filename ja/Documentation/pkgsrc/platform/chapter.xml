<!-- $NetBSD: chapter.xml,v 1.2 2003/05/24 04:24:41 grant Exp $ -->

<chapter id="platforms"> <?dbhtml filename="platforms.html"?>
<title>Using pkgsrc on non-NetBSD systems</title>

<sect1>
<title>Bootstrapping pkgsrc</title>
<para>
For Operating Systems other than NetBSD, we provide a bootstrap kit to
build the required tools to use pkgsrc on your platform. As well as
native NetBSD support, pkgsrc and the bootstrap kit have support for
the following operating systems:
</para>

<itemizedlist>
<listitem>Darwin (MacOS X)</listitem>
<listitem>FreeBSD</listitem>
<listitem>IRIX</listitem>
<listitem>Linux</listitem>
<listitem>OpenBSD</listitem>
<listitem>Solaris</listitem>
</itemizedlist>

<para>
Support for other platforms is under development.
</para>

<para>
Installing the bootstrap kit should be as simple as:
</para>

<programlisting>cvs checkout othersrc/bootstrap-pkgsrc
cd othersrc/bootstrap-pkgsrc
./bootstrap</programlisting>

<para>
This will use the defaults of <filename>/usr/pkg</filename> for the
<emphasis>prefix</emphasis>
and <filename>/var/db/pkg</filename> for the package database directory.  However, these
can also be set using command-line parameters.
</para>

<para>
Binary packages for the pkgsrc tools and an initial set of packages is
available for supported platforms. An up-to-date list of these can be
found on <ulink url="../../software/packages.html">www.pkgsrc.org</ulink>.
</para>

</sect1>

<sect1>
<title>Platform specific notes</title>
<para>
Here are some platform-specific notes you should be aware of.
</para>

<sect2>
<title>Darwin</title>
<para>
Darwin 5.x and 6.x are supported.
</para>

<para>
Terse instructions:
</para>

<programlisting># ./ufsdiskimage create ~/Documents/NetBSD 512  # megabytes - season to taste
# ./ufsdiskimage mount ~/Documents/NetBSD
# sudo chown `id -u`:`id -g` /Volumes/NetBSD
# ftp \
  ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/pkgsrc.tar.gz
# tar -C /Volumes/NetBSD -zxvf pkgsrc.tar.gz &amp;&amp; rm pkgsrc.tar.gz
# sudo ./bootstrap \
  --pkgdir=/Volumes/NetBSD/pkg \
  --pkgdbdir=/Volumes/NetBSD/pkgdb \
  --pkgsrcdir=/Volumes/NetBSD/pkgsrc
</programlisting>

<para>
Note: if you already have a UFS partition, or have a spare partition[*]
that you can format as UFS, use that instead of the UFS disk image.
It'll be somewhat faster and will mount automatically at boot time.
</para>

<para>
(Why can't you just use the HFS+ filesystem you've already got?
Because pkgsrc currently requires the underlying filesystem to be
case-sensitive, and HFS+ isn't.)
</para>

<para>
[*] - If the partition you want to convert to UFS from HFS+ under
Mac OS X is on the boot disk, then the disk tools won't do anything
with it.  See "README.MacOSX".
</para>
</sect2>

<sect2>
<title>FreeBSD</title>
<para>
FreeBSD 4.7 and 5.0 have been tested and are supported, other versions
may work.
</para>

<para>
Care should be taken so that the tools that this kit installs do not conflict
with the FreeBSD userland tools. There are several steps:
</para>

<orderedlist>
<listitem>
<para>
FreeBSD stores its ports pkg database in
<filename>/var/db/pkg</filename>. It is therefore
recommended that you choose a different location (e.g.
<filename>/usr/pkgdb</filename>) by
using the --pkgdbdir option to the bootstrap script.
</para>
</listitem>

<listitem>
<para>
If you do not intend to use the FreeBSD ports tools, it's probably a
good idea to move them out of the way to avoid confusion, e.g.:
</para>

<programlisting>cd /usr/sbin
mv pkg_add pkg_add.orig
mv pkg_create pkg_create.orig
mv pkg_delete pkg_delete.orig
mv pkg_info pkg_info.orig</programlisting>
</listitem>

<listitem>
<para>
An example mk.conf file will be placed in
<filename>mk.conf.example</filename> file
when you use the bootstrap script.
</para>
</listitem>
</orderedlist>

</sect2>

<sect2>
<title>IRIX</title>
<para>
IRIX 6.5 is tested and supported, other versions may work.
</para>

<para>
You will need a working C compiler, either gcc or SGI's MIPS
and MIPSpro compiler (cc/c89).  Please set the <varname>CC</varname>
environment variable according to your preference.
</para>

<para>
Please make sure that you have no conflicting
<varname>CFLAGS</varname> in your environment or the
<filename>/etc/mk.conf</filename>.  Particularly, make sure that you do
not try to link n32 object files with lib64 or vice versa.  Check your
<filename>/etc/compiler.defaults</filename>!
</para>

</sect2>

<sect2>
<title>Linux</title>
<para>
... XXX
</para>
</sect2>

<sect2>
<title>OpenBSD</title>
<para>
OpenBSD 3.0 and 3.2 are tested and supported.
</para>

<para>
Care should be taken so that the tools that this kit installs do not conflict
with the OpenBSD userland tools. There are several steps:
</para>

<orderedlist>
<listitem>
<para>
OpenBSD stores its ports pkg database in
<filename>/var/db/pkg</filename>. It is therefore
recommended that you choose a different location (e.g.
<filename>/usr/pkgdb</filename>) by
using the --pkgdbdir option to the bootstrap script.
</para>
</listitem>

<listitem>
<para>
If you do not intend to use the OpenBSD ports tools, it's probably a
good idea to move them out of the way to avoid confusion, e.g.:
</para>

<programlisting>cd /usr/sbin
mv pkg_add pkg_add.orig
mv pkg_create pkg_create.orig
mv pkg_delete pkg_delete.orig
mv pkg_info pkg_info.orig</programlisting>
</listitem>

<listitem>
<para>
3. An example mk.conf file will be placed in
<filename>mk.conf.example</filename> file
when you use the bootstrap script. OpenBSD's make program uses
<filename>/etc/mk.conf</filename>
as well. You can work around this by enclosing all the pkgsrc specific parts 
of the file with:
</para>

<programlisting>.ifdef BSD_PKG_MK
# pkgsrc stuff, e.g. insert bsd.pkg.defaults.mk or similar here
.else
# OpenBSD stuff
.endif</programlisting>
</listitem>
</orderedlist>

</sect2>

<sect2>
<title>Solaris</title>
<para>
Solaris 2.6 through 9 are supported. You will need a working C
compiler. Both gcc 2.95.3 and Sun WorkShop 5 have been tested.
</para>

<para>
The following packages are required on Solaris 8 for the bootstrap
process and to build packages.
</para>

<itemizedlist>
<listitem>SUNWsprot</listitem>
<listitem>SUNWarc</listitem>
<listitem>SUNWbtool</listitem>
<listitem>SUNWtoo</listitem>
<listitem>SUNWlibm</listitem>
</itemizedlist>

<para>
Please note the use of GNU binutils on Solaris is
<emphasis>not</emphasis> supported.
</para>

<sect3>
<title>If you are using gcc</title>
<para>
It makes life much simpler if you only use the same gcc consistently
for building all packages.
</para>

<para>
It is recommended that an external gcc be used only for bootstrapping,
then either build gcc from <pkg>lang/gcc</pkg> or install a binary gcc
package, then remove gcc used during bootstrapping.
</para>
</sect3>

<sect3>
<title>If you are using Sun WorkShop</title>
<para>
You will need at least the following packages installed (from WorkShop
5.0)
</para>

<itemizedlist>
<listitem>SPROcc - Sun WorkShop Compiler C 5.0</listitem>
<listitem>SPROcpl - Sun WorkShop Compiler C++ 5.0</listitem>
<listitem>SPROild - Sun WorkShop Incremental Linker</listitem>
<listitem>SPROlang - Sun WorkShop Compilers common components</listitem>
</itemizedlist>

<para>
You should set CC and CXX in <filename>/etc/mk.conf</filename>, eg.
</para>

<programlisting>
CC=	cc
CXX=	CC
</programlisting>

<para>
You may also want to build 64-bit binaries, eg.
</para>

<programlisting>
CFLAGS=	-xtarget=ultra -xarch=v9
</programlisting>
</sect3>

<para>
Whichever compiler you use, please ensure the compiler tools and
your $prefix are in your PATH. This includes
<filename>/usr/ccs/{bin,lib}</filename>
and eg. <filename>/usr/pkg/{bin,sbin}</filename>.
</para>
</sect2>
</sect1>

</chapter>
