<!-- $NetBSD: chapter.xml,v 1.3 2003/06/19 13:31:50 grant Exp $ -->

<chapter id="submit"> <?dbhtml filename="submit.html"?>
<title>Submitting and Committing</title>

<sect1>
<title>Submitting your packages</title>
<para>
You have to separate between binary and <quote>normal</quote> (source)
packages here:
</para>

<itemizedlist>
<listitem>
<para>precompiled binary packages</para>
<para>
  Our policy is that we accept binaries only from NetBSD developers to
  guarantee that the packages don't contain any trojan horses etc. 
  This is not to piss anyone off but rather to protect our users!
  You're still free to put up your home-made binary packages and tell
  the world where to get them. 
</para>
</listitem>

<listitem>
<para>packages</para>
<para>
  First, check that your package is complete, compiles and runs well;
  see <xref linkend="debug"/> and the rest of this document. Next,
  generate a gzipped
  tar-file of all the files needed for the package, preferably with all
  files in a single directory. Place this tar-file to a place where the
  package maintainers can fetch it using FTP or HTTP (WWW). Finally,
  <command>send-pr</command> with category <quote>pkg</quote>, a
  synopsis which includes the package name and version number, a short
  description of your package (contents of the <varname>COMMENT</varname>
  variable are OK) and the URL of your tar-file.
</para>

<para>
  You will be notified if your PR has been addressed so you can remove
  the tar-file. 
</para>

<para>
  If you want to submit several packages, please send a separate PR for
  each one, it's easier for us to track things that way.
</para>
</listitem>
</itemizedlist>

</sect1>

<sect1>
<title>Committing: Importing a package into CVS</title>
<para>
  This section is only of interest for NetBSD developers with write
  access to the NetBSD pkgsrc repository. Please remember that cvs
  imports files relative to the cwd, and that the pathname that you
  give the <command>cvs import</command> command is so that it knows where
  to place the files in the repository.  Newly created packages should be
  imported with a vendor tag of <quote>TNF</quote> and a release tag of
  <quote>pkgsrc-base</quote>, e.g:
</para>

<screen><![CDATA[% cd .../pkgsrc/<category>/<pkgname>
% cvs import pkgsrc/<category>/<pkgname> TNF pkgsrc-base]]></screen>

<para>
  Remember to move the directory from which you imported out of
  the way, or cvs will complain the next time you <quote>cvs
  update</quote> your source tree.  Also don't forget to add the new
  package to the category's <filename>Makefile</filename>.
</para>

<para>
  The commit message of the initial import should include part of the
  <filename>DESCR</filename> file, so people reading the mailing lists know
  what the package is/does.
</para>

<para>
  Please note all package updates/additions in
  <filename>pkgsrc/doc/CHANGES</filename>. It's very
  important to keep this file up to date and conforming to the existing
  format, because it will be used by scripts to automatically update pages on
  <ulink url="http://www.NetBSD.org/">www.NetBSD.org</ulink> and other sites.
</para>

<para>
  For new packages, <quote>cvs import</quote> is preferred to <quote>cvs
  add</quote> because the former gets everything with a single command,
  and provides a consistent tag.
</para>

</sect1>

<sect1>
<title>Updating a Package to a Newer Version</title>
<para>
  Please always put a concise, appropriate and relevant summary of the
  changes between old and new versions into the commit log when updating
  a package. There are various reasons for this:
</para>

<itemizedlist>
<listitem>
<para>
  A URL is volatile, and can change over time. It may go away completely 
  or its information may be overwritten by newer information.
</para>
</listitem>

<listitem>
<para>
  Having the change information between old and new versions in our CVS
  repository is very useful for people who use either cvs or anoncvs.
</para>
</listitem>

<listitem>
<para>
  Having the change information between old and new versions in our CVS
  repository is very useful for people who read the pkgsrc-changes mailing
  list, so that they can make tactical decisions about when to upgrade
  the package.
</para>
</listitem>
</itemizedlist>

<para>
  Please also recognise that, just because a new version of a package
  has been released, it should not automatically be upgraded in the CVS
  repository.  We prefer to be conservative in the packages that are
  included in pkgsrc - development or beta packages are not really the
  best thing for most places in which pkgsrc is used. Please use your
  judgement about what should go into pkgsrc, and bear in mind that
  stability is to be preferred above new and possibly untested features.
</para>

</sect1>

<sect1>
<title>Moving a Package in pkgsrc</title>

<orderedlist>
<listitem>Make a copy of the directory somewhere else.</listitem>

<listitem><para>Remove all CVS dirs.</para>
<para>
  Alternatively to the first two steps you can also do:
</para>
<screen>% cvs -d user@cvs.NetBSD.org:/cvsroot export -D today pkgsrc/category/package</screen>
<para>
  and use that for further work.
</para>
</listitem>

<listitem>Fix <varname>CATEGORIES</varname> and any
<varname>DEPENDS</varname> paths that just did <quote>../package</quote>
instead of <quote>../../category/package</quote>.
</listitem>

<listitem><command>cvs import</command> the modified package in the new
place.</listitem>

<listitem><para>Check if any package depends on it:</para>
<screen>% cd /usr/pkgsrc
% grep /package */*/Makefile* */*/buildlink*</screen>
</listitem>

<listitem>Fix paths in packages from step 5 to point to new location.</listitem>

<listitem><command>cvs rm (-f)</command> the package at the old location.</listitem>

<listitem>Remove from <filename>oldcategory/Makefile</filename>.</listitem>

<listitem>Add to <filename>newcategory/Makefile</filename>.</listitem>

<listitem><para>Commit the changed and removed files:</para>
<screen>% cvs commit oldcategory/package oldcategory/Makefile newcategory/Makefile</screen>
<para>
  (and any packages from step 5, of course).
</para>
</listitem>
</orderedlist>

</sect1>

</chapter>
