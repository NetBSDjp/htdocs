<!-- $NetBSD: chapter.xml,v 1.1 2003/04/07 15:39:41 grant Exp $ -->
<!-- based on english translation: -->
<!-- NetBSD: chapter.xml,v 1.1 2003/04/07 15:39:41 grant Exp   -->

<chapter id="fixes"> <?dbhtml filename="fixes.html"?>
<title>パッケージコンポーネント - ファイル、ディレクトリー、およびコンテンツ</title>
<para>
パッケージを用意する際にはいつも、以下のセクションで述べられている多くのファ
イルが存在します。
</para>

<sect1>
<title>Makefile</title>
<para>
構築、インストールおよびバイナリー・パッケージの作成は、すべてパッケージの
<filename>Makefile</filename>によりコントロールされます。
</para>

<para>
それぞれのパッケージのためのMakefileがあります。このファイルは、パッケージ
のコンパイルとインストールのために必要なすべての定義とアクションがセットさ
れた標準の<filename>bsd.pkg.mk</filename>ファイル(<filename>../../mk/bsd.pkg.mk</filename>)をインクルードします。必
須となるフィールドは、インターネットのサイトからダウンロードされる配布ファ
イルのベース名を指定する<varname>DISTNAME</varname>と、そのサイトを指定する<varname>MASTER_SITES</varname>、パッ
ケージが置かれるカテゴリーを意味する<varname>CATEGORIES</varname>、パッケージの名前である
<varname>PKGNAME</varname>と、メンテナー名である<varname>MAINTAINER</varname>と、パッケージの一行説明(パッケージ
名は自動的に追加されるので、含めないでください) からなる<varname>COMMENT</varname>変数です。
maintainer変数は、そのパッケージを維持する人による(いつも完全に正しい)決定
にへりくつを言う誰かが、活発に苦情を言うことができるようにするためです。
</para>

<para>
<varname>MASTER_SITES</varname>は、定義済みのサイトの一つをセットすることもできます。
</para>

<programlisting>${MASTER_SITE_XCONTRIB}
${MASTER_SITE_GNU}
${MASTER_SITE_PERL_CPAN}
${MASTER_SITE_TEX_CTAN}
${MASTER_SITE_SUNSITE}
${MASTER_SITE_GNOME}
${MASTER_SITE_SOURCEFORGE}</programlisting>

<para>
もしこれらの予め定義されたサイトの1つを選んだ場合、そのサイトのサブディレク
トリーを指定する方法が必要となるかもしれません。これらのマクロは複数の実際
のサイトに展開されるかもしれませんので、サブディレクトリーを指定する場合は、
以下の表記を使わなければなりません:
</para>

<programlisting>${MASTER_SITE_GNU:=subdirectory/name/}</programlisting>

<para>
(サブディレクトリー名の後のスラッシュ/に注意してください)廃止された
MASTER_SITE_SUBDIRを使用しても動作しません。
</para>

<para>
パッケージに複数のDISTFILESまたは複数のPATCHFILESがあって、それらの配布元サ
イトが異なる場合は、SITES_fooを、ファイル"foo"があるURIを列挙したものに設定
します。"foo"にはサフィックスを含めます。たとえば以下のようにします。
</para>

<programlisting>DISTFILES=	${DISTNAME}${EXTRACT_SUFX}
DISTFILES+=	foo-file.tar.gz
SITES_foo-file.tar.gz=http://www.somewhere.com/somehow/ \
	http://www.somewhereelse.com/mirror/somehow/</programlisting>

<para>
なお、通常おこなうような、DISTFILESへのファイルの(置換ではなく)追加をする場
合は、標準的なDISTFILESのデフォルト設定を明示的におこなわなければなりません。
</para>

<para>
現在CATEGORIESの値として以下が使用できます。もし複数にまたがる場合、それら
の値はスペースで分けられる必要があります:
</para>

<programlisting>archivers  audio      benchmarks   biology       cad     
chat       comms      converters   cross         databases
devel      editors    emulators    finance       fonts
games      graphics   ham          japanese      lang
mail       math       mbone        misc          net
news       parallel   print        security      shells
sysutils   textproc   time         wm            www
x11</programlisting>

<para>
全ての利用できるオプション、および変数の記述に関しては、NetBSD packages(7)
マニュアルページを参照してください。 XXX
</para>

<para>
以下の事柄に気を配ってください。:
</para>

<itemizedlist>
<listitem>
<para>
もしパッケージによりマニュアルページが圧縮され
た形式でインストールされる場合、MANCOMPRESSEDを追加してください。
bsd.pkg.mkのコメントを参照。
</para>
</listitem>
<listitem>
<para>
すべてのファイルの<filename>/usr/local</filename>を${PREFIX}に変更してください。(後述のパッチ
を参照)
</para>
</listitem>
<listitem>
<para>
もし、パッケージがinfoファイルをインストールするのであれば、この文書の
`infoファイルが附属するパッケージ'節を参照してください。 XXX # link
</para>
</listitem>
<listitem>
<para>
もしあなたが将来の更新のために、そのパッケージをメンテナンスするつもりで
あれば、MAINTAINERにあなたのメールアドレスをセットしてください。標準では
MAINTAINERは<email>packages@netbsd.org</email>にセットします。
</para>
</listitem>
<listitem>
<para>
もし問題のソフトウェアにホームページが存在するのであれば、MAINTAINERの後
ろにHOMEPAGEを追加してください。HOMEPAGEの値はホームページのURLにしてく
ださい。
</para>
</listitem>
<listitem>
<para>
パッケージの短い説明をCOMMENT変数に設定してください。
</para>
</listitem>
</itemizedlist>

</sect1>

<sect1>
<title>distinfo</title>
<para>
最も重要で必須な、パッケージのコンパイルに必要なすべてのdistfileのメッセー
ジダイジェストあるいはチェックサムです。作者が配布した元のファイルに対して、
このメッセージダイジェストが一致することを確認しています。これをもとに、イ
ンターネットから取得したdistfileが転送中にファイルが壊れたり、悪意によりセ
キュリティーホールを入れられたファイルに変更されていたりしていないことを確
認します。これは<command>make makesum</command>により生成するのが最善です。ダイジェストアル
ゴリズムには md5 が使われていましたが、これはsha1に比べて弱いため、現在は
sha1がデフォルトのアルゴリズムになっています。また、distfileの容量も生成さ
れ、新しいdistinfoファイルに格納されます。<pkg>pkgtools/digest</pkg>ユーティリ
ティーは、distinfoファイル用のダイジェストをすべて計算してくれますし、さま
ざまなアルゴリズムにも対応しています。現在、以下のアルゴリズムに対応してい
ます:
</para>

<para>
	md5, rmd160, sha1, sha256, sha384, sha512
</para>

<para>
パッケージによっては、アーキテクチャー毎にdistfileの組が異なるものがありま
す(<pkg>www/navigator</pkg>がよい例です)。この情報は単一のdistinfoファイルに
書かれるので、このようなパッケージの更新時には、distfileの情報が失われない
ように注意を払ってください。
</para>

<para>
<filename>patches/</filename>ディレクトリー(セクション4.3参照)に入っている、公式なすべてのパッチ
のメッセージダイジェスト/チェックサムも、このdistinfoファイルに格納されます。
これは、パッチ中のNetBSD RCS Idを除いたすべての行のメッセージダイジェスト/
チェックサムです。このファイルは<command>make makepatchsum</command>コマンドにより生成するこ
とができます。
</para>
</sect1>

<sect1>
<title>patches/*</title>
<para>
このディレクトリーは、patch(1)コマンドが使用するファイルを含んでい
ます。このファイルは、配布ファイルのソースをNetBSD上で完全にコンパイルして
実行できるように変更するためのものです。これらのファイルは、アルファベット
順(シェルによる"patches/patch-*"展開順)で適用されます。つまりpatch-aaは
patch-abより前に適用されます。
</para>

<para>
問題を避けるため、patch-??ファイルは<command>diff -bu</command>フォーマットとし、かつ、曖昧
さなしで適用できるようにします。(曖昧さがあっても強制的にパッチを適用させる
ため、PATCH_FUZZ_FACTOR=-F2を設定することができます)。なお、将来の変更が難
しくなってしまうので、一つのパッチファイルに、複数のファイルへの変更を入れ
るのは止めてください。
</para>

<para>
同様に、一つのファイルへのパッチあては最大一回とし、複数のパッチを使って複
数回パッチをあててはいけません。もしファイルに複数のパッチが必要なら、それ
は一つのファイルにまとめておきます。
</para>

<para>
一つ重要なこととして、NetBSD CVSツリーにチェックインした後に問題を引き起こ
すので、パッチファイルにRCS IDを含ませないように注意してください。これを避
けるためには、diffに"-U 2"または"-U 1"オプションのどちらかを使ってください。
あるいは<pkg>pkgtools/pkgdiff</pkg>にある<command>pkgdiff</command>コマンドを使ってください。
</para>

<para>
この 2 段落で述べた問題に気を使いたくない場合は、<pkg>pkgtools/pkgdiff</pkg>パッ
ケージの<command>pkgdiff</command>を使ってください。これはすべてのRCS Idをよきにはからってくれ
ます。
</para>

<para>
さらに自動化するため、同パッケージのmkpatchesを使ってパッチ一式を作ることを
おすすめします。あなたがやらねばならないことは、ファイルの編集前に<command>cp -p filename
filename.orig</command>のようにするか、あるいはさらに簡単に、同パッケージの
<command>pkgvi</command>を使って、元のファイルを<filename>filename.orig</filename>の名前でバックアップしておくだ
けです。この方法でパッケージをアップグレードした場合、patchdiffを使って、新
しいパッチと既存のパッチを簡単に比較することができます。
</para>

<para>
パッケージを作り終えたとき、忘れずに<command>make makepatchsum</command>コマンドでパッチファ
イルのチェックサムを生成するようにしてください。セクション4.2を参照してくだ
さい。 XXX
</para>

<para>
置いておきたいパッチがあるがpkgsrcにcommitすべきものではない場合、それを
pkgsrcツリーの外の$LOCALPATCHESディレクトリーに置いておくことができます。こ
のディレクトリーツリーはpkgsrcと同様の"category/package"の構造を持つように
し、パッチを各パッケージのディレクトリー(すなわち$LOCALPATCHES/$PKGPATH)に
置くようになっています。たとえば、pkgsrc/graphics/pngに私的なパッチを適用す
るようにしたい場合は、そのパッチを$LOCALPATCHES/graphics/png/mypatchに置き
ます。このディレクトリーにあるファイルはすべてパッチファイルとして扱われ、
pkgsrcの「標準の」パッチが適用された後に、このパッチが適用されます。
</para>
</sect1>

<sect1>
<title>その他の必須のファイル</title>

<itemizedlist>
<listitem>
<para>DESCR</para>
<para>
   ソフトウェアについての複数行の説明。このファイルには適切なクレジットを含
   めておいてください。他人があなたのユーモアのセンス(あるいは変わった綴り)
   を理解してくれない事、そしてここに書かれたものすべてを他人が読むであろう
   という事を念頭においておいてください。
</para>
</listitem>

<listitem>
<para>PLIST</para>
<para>
   このファイルは、システムにインストールされるファイルを管理します:すべて
   のバイナリー、マニュアルページ、その他。ディレクトリーの作成、削除、イン
   サートされた(inserted)ファイルの位置を管理するための、他のディレクティブ
   もこのファイルに記述されます。
</para>
</listitem>
</itemizedlist>

</sect1>

<sect1>
<title>オプション・ファイル</title>

<itemizedlist>
<listitem>
<para>INSTALL</para>
<para>
   このシェル・スクリプトはpkg_add実行中に二度起動されます。最初は、パッケー
   ジが展開された後、ファイルが移動される前に、二度目はインストールするファ
   イルが移動された後。このファイルは、PLIST内の@execコマンドでは不可能な特
   別な処理のために使うことができます。より詳細な情報はpkg_add(1)と
   pkg_create(1)を参照してください。
</para>
</listitem>

<listitem>
<para>DEINSTALL</para>
<para>
   このスクリプトは、ファイルが削除される前後に実行されます。このスクリプト
   の責任は、パッケージのインストレーションにかかわる雑多なものをきれいにす
   ることです。なぜなら、pkg_deleteは、オリジナルのディストリビューションで
   作成されたファイルをどのように削除するかをすべて知っておかなければならな
   いからです。より詳細な情報はpkg_add(1)とpkg_create(1)を参照してください。
</para>
</listitem>

<listitem>
<para>MESSAGE</para>
<para>
   パッケージのインストール後にこのファイルの内容が表示されます。
   完全にフリーでないソフトウェアについての法的な通知等に役立ちます。
   パッケージのMakefileでMESSAGE_SUBSTを使うことで、変数を簡単に変えられる
   ことに注意してください:
</para>
   
<programlisting>MESSAGE_SUBST+=  SOMEVAR="somevalue"</programlisting>
	
<para>
   とすると、MESSAGE中の "${SOMEVAR}" は、メッセージ表示前に"somevalue"に置換されます。
</para>
</listitem>
</itemizedlist>

</sect1>

<sect1>
<title>work*</title>
<para>
<command>make</command>とタイプした時に、配布ファイルがこのディレクトリーに展開されます。
シェル・プロンプトで、以下のようにタイプすれば、これらを削除することができ
ます。
</para>

<screen># make clean</screen>

<para>
また、このディレクトリーはさまざまなタイムスタンプ・ファイルを作っておくた
めにも使用されます。
</para>
</sect1>

<sect1>
<title>files/*</title>
<para>
また、もしあなたがコンフィギュレーションまたは構築するより前に、パッケージ
中に何かファイルを置きたいならば、それらのファイルをfilesディレクトリーに置
くことができますし、pre-configureターゲットで、${CP}コマンドによりコピーす
ることができます。あるいは、<filename>/dev/null</filename>に対するそのファイルの単純なdiffをとり、
パッチメカニズムを使用して、そのファイルを生成することもできます。
</para>
</sect1>

<sect1>
<title>パッケージの移植性</title>
<para>
pkgsrc の目玉の一つは、多くのプラットフォームで動作することです。
そのため、pkgsrc のパッケージの移植性をできるかぎり高めることが重要になります。
There are some 
</para>

<sect2>
<title>${INSTALL}, ${INSTALL_DATA_DIR}, ...</title>
<para>
一部のプラットフォームに附属する BSD 互換の <filename>install</filename> は、
一度に複数の操作をおこなうことができません。
このため、 ${INSTALL} などを使うときは、以下のようにします。
</para>

<programlisting>${INSTALL_DATA_DIR} ${PREFIX}/dir1
${INSTALL_DATA_DIR} ${PREFIX}/dir2</programlisting>
</sect2>

<sect2>
XXX more portability stuff
XXX USE_PKGLOCALEDIR
XXX ???
</sect2>

</sect1>

</chapter>
