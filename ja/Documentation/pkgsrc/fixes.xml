<!-- $NetBSD: fixes.xml,v 1.4 2004/09/29 13:08:36 hubertf Exp $ -->

<chapter id="fixes"> <?dbhtml filename="fixes.html"?>
  <title>Notes on fixes for packages</title>

  <sect1>
    <title>CPP defines</title>
  
    <para>
      To port an application to NetBSD, it's usually necessary for the
      compiler to be able to judge the system on which it's compiling, and
      we use definitions so that the C pre-processor can do this.
    </para>

    <para>
      To test whether you are working on a 4.4 BSD-derived system, you
      should use the BSD definition, which is defined in
      <filename>&lt;sys/param.h&gt;</filename> on said systems.
    </para>

    <programlisting><![CDATA[#include <sys/param.h>]]></programlisting>

    <para>and then you can surround the BSD-specific parts of your
      package's C/C++ code using this conditional:</para>

    <programlisting><![CDATA[#if (defined(BSD) && BSD >= 199306)
  ...
#endif]]></programlisting>

    <para>Please use the <quote>__NetBSD__</quote> definition sparingly - it
      should only apply to features of &os; that are not present in other
      4.4-lite derived BSDs.</para>
</sect1>      

  <sect1 id="fixes.libtool">
    <title>Shared libraries - libtool</title>

    <para>pkgsrc supports many different machines, with different object formats
      like a.out and ELF, and varying abilities to do shared library and
      dynamic loading at all. To accompany this, varying commands and options
      have to be passed to the compiler, linker, etc. to get the Right Thing,
      which can be pretty annoying especially if you don't have all the
      machines at your hand to test things.  The <pkg>devel/libtool</pkg> pkg
      can help here, as it just <quote>knows</quote> how to build both static
      and dynamic libraries from a set of source files, thus being platform
      independent.</para>

    <para>Here's how to use libtool in a pkg in seven simple steps:</para>

    <orderedlist>
      <listitem>
	<para>Add <varname>USE_LIBTOOL=yes</varname> to the package Makefile.</para>
      </listitem>

      <listitem>
	<para>For library objects, use <quote>${LIBTOOL} --mode=compile
	    ${CC}</quote> in place of <quote>${CC}</quote>. You could even
	  add it to the definition of <varname>CC</varname>, if only
	  libraries are being built in a given Makefile. This one command
	  will build both PIC and non-PIC library objects, so you need not
	  have separate shared and non-shared library rules.</para>
      </listitem>

      <listitem>
	<para>For the linking of the library, remove any <quote>ar</quote>,
	  <quote>ranlib</quote>, and <quote>ld -Bshareable</quote> commands,
	  and instead use:</para>

	<programlisting>${LIBTOOL} --mode=link ${CC} -o ${.TARGET:.a=.la} ${OBJS:.o=.lo} -rpath ${PREFIX}/lib -version-info major:minor</programlisting>

	<para>Note that the library is changed to have a <filename>.la</filename>
	  extension, and the objects are changed to have a
	  <filename>.lo</filename> extension. Change <varname>OBJS</varname>
	  as necessary. This automatically creates all of the
	  <filename>.a</filename>, <filename>.so.major.minor</filename>,
	  and ELF symlinks (if necessary) in the build directory. Be sure
	  to include <quote>-version-info</quote>, especially when major
	  and minor are zero, as libtool will otherwise strip off the
	  shared library version.</para>

	<para> From the libtool manual:</para>

	<programlisting>
   So, libtool library versions are described by three integers:

CURRENT
     The most recent interface number that this library implements.

REVISION
     The implementation number of the CURRENT interface.

AGE
     The difference between the newest and oldest interfaces that this
     library implements.  In other words, the library implements all the
     interface numbers in the range from number `CURRENT - AGE' to
     `CURRENT'.
     
   If two libraries have identical CURRENT and AGE numbers, then the
dynamic linker chooses the library with the greater REVISION number. </programlisting>

	<para>The <quote>-release</quote> option will produce different results for
	  a.out and ELF (excluding symlinks) in only one case. An ELF library of
	  the form
	  <quote>libfoo-release.so.<emphasis>x</emphasis>.<emphasis>y</emphasis></quote>
	  will have a symlink of
	  <quote>libfoo.so.<emphasis>x</emphasis>.<emphasis>y</emphasis></quote>
	  on an a.out platform. This is handled automatically.</para>

	<para>The <quote>-rpath argument</quote> is the install directory of the
	  library being built.</para>

	<para>In the <filename>PLIST</filename>, include all of the
	  <filename>.a</filename>, <filename>.la</filename>, and
	  <filename>.so</filename>,
	  <filename>.so.<replaceable>major</replaceable></filename> and
	  <filename>.so.<replaceable>major</replaceable>.<replaceable>minor</replaceable></filename>
	  files.</para>
      </listitem>

      <listitem>
	<para>When linking shared object (<filename>.so</filename>) files,
	  i.e. files that are loaded via dlopen(3), NOT shared libraries,
	  use <quote>-module -avoid-version</quote> to prevent them
	  getting version tacked on.</para>

	<para>The <filename>PLIST</filename> file gets the <filename>foo.so</filename>
	  entry.</para>
      </listitem>

      <listitem>
	<para>When linking programs that depend on these libraries
	  <emphasis>before</emphasis> they are installed, preface the
	  &man.cc.1; or &man.ld.1; line with
	  <quote>${LIBTOOL} --mode=link</quote>, and
	  it will find the correct libraries (static or shared), but
	  please be aware that libtool will not allow you to specify
	  a relative path in -L (such as <quote>-L../somelib</quote>),
	  because it expects you to change that argument to be the
	  <filename>.la</filename> file. e.g.</para>

	<programlisting>${LIBTOOL} --mode=link ${CC} -o someprog -L../somelib -lsomelib</programlisting>

	<para>should be changed to:</para>

	<programlisting>${LIBTOOL} --mode=link ${CC} -o <replaceable>someprog</replaceable> <replaceable>../somelib/somelib.la</replaceable></programlisting>

	<para>and it will do the right thing with the libraries.</para>
      </listitem>

      <listitem>
	<para>When installing libraries, preface the &man.install.1;
	  or &man.cp.1; command with
	  <quote>${LIBTOOL} --mode=install</quote>, and change the library
	  name to <filename>.la</filename>. e.g.</para>

	<programlisting>${LIBTOOL} --mode=install ${BSD_INSTALL_DATA} ${SOMELIB:.a=.la} ${PREFIX}/lib</programlisting>

	<para>This will install the static <filename>.a</filename>, shared
	  library, any needed symlinks, and run &man.ldconfig.8;.</para>
      </listitem>

      <listitem>
        <para> In your <filename>PLIST</filename>, include all of the
	  <filename>.a</filename>, <filename>.la</filename>, and
	  <filename>.so</filename>, <filename>.so.CURRENT</filename>
	  and <filename>.so.CURRENT.REVISION</filename> files 
	  (this is a change from the previous behaviour). </para>	  
      </listitem>
      
    </orderedlist>
  </sect1>

  <sect1>
    <title>Using libtool on GNU packages that already support libtool</title>

    <para>Add <varname>USE_LIBTOOL=yes</varname> to the
      package Makefile. This will override the package's own libtool
      in most cases.  For older libtool using packages,  libtool is
      made by ltconfig script during the do-configure step; you can
      check the libtool script location by doing <command>make
      configure; find work*/ -name libtool</command>. </para>

    <para> <varname>LIBTOOL_OVERRIDE</varname> specifies which libtool
      scripts, relative to <varname>WRKSRC</varname>, to override.  By
      default, it is set to <quote>libtool */libtool
      */*/libtool</quote>.  If this does not match the location of the
      package's libtool script(s), set it as appropriate. </para>

    <para> If you do not need <filename>*.a</filename> static
      libraries built and installed, then use
      <varname>SHLIBTOOL_OVERRIDE</varname> instead. </para>

    <para>If your package makes use of the platform independent library
      for loading dynamic shared objects, that comes with libtool
      (libltdl), you should include the libtool buildlink3.mk (and
      set <varname>USE_BUILDLINK3=YES</varname>).</para>

    <para>Some packages use libtool incorrectly so that the package may not work or
      build in some circumstances. Some of the more common errors are:</para>

    <itemizedlist>
      <listitem>
	<para>The inclusion of a shared object (-module) as a dependent library in an
	  executable or library. This in itself isn't a problem if one of two things
	  has been done:</para>

	<orderedlist>
	  <listitem>
	    <para>The shared object is named correctly, i.e.
	      <filename>libfoo.la</filename>, not
	      <filename>foo.la</filename></para>
	  </listitem>

	  <listitem>
	    <para>The -dlopen option is used when linking an executable.</para>
	  </listitem>
	</orderedlist>
      </listitem>

      <listitem>
	<para>The use of libltdl without the correct calls to initialisation routines.
	  The function lt_dlinit() should be called and the macro
	  <varname>LTDL_SET_PRELOADED_SYMBOLS</varname> included in
	  executables.</para> 
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>GNU Autoconf/Automake</title>

    <para>If a package needs GNU autoconf or automake to be executed
      to regenerate the configure script and Makefile.in makefile
      templates, then they should be executed in a pre-configure
      target. Two Makefile fragments are provided in
      <filename>pkgsrc/mk/autoconf.mk</filename> and
      <filename>pkgsrc/mk/automake.mk</filename> to help
      dealing with these tools. See comments in these files for
      details.</para>

      <para> For packages that need only autoconf: </para>

      <programlisting>AUTOCONF_REQD=	2.50	# if default version is not good enough
...

pre-configure:
	cd ${WRKSRC}; ${AUTOCONF}

...
.include "../../mk/autoconf.mk"</programlisting>

      <para> and for packages that need automake and autoconf: </para> 

<programlisting>AUTOMAKE_REQD=	1.7.1	# if default version is not good enough
...

pre-configure:
	cd ${WRKSRC};						\
	${ACLOCAL};						\
	${AUTOHEADER};						\
	${AUTOMAKE} -a --foreign -i;				\
	${AUTOCONF}

...
.include "../mk/automake.mk"</programlisting>

      <para> Packages which use GNU Automake will almost certainly
        require GNU Make, but that's automatically provided for you in
        <filename>mk/automake.mk</filename>. </para> 

      <para> There are times when the configure process makes
        additional  changes to the generated files, which then causes
        the build  process to try to re-execute the automake sequence.
        This is  prevented by touching various files in the configure
        stage. If  this causes problems with your package you can set
        <varname>AUTOMAKE_OVERRIDE=NO</varname> in the package
        Makefile. </para>
  </sect1>

  <sect1>
    <title>Package configuration files</title>
    
    <para> Packages should be taught to look for their configuration
      files in <varname>${PKG_SYSCONFDIR}</varname>, which is passed
      through to the configure and build processes.
      <varname>PKG_SYSCONFDIR</varname> may be customized in various
      ways by setting other make variables: </para>

    <itemizedlist>
      <listitem>
        <para> <varname>PKG_SYSCONFBASE</varname> is the main config
          directory   under which all package configuration files are
          to be found.  This defaults to
          <filename>${PREFIX}/etc</filename>, but may  be overridden
          in <filename>/etc/mk.conf</filename>.</para> 
      </listitem>

      <listitem>
        <para>  <varname>PKG_SYSCONFSUBDIR</varname> is the subdirectory of
	  <varname>PKG_SYSCONFBASE</varname> under which the
	  configuration files for a particular package may be found, e.g.
	  the Apache configuration files may all be found under the
	  <filename>httpd/</filename> subdirectory of
	  <varname>${PKG_SYSCONFBASE}</varname>. This should be set in
	  the package Makefile.
	  </para>
      </listitem>

      <listitem>     
        <para> By default,
	  <varname>PKG_SYSCONFDIR</varname> is set to
          <varname>${PKG_SYSCONFBASE}/${PKG_SYSCONFSUBDIR}</varname>, 
	  but this may be overridden by setting
	  <varname>PKG_SYSCONFDIR.${PKG_SYSCONFVAR}</varname> for a
	  particular package, where <varname>PKG_SYSCONFVAR</varname>
	  defaults to <varname>${PKGBASE}</varname>. This is not meant to
	  be set by a package Makefile, but is reserved for users who wish
	  to override the <varname>PKG_SYSCONFDIR</varname> setting for
	  a particular package with a special location.
	  </para>
	</listitem>
      </itemizedlist>

      <para> The only variables that users should customize are
        <varname>PKG_SYSCONFBASE</varname> and  <varname>PKG_SYSCONFDIR.${PKG_SYSCONFVAR}</varname>.
	Users will typically want to set
	<varname>PKG_SYSCONFBASE</varname> to
	<filename>/etc</filename>, or to accept the default location
	of <filename>${PREFIX}/etc</filename>. </para>
  </sect1>

  <sect1>
    <title>User Interaction</title>

    <para>Occasionally, packages require interaction from the user, and this can be
      in a number of ways:</para>

    <itemizedlist>
      <listitem>
	<para>help in fetching the distfiles</para>
      </listitem>

      <listitem>
	<para>help to configure the package before it is built</para>
      </listitem>

      <listitem>
	<para>help during the build process</para>
      </listitem>

      <listitem>
	<para>help during the installation of a package</para>
      </listitem>
    </itemizedlist>

    <para>The <varname>INTERACTIVE_STAGE</varname> definition is provided to notify
      the pkgsrc mechanism of an interactive stage which will be needed, and
      this should be set in the package's <filename>Makefile</filename>. e.g.</para>

    <programlisting>INTERACTIVE_STAGE= build</programlisting>

    <para>Multiple interactive stages can be specified:</para>

    <programlisting>INTERACTIVE_STAGE= configure install</programlisting>
  </sect1>

  <sect1>
    <title>Portability of packages</title>

    <para>One appealing feature of pkgsrc is that it runs on many different
      platforms. As a result, it is important to ensure, where possible,
      that packages in pkgsrc are portable. There are some particular
      details you should pay attention to while working on pkgsrc.</para>

    <sect2>
      <title>${INSTALL}, ${INSTALL_DATA_DIR}, ...</title>

      <para>The BSD-compatible <command>install</command> supplied with some
	operating systems will not perform more than one operation at a time.
	As such, you should call <quote>${INSTALL}</quote>, etc. like this:</para>

	<programlisting>${INSTALL_DATA_DIR} ${PREFIX}/dir1
${INSTALL_DATA_DIR} ${PREFIX}/dir2</programlisting>
    </sect2>

<!--
    <sect2>
XXX more portability stuff
XXX USE_PKGLOCALEDIR
XXX ???
    </sect2>
-->
  </sect1>  
  
  <sect1>
    <title>Feedback to the author</title>
    
    <para> If you have found any bugs in the package you make available,
      if you had to do special steps to make it run under NetBSD or
      if you enhanced the software in various other ways, be sure
      to report these changes back to the original author of the
      program! With that kind of support, the next release of the
      program can incorporate these fixes, and people not using the
      NetBSD packages system can win from your efforts. </para>

    <para> Support the idea of free software! </para>
  </sect1>
</chapter>
