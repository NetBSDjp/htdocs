<!-- $NetBSD: chapter.xml,v 1.12 2003/07/16 02:18:10 jschauma Exp $ -->
<!-- Based on english version: -->
<!-- NetBSD: chapter.xml,v 1.12 2003/07/16 02:18:10 jschauma Exp   -->

<chapter id="binary"> <?dbhtml filename="binary.html"?>
<title>バイナリーパッケージを作る</title>

<sect1>
<title>単数のバイナリーパッケージを構築する</title>
<para> 
  パッケージを構築しインストールしたら、
  pkg_add(1) を使って別のシステムにインストールすることができる<emphasis>バイナリーパッ
  ケージ</emphasis>を作ることができます。
  こうすると、複数のホストで同じパッケージを構築するような、
  CPU時間の無駄をなくすことができます。
  また、あなたのバイナリーパッケージを配布して、
  他の人が簡単にインストールできるようにすることもできます。
</para>

<para>
  バイナリーパッケージを作るには、以下のようにします。
</para>

<screen><prompt>#</prompt> <userinput>cd sysutils/top</userinput>
<prompt>#</prompt> <userinput>make package</userinput></screen>

<para>
  これにより、パッケージが構築、インストール(もし、まだ済んでいなけれ
  ば)され、インストールされたパッケージからバイナリーパッケージが構築
  されます。これは<command>pkg_*</command>ツールを使い操作できます。
  バイナリーパッケージは<filename>/usr/pkgsrc/packages</filename>
  以下に、gzipまたはbzip2されたtarファイルとして作成されます。
  上記の<pkg>sysutils/top</pkg>の例の続きは、<xref linkend="logs.package"/>を参照して下さい。
</para>

<para>
  このようなバイナリーパッケージを提出する方法については、このドキュメント
  の後の<xref linkend="submit"/>を参照してください。
</para>
</sect1>

<sect1>
<title>バイナリーパッケージ作成用の設定</title>
<para>
  <xref linkend="build.helpful-targets"/>を参照してください。
</para>
</sect1>

<sect1>
<title>全パッケージをバルクビルドする</title>
<para>
  この章では、コンパイル済みバイナリーパッケージを全部揃えたい人のために、そ
  の方法を説明します。バルクビルドを行うと、その時点でシステムにインストール
  されているパッケージをすべて削除しますので注意してください! バルクビルドを
  行うマシンかその近くのNFSサーバーをFTPサーバーに設定することで、構築したパッ
  ケージをみんなが使えるようにできます。さらなる情報はftpd(8)をご覧ください。
  リモートNFSサーバーのストレージを使っている場合、実際のコンパイルがNFSスト
  レージ上で行われると非常に遅くなるので、そうなっていないことを確認してくだ
  さい。
</para>

<sect2>
<title id="binary.configuration">設定</title>

<sect3 id="binary.mk.conf">
<title>/etc/mk.conf</title>
<para>
  <filename>/etc/mk.conf</filename>で以下の設定をするとよいでしょう。デフォルト設定についての詳細
  は<filename>pkgsrc/mk/bsd.pkg.defaults.mk</filename>を見てください。
  <varname>ACCEPTABLE_LICENSES</varname>はローカルポリシーに適合するようにしておきます。
  この例では <varname>_ACCEPTABLE=yes</varname> としており、
  <emphasis>あらゆる</emphasis>ライセンスを受け入れます。
</para>

<programlisting>PACKAGES?=      ${_PKGSRCDIR}/packages/${MACHINE_ARCH}
WRKOBJDIR?=     /usr/tmp/pkgsrc   # build here instead of in pkgsrc
BSDSRCDIR=      /usr/src
BSDXSRCDIR=     /usr/xsrc         # for x11/xservers
OBJHOSTNAME?=   yes               # use work.`hostname`
FAILOVER_FETCH= yes               # insist on the correct checksum
PKG_DEVELOPER?= yes
_ACCEPTABLE=    yes</programlisting>

<para>
  全体の構築のためにxpkgwedgeを使いたい場合は、以下を加えます:
</para>

<programlisting>BULK_PREREQ+= pkgtools/xpkgwedge</programlisting>

<para>
  構築の振舞を変えるためにバルクビルドの最中にインストールされている必要があ
  るパッケージがこれ以外にあれば、<varname>BULK_PREREQ</varname>変数に追加することができます。た
  だし、<varname>BULK_PREREQ</varname>に設定する意味があるパッケージは、現在のところxpkgwedgeだ
  けです。
</para>
</sect3>

<sect3>
<title>build.conf</title>
<para>
  <filename>pkgsrc/mk/bulk</filename>ディレクトリーの
  <quote>build.conf-example</quote>を<quote>build.conf</quote> にコピー
  し、このファイル中のコメントに従って編集します。このファイルは、構築後に作
  られるログファイルをどこに置くか、構築の報告メールをどこに出すか、pkgsrcの
  場所はどこか、および、どのユーザーにsuして<command>cvs update</command>をおこなうか、を決め
  る設定ファイルです。
</para>
</sect3>

<sect3>
<title>pre-build.local</title>
<para>
  バルクビルドでは、ビルド前の段階の最後に、サイト独自の作業を行なうよう設定
  することができます。<filename>/usr/pkgsrc/mk/bulk</filename>に
  <filename>pre-build.local</filename>ファイルがあると、ビ
  ルド前の段階の最後に、このファイルが(sh(1)スクリプトとして)実行されます。
  <filename>pre-build.local</filename>の使い方の例としては、このファイルに
</para>

<screen><prompt>#</prompt> <userinput>echo "I do not have enough disk space to build this pig." \
    &gt; pkgsrc/games/crafty-book-enormous/$BROKENF</userinput></screen>

<para>
  のような内容を書いておいて、3 Gb近くのディスク容量が必要な個々のパッケージ
  の構築をしないようにする、というものがあります。
</para>
</sect3>
</sect2>

<sect2>
<title>ほか、環境に関する考察</title>
<para>
  <filename>/usr/pkg</filename>はバルクビルド開始時に完全に削除されるので、ログインシェルが別の場
  所にあることを確認してください。ログインシェルを<filename>/usr/local/bin</filename>に移して(それ
  に合わせてパスワードファイルも修正して)おくか、<filename>/etc/rc.local</filename>で<command>pkg_add</command>を使っ
  て(再)インストールするようにしておきます。これでリブート後もログインできま
  す(パッケージが削除されてもシェルのプロセスは死なず、シェルを新たに起動でき
  なくなるだけです)。また、1.5より前のNetBSDを使っていたり、何らかの
  理由でpkgsrc版のsshを使いたい場合は、rc.localでsshdが起動する前にsshをイン
  ストールするようにしておきます:
</para>

<programlisting>( cd /usr/pkgsrc/security/ssh ; make bulk-install )
if [ -f	/usr/pkg/etc/rc.d/sshd ]; then
    /usr/pkg/etc/rc.d/sshd
fi</programlisting>

<para>
  こうしておかないと、バルクビルド終了後や、あるいはマシンがリブートやクラッ
  シュした場合にsshでログインできなくなります。警告しておきましたよ! :)
</para>
</sect2>

<sect2>
<title>操作</title>
<para>
  すでにインストールされているどのパッケージも必要ない状態にしてください。
  <warning>
    バルクビルドの過程で、<emphasis>すべてのパッケージが
    削除されます!</emphasis>
  </warning>
  その他、
  構築の妨げになりうるもの(<filename>/usr/local</filename>にインストールされているライブラリーなど) 
  もすべて削除しておいてください。root になって、以下のようにタイプします:
</para>

<screen><prompt>#</prompt> <userinput>cd /usr/pkgsrc</userinput>
<prompt>#</prompt> <userinput>sh mk/bulk/build</userinput></screen>

<para>
  何らかの理由で前回の構築が完了していない場合(電源断、システムパニックなど)
  は、以下を実行すると、その続きをすることができます:
</para>

<screen><prompt>#</prompt> <userinput>sh mk/bulk/build restart</userinput></screen>

<para>
  バルクビルド実行が終わると、その要約がメールで届きます。また、<filename>build.conf</filename>
  ファイルの<varname>FTP</varname>で指定したディレクトリーに、構築ログがあります。
</para>
</sect2>

<sect2>
<title>何を実行するのか</title>
<para>
  バルクビルドは三つの段階からなります:
</para>

<orderedlist>

<listitem>ビルド前
<para>
  スクリプトがpkgsrcを(anon)cvsで更新します。そして、壊れている
  distfileをすべて一掃し、インストールされているパッケージをすべて削
  除します。
</para>
</listitem>

<listitem>バルクビルド
<para>
  これは基本的に、<quote>make bulk-package</quote>を、パッケージの構築順
  序を最適化しておこなうものです。他のパッケージに依存しないパッケー
  ジが最初に構築され、多くの依存関係を持つパッケージは後に構築されま
  す。
</para>
</listitem>

<listitem>ビルド後
<para>
  報告を作成し、<filename>build.conf</filename>で指定されたディレクトリーに
  <filename>broken.html</filename> という名前で置きます。あわせて、この報告の簡略版が
  構築管理者にメールで送られます。
</para>
</listitem>

</orderedlist>

<para>
  構築中、壊れているパッケージの一覧が<filename>/usr/pkgsrc/.broken</filename>
  (<varname>OBJMACHINE</varname>
  が設定されている場合は
  <filename>.../.broken.${MACHINE}</filename>)
  に作られ、構築が壊れているものの個々の
  構築ログは、各パッケージのディレクトリーに置かれます。これらのファイルは、
  壊れているパッケージを再度構築しようとするような無駄をなくすために、bulk-ター
  ゲットが構築が壊れていることを記録するのに使われます。また、壊れているパッ
  ケージを後でデバッグするためにも使えます。
</para>
</sect2>

<sect2>
<title>必要なディスク容量</title>
<para>
  現在、1.5/i386 ではおおむね以下の容量が必要です:
</para>

<itemizedlist>
<listitem>1500MB - distfile (NFSでも可)</listitem>
<listitem>1000MB - 全バイナリー一式 (NFSでも可)</listitem>
<listitem>1500MB - コンパイル用の一時領域 (ローカルディスクを推奨)</listitem>
</itemizedlist>

<para>
  1.5/alphaでは以下のとおりです:
</para>

<itemizedlist>
<listitem>1300MB - 全バイナリー一式 (NFSでも可)</listitem>
</itemizedlist>

<para>
  各パッケージは、バイナリーパッケージ作成直後にアンインストールされた上、作
  業用ソースも削除されます。このため、莫大なディスク容量は必要ありません。後
  になって、このパッケージがまた必要となった場合は、再度構築することなく
  <quote>pkg_add</quote> でインストールされるので、
  無駄な再コンパイルの繰り返しは発生しません。
</para>
</sect2>

<sect2>
<title>chroot構築用の砂場を用意する</title>
<para>
  バルクビルドによってパッケージを全部消される(マシンがパッケージのコンパイル
  以外に無用なものになってしまう)のが嫌な場合は、chroot環境下でパッケージをバ
  ルクビルドすることもできます。
</para>

<para>
  そうするためには、まず、chrootされた砂場を、たとえば<filename>/usr/sandbox</filename>に用意しま
  す。NetBSDのインストール配布物をすべて展開するか、<filename>/usr/src/etc</filename>で
  <command>make distribution DESTDIR=/usr/sandbox</command>を実行した後、以下のものを用意して
  適切に設定された状態にします。
</para>

<itemizedlist>
<listitem>
カーネル
<para>
<screen><prompt>#</prompt> <userinput>cp /netbsd /usr/sandbox</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/dev/*</filename>
<para>
<screen><prompt>#</prompt> <userinput>cd /usr/sandbox/dev ; sh MAKEDEV all</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/etc/resolv.conf</filename> (<pkg>security/smtpd</pkg>およびメール用):
<para>
<screen><prompt>#</prompt> <userinput>cp /etc/resolv.conf /usr/sandbox/etc</userinput></screen>
</para>
</listitem>

<listitem>
動作する(!)ようなメールの設定 (hostname, sendmail.cf):
<para>
<screen><prompt>#</prompt> <userinput>cp /etc/mail/sendmail.cf /usr/sandbox/etc/mail</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/etc/localtime</filename> (<pkg>security/smtpd</pkg>用):
<para>
<screen><prompt>#</prompt> <userinput>ln -sf /usr/share/zoneinfo/GMT /usr/sandbox/etc/localtime</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/usr/src</filename> (<pkg>sysutils/aperture</pkg>,
<pkg>net/ppp-mppe</pkg>用のシステムソース):
<para>
<screen><prompt>#</prompt> <userinput>ln -s ../disk1/cvs .</userinput>
<prompt>#</prompt> <userinput>ln -s cvs/src-1.6 src</userinput>
<prompt>#</prompt> <userinput>ln -s cvs/pkgsrc .</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/var/db/pkg</filename>を作成する(デフォルトのインストールには含まれません):
<para>
<screen><prompt>#</prompt> <userinput>mkdir /usr/sandbox/var/db/pkg</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/usr/pkg</filename>を作成する(デフォルトのインストールには含まれません):
<para>
<screen><prompt>#</prompt> <userinput>mkdir /usr/sandbox/usr/pkg</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/usr/sandbox/usr/pkgsrc</filename>
内にpkgsrcをチェックアウトする:
<para>
<screen><prompt>#</prompt> <userinput>cd /usr/sandbox/usr</userinput>
<prompt>#</prompt> <userinput>cvs -d anoncvs@anoncvs.NetBSD.org:/cvsroot checkout -d -P pkgsrc</userinput></screen>
</para>
</listitem>

<listitem>
<filename>/etc/mk.conf</filename> を編集する。<xref linkend="binary.mk.conf"/>参照。
</listitem>

<listitem>
<filename>mk/bulk/build.conf</filename>を必要に合わせて調整する
</listitem>

</itemizedlist>

<note>
  Xをインストールするのを忘れないでください。
</note>

<para>
  あなたが開発者で、構築したバイナリーパッケージをftp.NetBSD.orgへアップロー
  ドする場合は、当該アーキテクチャーおよびリリースでのデフォルトのXバージョン
  (NetBSD 1.5.x では XFree86 3.3.6です。 NetBSD 1.6.1 では、 <ulink url="../../Ports/cats/">cats</ulink>,
  <ulink url="../../Ports/i386/">i386</ulink> は XFree86
  4.2.1 、これ以外の各ポートは XFree86 3.3.6 です)を使うようにしてください。
</para>

<para>
  次に必要なものは、(たとえばanoncvsで)<emphasis>チェックアウトした
  ままのpkgsrc</emphasis>です。開発用のpkgsrcツリーをここにマウントしたり、リンク
  したりすると問題が起こりがちなので、そういうことはしてはいけません!
  <filename>.../pkgsrc/packages</filename>および<filename>.../pkgsrc/distfiles</filename>のファイルを公開したい場合は、
  これらのディレクトリーが砂場の外のどこかを指すように調節します。
</para>

<para>
  chroot砂場の用意ができれば、以下の手順で構築を開始できます:
</para>

<screen><prompt>#</prompt> <userinput>cd /usr/sandbox/usr/pkgsrc</userinput>
<prompt>#</prompt> <userinput>sh mk/bulk/do-sandbox-build</userinput></screen>

<para>
  このコマンドは、砂場内に移動して、構築を開始するものです。構築が終わ
  ると、構築の結果がメールで送信されます。できあがったバイナリーパッケージは、
  <filename>/usr/sandbox/usr/pkgsrc/packages</filename> (の指す/マウントされた先/元)に置かれます。
</para>
</sect2>
</sect1>

<sect1>
<title>CD-ROM複数枚に収めたパッケージコレクションの作成</title>
<para>
  pkgsrcのバルクビルド完了後、できあがったバイナリーパッケージからCD-ROMを作っ
  て、他のマシンへのインストール用に使うことができます。
  <pkg>pkgtools/cdpack</pkg>パッケージに、そのようなISO 9660イメージ作成用の簡単
  なツールがあります。<command>cdpack</command>は、依存関係が一枚のCD内で完結するように、パッ
  ケージを複数枚のCD-ROMに編集してくれます。
</para>

<sect2>
<title>cdpackの使用例</title>
<para>
  cdpackの完全なドキュメンテーションはcdpack(1)にあります。以下の短い例では、
  バイナリーパッケージが<filename>/usr/pkgsrc/packages/All</filename>に置いてあり、ISO 9660イメー
  ジ用の十分なディスク容量が<filename>/u2</filename>にあるものとします。
</para>

<screen><prompt>#</prompt> <userinput>mkdir /u2/images</userinput>
<prompt>#</prompt> <userinput>pkg_add /usr/pkgsrc/packages/All/cdpack</userinput>
<prompt>#</prompt> <userinput>cdpack /usr/pkgsrc/packages/All /u2/images</userinput></screen>

<para>
  各CDに共通ファイル(<filename>COPYRIGHT</filename>, <filename>README</filename>, など)を含めたい場合は、そのファイルを
  含むディレクトリーを作る必要があります。たとえば以下のようにします。
</para>

<screen><prompt>#</prompt> <userinput>mkdir /tmp/common</userinput>
<prompt>#</prompt> <userinput>echo "This is a README" &gt; /tmp/common/README</userinput>
<prompt>#</prompt> <userinput>echo "Another file" &gt; /tmp/common/COPYING</userinput>
<prompt>#</prompt> <userinput>mkdir /tmp/common/bin</userinput>
<prompt>#</prompt> <userinput>echo "#!/bin/sh" &gt; /tmp/common/bin/myscript</userinput>
<prompt>#</prompt> <userinput>echo "echo Hello world" &gt;&gt; /tmp/common/bin/myscript</userinput>
<prompt>#</prompt> <userinput>chmod 755 /tmp/common/bin/myscript</userinput></screen>

<para>
  ここで、以下のようにしてイメージを作成します。
</para>

<screen><prompt>#</prompt> <userinput>cdpack -x /tmp/common /usr/pkgsrc/packages/All /u2/images</userinput></screen>

<para>
  こうすると、各イメージのルートディレクトリーに<filename>README</filename>, <filename>COPYING</filename>および
  <filename>bin/myscript</filename>が含まれるようになります。
</para>
</sect2>
</sect1>

</chapter>
