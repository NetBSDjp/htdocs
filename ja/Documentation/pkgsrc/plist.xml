<!-- $NetBSD: plist.xml,v 1.2 2004/09/29 13:08:36 hubertf Exp $ -->

<chapter id="plist">
  <title>PLIST issues</title>

  <para>This section addresses some special issues that one needs to
    pay attention to when dealing with the <filename>PLIST</filename>
    file (or files, see below!).</para>

  <sect1 id="plist.misc">
    <title>Miscellaneous</title>

    <variablelist>
      <varlistentry>
	<term>&os; RCS Id</term>

	<listitem>
	  <para>
	    Be sure to add a RCS ID line as the first thing in any
	    <filename>PLIST</filename> file you write:
	  </para>

	  <para>
	    <programlisting>@comment &#36;NetBSD&#36;</programlisting>
	  </para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>${MACHINE_ARCH}, ${MACHINE_GNU_ARCH}</term>

	<listitem>
	  <para>Some packages like emacs and perl embed information about which
	    architecture they were built on into the pathnames where they install
	    their file. To handle this case, PLIST will be preprocessed before
	    actually used, and the symbol "${MACHINE_ARCH}" will be replaced by
	    what <command>uname -p</command> gives. The same is done if the string
	    ${MACHINE_GNU_ARCH} is embedded in PLIST somewhere - use this on
	    packages that have GNU autoconf created configure scripts.</para>

	  <note>
	    <title>Legacy note</title>

	    <para>There used to be a symbol <quote>$ARCH</quote> that was replaced by
	      the output of <command>uname -m</command>, but that's no longer supported
	      and has been removed.</para>
	  </note>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>${OPSYS}, ${LOWER_OPSYS}, ${OS_VERSION}</term>

	<listitem>
	  <para>Some packages want to embed the OS name and version into some paths.
	    To do this, use these variables in the <filename>PLIST</filename>:
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para><varname>${OPSYS}</varname> - output of <quote><command>uname -s</command></quote></para>
	    </listitem>

	    <listitem>
	      <para><varname>${LOWER_OPSYS}</varname> - lowercase common name (eg. <quote>solaris</quote>)</para>
	    </listitem>

	    <listitem>
	      <para><varname>${OS_VERSION}</varname> - <quote><command>uname -r</command></quote></para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>${PKGLOCALEDIR}</term>

	<listitem>
	  <para>Packages that install locale files should list them in the PLIST as
	    <quote>${PKGLOCALEDIR}/locale/de/LC_MESSAGES/...</quote> instead of
	    <quote>share/locale/de/LC_MESSAGES/...</quote>.  This properly handles
	    the fact that different OS's expect locale files to be either in
	    <filename>share</filename> or <filename>lib</filename> by default.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Manpage-compression</term>

	<listitem>
	  <para>Manpages should be installed in compressed form if
	    <varname>MANZ</varname> is set (in <filename>bsd.own.mk</filename>),
	    and uncompressed otherwise. To handle this in the
	    <filename>PLIST</filename> file, the suffix <quote>.gz</quote> is
	    appended/removed automatically for manpages according to
	    <varname>MANZ</varname> and <varname>MANCOMPRESSED</varname> being set
	    or not, see above for details. This modification of the
	    <filename>PLIST</filename> file is done on a copy of it, not
	    <filename>PLIST</filename> itself.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Platform specific and differing PLISTs</term>

	<listitem>
	  <para>Some packages decide to install a different set of files based on
	    the operating system being used. These differences can be
	    automatically handled by using the following files:</para>

	  <itemizedlist>
	    <listitem>
	      <para><filename>PLIST.common</filename></para>
	    </listitem>

	    <listitem>
	      <para><filename>PLIST.${OPSYS}</filename></para>
	    </listitem>

	    <listitem>
	      <para><filename>PLIST.common_end</filename></para>
	    </listitem>
	  </itemizedlist>

	  <para>If <filename>PLIST.${OPSYS}</filename> exists, these files are used
	    instead of <filename>PLIST</filename>. This allows packages which
	    behave in this way to be handled gracefully.  Manually overriding
	    <varname>PLIST_SRC</varname> for other more exotic uses is also
	    possible.</para>
	</listitem>
      </varlistentry>

      <varlistentry>
	<term>Semi-automatic <filename>PLIST</filename> generation</term>

	<listitem>
	  <para>You can use the <command>make print-PLIST</command> command to output
	    a PLIST that matches any new files since the package was extracted.
	    See <xref linkend="build.helpful-targets"/> for more
	    information on this target.</para> 
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1>
    <title>PLIST_SRC</title>

    <para>To use one or more files as source for the <filename>PLIST</filename> used
      in generating the binary package, set the variable
      <varname>PLIST_SRC</varname> to the names of that file(s).
      The files are later concatenated using cat(1), and order of things is
      important.</para>
  </sect1>

  <sect1>
    <title>PLIST_SUBST</title>

    <para>Similar to <varname>MESSAGE_SUBST</varname> (see <xref
      linkend="components.optional"/>), you can add 
      variables and their expansions to this variable in the following way:</para>

    <programlisting>PLIST_SUBST+=    SOMEVAR="somevalue"</programlisting>

    <para>which replaces all occurrences of <quote>${SOMEVAR}</quote> in the
      <filename>PLIST</filename> with <quote>somevalue</quote>.
      For the values which are replaced by default, please look in
      <filename>bsd.pkg.mk</filename> (and search for
      <emphasis>PLIST_SUBST</emphasis>).</para>
  </sect1>

  <sect1>
    <title>Perl5 modules</title>

    <para>Makefiles of packages providing perl5 modules should include the
      Makefile fragment <filename>../../lang/perl5/module.mk</filename>.  It provides
      a <command>do-configure</command>
      target for the standard perl configuration for such modules as well
      as various hooks to tune this configuration.  See comments in this
      file for details.</para>

    <para>Perl5 modules will install into different places depending on the version
      of perl used during the build process.  To address this, pkgsrc
      will append lines to the <filename>PLIST</filename>
      corresponding to the files
      listed in the installed <filename>.packlist</filename> file generated by most perl5 modules.
      This is invoked by defining <varname>PERL5_PACKLIST</varname> to a
      space-separated list of paths to packlist files, e.g.:</para>

    <programlisting>PERL5_PACKLIST=	${PERL5_SITEARCH}/auto/Pg/.packlist</programlisting>

    <para>The variables <varname>PERL5_SITELIB</varname>,
      <varname>PERL5_SITEARCH</varname>, and <varname>PERL5_ARCHLIB</varname>
      represent the three locations in which perl5 modules may be installed, and
      may be used by perl5 packages that don't have a packlist.  These three
      variables are also substituted for in the <filename>PLIST</filename>.</para>
  </sect1>

</chapter>
