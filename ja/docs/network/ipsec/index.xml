<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE webpage
 PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-docs-network-ipsec-index">
  <config param="desc" value="NetBSD IPsec FAQ"/>
  <config param="cvstag" value="$NetBSD: index.xml,v 1.5 2009/01/15 09:50:23 hubertf Exp $"/>
  <!-- Based on english version: -->
  <!-- NetBSD: index.xml,v 1.5 2009/01/15 09:50:23 hubertf Exp   -->
  <config param="rcsdate" value="$Date: 2009/01/15 09:50:23 $"/>

  <head>
    <!-- Copyright (c) 1994-2006
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->

    <title>NetBSD IPsec FAQ</title>
  </head>

  <para>このページは作成中ですので、
    <ulink url="http://www.NetBSD.org/cgi-bin/feedback.cgi">コメントや提案</ulink>を歓迎します。</para>

  <sect1 role="toc">

    <sect2 id="IPsecFAQ">
      <title>IPsec FAQ</title>

      <sect3 id="getting_started">
	<title>はじめましょう</title>

	<para>IPsec (IP security protocol) は、 NetBSD 配布物の一部として含まれており、
	  IPsecが提供するパケット毎の認証/機密性は、IPsecを使用して通信するpeer間通信を保護します。
	  IPsecは IPv6とIPv4で利用可能です。</para>

	<para>しかしIPsecを使用するには、カーネルの再構成が必要であることに注意して下さい。
	  それはGENERICカーネルでは有効にはなっていません。</para>

	<para>ユーザーランドにはIPsecサポートコードが含まれていますが、
	  IPsecをサポートするカーネルからサポートしていない
	  カーネルに切り替えても、ユーザーランドの再コンパイルは必要ありません。</para>

	<note>
	  <title>注意</title>
	  <para>私たちは、 <quote>IP security</quote> という用語は、 IP ファイアウォール、
	    パケットフィルタリングなどの、より広い概念で用います。</para>
	</note>
      </sect3>

      <sect3 id="ipsec_breakdown">
	<title>IPsec = AH + ESP + IPcomp + IKE</title>

	<para>IPsecは以下に挙げられる別々のプロトコルで成り立っています。</para>

	<itemizedlist>
	  <listitem>Authentication Header (AH): 強い暗号チェックサムをパケットに付加することによってパケットの信頼性を保証します。
	    AHのついたパケットを受け取りチェックサムが正常なら、
	    <emphasis>あなたとpeerが鍵を共有し他の誰もが鍵を知らないなら、</emphasis>
	    2つのことについて確信できるでしょう。
	    <itemizedlist>
	      <listitem>パケットはpeerによって作成され、パケットは偽造されていません。
	      </listitem>

	      <listitem>パケットは転送中に変更されませんでした。
	      </listitem>
	    </itemizedlist>
	    他のプロトコルと異なり、AHは、IPヘッダーからパケットの終わりまで
	    パケット全体をカバーします。
	  </listitem>

	  <listitem>Encapsulating Security Payload (ESP): 暗号化アルゴリズムで暗号化されたパケットの機密性を保証します。
	    ESPでパケットを受け取って、解読に成功したなら
	    パケットが途中で盗聴されていないと確信できるでしょう。
	    <emphasis>あなたとpeerが鍵を共有し、他の誰もが鍵を知らないなら。</emphasis>
	  </listitem>

	  <listitem>IP payload compression (IPcomp): ESPがパケットに暗号化サービスを提供します。
	    しかし、暗号化は(ppp compressionのように)伝走路上の圧縮に打撃的な影響を与える傾向があります。
	    IPcompはESP(IPcompだけを使うことができる)によって暗号化を行う前にパケットを圧縮する方法を提供します。
	  </listitem>

	  <listitem>Internet Key Exchange (IKE): これまで書いたように、AHとESPはpeerと鍵を共有することが必要となります。
	    遠い場所との通信のために、秘密裡に鍵を交渉する方法を提供する必要があります。
	    IKEはそれを可能にします。
	  </listitem>
	</itemizedlist>

	<para>AH、ESP、IPcompはカーネルに実装されています。
	  IKEはユーザーランドでデーモンプロセスとして実装されています。
	  カーネルとユーザーランドは、鍵管理テーブルを通して協調しています。</para>

	<para>IKEはオプションです。AH/ESPのために手作業で鍵を構成することができます。
	  しかし、同じ鍵をずっと使い続けることはできないことを理解して下さい。
	  もし長い間同じ鍵を使うなら、トラフィックが危険にさらされる可能性がますます高くなります。</para>

	<note>
	  <para><emphasis role="bold">IPsecプロトコルのセキュリティーは鍵の機密性如何です。
	    </emphasis>
	    もし鍵が危険にさらされるなら、IPsecプロトコルは安全であり得ません。
	    設定ファイル、鍵データベースファイルのパーミッションあるいは情報漏洩につながるかも知れないさまざまなことに注意して下さい。</para>
	</note>

	<para>ふたつの RFC が出ています: <!--RFC-->RFC1825 による古い IPsec と、
	  <!--RFC-->RFC2401 による新しい IPsec です。
	  NetBSD ではいずれも実装していますが、新しい IPsec を使うよう推奨します。</para>

	<programlisting>

        userland programs               IKE daemon
          ^ | AF_INET{,6} socket          ^ | PF_KEY socket
========= | | =========================== | | ======== Kernel/user boundary
          | v                             | v
        transport layer, TCP/UDP        key management table
          ^ |                             ^ | key information
          | |                             | |
          | v                             | v
        IP input/output logic &lt;-------&gt; AH/ESP/IPcomp logic
          ^ |
          | v
        Network drivers (ethernet)
</programlisting>
      </sect3>

      <sect3 id="trans_tunnel">
	<title>トランスポートモードとトンネルモード</title>

	<para>AH, ESP そして IPcompにはトランスポートモードとトンネルモードの2つの操作モードがあります。
	  トランスポートモードは、通常のピア間の通信を暗号化します。
	  トンネルモードは、パケットを新しいIPv4/6ヘッダーの中にカプセル化します。
	  トンネルモードは、VPNゲートウェイで使用できるように設計されています。</para>

	<programlisting>
[[トランスポートモード]]
my host ======== peer's host
        transport
        mode

packets: [IP: me->peer] ESP payload
                        &lt;---------&gt; encrypted


[[トンネルモード]]
        (a)                  (b)                        (c)
my host ---- my VPN gateway ======== peer's VPN gateway ---- peer's host
                            tunnel mode

packets on (a): [IP: me->peer] payload
packets on (b): [IP: mygw->peergw] ESP [IP: me->peer] payload
                                   &lt;------------------------&gt; encrypted
packets on (c): [IP: me->peer] payload
</programlisting>
      </sect3>

      <sect3 id="policy">
	<title>IPsec<quote>ポリシー</quote>管理</title>

	<para>カーネルはパケットをセキュアーにする方法を知っていますが
	  <emphasis>どのパケット</emphasis>がセキュリティーを必要とするか知りません。
	  我々はどのパケットをセキュアーにするかをカーネルに示す必要があります。
	  IPsec<quote>ポリシー</quote>設定によりそれらを指定します。</para>

	<para>IPsecポリシーは、パケット毎またはソケット型毎に設定できます。</para>

	<itemizedlist>
	  <listitem>パケット毎: パケットフィルターと同じようにカーネルに設定できます。
	    <quote>10.1.1.0/24にメッセージを送っているなら、外向なパケットを暗号化してください</quote>
	    というように指定することができます。
	    これは、IPsecルーターを走らせている時、うまく働きます。
	  </listitem>

	  <listitem>ソケット毎: 特定のソケットに &man.setsockopt.2; を使って設定します。
	    <quote>このソケットから外向なパケットを暗号化してください</quote>のように指定することができます。
	    これは、IPsec-awareサーバープログラムを走らせたい時、うまく働きます。
	  </listitem>
	</itemizedlist>

	<para>IPsecポリシーはパケットに対して使われるプロトコル(AH、ESPまたはIPcomp)を決定します。
	  パケットに対してAH、ESP、IPcompのどの組み合わせを使用するカーネルなのかを構成することができます。
	  ひとつのパケットに対して、多数のESPオペレーションのような、
	  同じプロトコルを複数回にわたって適用することができます。
	  多数のESPオペレーションが役に立つかどうかはわかりません。しかしテスト/デバッグには興味深いのですが。</para>
      </sect3>

      <sect3 id="config_kernel">
	<title>IPsecカーネルの設定</title>

	<para>作成手順の詳細は<ulink url="../../current/"><emphasis>NetBSD-currentの追跡</emphasis></ulink>を参照して下さい。</para>

	<orderedlist>
	  <listitem>カーネル設定ファイルで次の部分を有効にして、新しいカーネルを構築してください。
	    <programlisting>
options IPSEC
options IPSEC_ESP
</programlisting>
	  </listitem>

	  <listitem>新しいカーネルを構築します。
	  </listitem>

	  <listitem>カーネルを置き換えて、そしてリブートしてください。
	  </listitem>
	</orderedlist>

	<para>ユーザーランドのツールはデフォルトで IPsec サポートを含んでおり、
	  また、ユーザーランドの再構築は不要です。</para>

	<para>さらに、 NetBSD 附属の &man.racoon.8; を使ったり、
	  <filename role="pkg">security/isakmpd</filename> をインストールしたりするのもよいかもしれません。</para>
      </sect3>

      <sect3 id="sample_esp">
	<title>設定例: ホスト間の暗号化</title>

	<para>もしマニュアルで設定した鍵でホスト間の暗号化(トランスポートモード)を行うなら、
	  下記の構成で充分です。マニュアルで鍵を設定するために &man.setkey.8; を
	  使用します。</para>

	<programlisting>
#! /bin/sh
#
# packet will look like this: IPv4 ESP payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 esp 9876 -E 3des-cbc "hogehogehogehogehogehoge";
add 20.1.1.1 10.1.1.1 esp 10000 -E 3des-cbc 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef;
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec esp/transport//use;
EOF
</programlisting>

	<para>最初の2つの行は、ESPで使用する鍵を設定しています。
	  4番目の数字は SPI(セキュリティー・パラメーター・インデックス)と呼ばれています。
	  この値はESPパケットに付加され、受信した側でパケットから鍵を見つけるために送られます。
	  この値はノード上でユニークである必要があります。</para>

	<itemizedlist>
	  <listitem>10.1.1.1から20.1.1.1に、鍵<code>hogehogehogehogehogehoge</code>で、
	    3DES-CBCアルゴリズムを使います。
	    トラフィックは SPI値9876によって識別されます。
	  </listitem>

	  <listitem>20.1.1.1から10.1.1.1に、鍵<code>0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef</code>で、
	    3DES-CBCアルゴリズムを使います。
	  </listitem>
	</itemizedlist>

	<para>最終行はノードのパケット毎のIPsecポリシーを設定しています。
	  この設定で、node(10.1.1.1)からpeer(20.1.1.1)に送られるパケットは暗号化されます。鍵はカーネル内部
	  で構成されます。
	  この設定は、20.1.1.1から10.1.1.1に届く暗号化されていないパケットを禁止していません。
	  もし暗号化されていないパケットを拒否したい場合、次の行を追加して下さい。</para>

	<programlisting>
spdadd 20.1.1.1 10.1.1.1 any -P in ipsec esp/transport//require;
</programlisting>

	<para>もう一方の (20.1.1.1) では、次のように設定します。
	  <quote>spdadd</quote> 行のアドレスを入れ換える必要がある一方、
	  <quote>add</quote> 行は入れ換えないことに注意してください。</para>

	<programlisting>
#! /bin/sh
#
# packet will look like this: IPv4 ESP payload
# the node is on 20.1.1.1, peer is on 10.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 esp 9876 -E 3des-cbc "hogehogehogehogehogehoge";
add 20.1.1.1 10.1.1.1 esp 10000 -E 3des-cbc 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef;
spdadd 20.1.1.1 10.1.1.1 any -P out ipsec esp/transport//use;
EOF
</programlisting>

	<para>ポリシー設定の構文は &man.ipsec.set.policy.3; で述べられています。</para>

	<para>回線上の暗号化されたパケットを見るために
	  &man.tcpdump.8; を実行して下さい。
	  パケットは暗号化されます。それらのパケットを盗聴することはできません。</para>

	<para>上記の例は人間が読むことができる鍵を使います。
	  しかしながら、人間が読むことができる鍵の使用がバイナリー鍵より危険であることから、
	  実際のオペレーションでは、バイナリー鍵を使用する方がいいでしょう。</para>

	<para>鍵の長さはアルゴリズムによって決定されます。
	  3des-cbcでは、鍵は 192 ビット(=24バイト)でなければなりません。
	  もしそれより短いまたは長い鍵を指定するなら、 &man.setkey.8; はエラーになるでしょう。</para>

	<para>他のアルゴリズムを使う場合、設定はほとんど同じです。
	  rijndael-cbc (AES としても知られる) を使う場合の例を示します。
	  rijndael-cbc の秘密鍵は、 128、 192、または 256 ビットとなります。
	  ここでは、 128 ビットの鍵を使うことにします。</para>

	<programlisting>
#! /bin/sh
#
# packet will look like this: IPv4 ESP payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
# rijndael-cbc with 128bit key
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 esp 9876 -E rijndael-cbc "hogehogehogehoge";
add 20.1.1.1 10.1.1.1 esp 10000 -E rijndael-cbc 0xdeadbeefdeadbeefdeadbeefdeadbeef;
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec esp/transport//use;
EOF
</programlisting>
      </sect3>

      <sect3 id="sample_ah">
	<title>設定例: ホスト間の認証</title>

	<para>ESPと同じように、AHを設定することができます。</para>

	<programlisting>
#! /bin/sh
#
# packet will look like this: IPv4 AH payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 ah 9877 -A hmac-md5 "hogehogehogehoge";
add 20.1.1.1 10.1.1.1 ah 10001 -A hmac-md5 "mogamogamogamoga";
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec ah/transport//use;
EOF
</programlisting>
      </sect3>

      <sect3 id="sample_both">
	<title>設定例: ホスト間の暗号化+認証</title>

	<para>もしAHとESP双方で鍵を設定した場合、双方とも使うことができます。
	  IPsecのドキュメントでは、AHの後にESPを適用することを推奨しています 。</para>

	<programlisting>
#! /bin/sh
#
# packet will look like this: IPv4 AH ESP payload
# the node is on 10.1.1.1, peer is on 20.1.1.1
setkey -c &lt;&lt;EOF
add 10.1.1.1 20.1.1.1 esp 9876 -E 3des-cbc "hogehogehogehogehogehoge";
add 20.1.1.1 10.1.1.1 esp 10000 -E 3des-cbc 0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef;
add 10.1.1.1 20.1.1.1 ah 9877 -A hmac-md5 "hogehogehogehoge";
add 20.1.1.1 10.1.1.1 ah 10001 -A hmac-md5 "mogamogamogamoga";
spdadd 10.1.1.1 20.1.1.1 any -P out ipsec esp/transport//use ah/transport//use;
EOF
</programlisting>
      </sect3>

      <sect3 id="sample_vpn">
	<title>設定例: IPsec VPN</title>

	<para>まず最初に、いくつかのIPsec VPN設定に関しての注意点があります。</para>

	<itemizedlist>
	  <listitem>ルーティングの設定は的確に行われていなければなりません。
	  </listitem>

	  <listitem>IPsecトンネルデバイスを、同時にNATボックスやフィルタリング防火壁として
	    振る舞うように使おうとしたりしないでください。
	    IPsecとNATは本質的に互換性のないプロトコルです。
	    また、1.5での実装と仕様の制限により、
	    これはうまく動きません。
	    我々はこの状況を改善しようとしているところです。詳細については、
	    <ulink url="#ipf-interaction">"ipfilter との相互の影響"</ulink>
	    を参照してください。
	  </listitem>

	  <listitem>VPNの設定は、それぞれの導入によって異なります。
	    実際、<quote>VPN</quote>の意味するものについての明確な定義はありません。
	    もしもメイリングリストに質問するとしたら、あなたの現在の状況と
	    ネットワークの設定をすべて明らかにする必要があります。
	  </listitem>
	</itemizedlist>

	<para>以下の例は以下のようなネットワークの設定を仮定しています。
	  この例の最終目的は:</para>

	<itemizedlist>
	  <listitem>どうにかして二つのプライベートアドレス空間(10.0.1.0/24および10.0.2.0/24、
	    あなたの会社の東京支社とニューヨーク本社のようなものと考えてください)
	    の中のマシンを接続すること。
	  </listitem>

	  <listitem>二つの空間の間のトラフィックは、
	    ゲートウェイ同士の間で安全にやりとりされる必要がある。
	  </listitem>

	  <listitem>太平洋を横断する専用線の料金を払いたくないため、地元のISP
	    (東京とニューヨーク)と契約し、トラフィックはゲートウェイ間をトンネルする。
	  </listitem>
	</itemizedlist>

	<programlisting>
((( 10.0.1.0/24 )))     東京支店オフィスのVPNネットワーク
  |10.0.1.1
gateway 1
  |20.0.0.1
  |IPsec tunnel
  |20.0.0.2
gateway 2
  |10.0.2.1
((( 10.0.2.0/24 )))     ニューヨーク本社のVPNネットワーク
</programlisting>

	<para>以下のテキストはgateway 1の設定を示します。</para>

	<programlisting>
#! /bin/sh
#
# Note that routing should be set up in advance, i.e. for this example:
#       route -n add -net 10.0.2.0 10.0.2.1
#       route -n add 10.0.2.1 10.0.1.1
# packet will look like this: IPv4 ESP IPv4 payload
# the node is on 10.0.1.1/20.0.0.1, peer is on 10.0.2.1/20.0.0.2
setkey -c &lt;&lt;EOF
add 20.0.0.1 20.0.0.2 esp 13245 -E blowfish-cbc "blowfishtest.001" ;
add 20.0.0.2 20.0.0.1 esp 13246 -E blowfish-cbc 0xdeadbeefdeadbeefdeadbeefdeadbeef;
spdadd 10.0.1.0/24 10.0.2.0/24 any -P out ipsec esp/tunnel/20.0.0.1-20.0.0.2/require ;
spdadd 10.0.2.0/24 10.0.1.0/24 any -P in ipsec esp/tunnel/20.0.0.2-20.0.0.1/require ;
EOF
</programlisting>

	<para>(この項は Per Harald Myrvang の寄贈によるものです)</para>
      </sect3>

      <sect3 id="sample_leaftunnel">
	<title>設定例: 葉ノードトンネル</title>

	<para>トンネルモードは、ある葉ノードからの全トラフィックを次ホップのルーターまで
	  暗号化し、逆にルーターからのトラフィックは平文化する、
	  という状況で使うことができます (たとえば、 802.11 WEP では不十分なので、
	  ワイヤレスノードからルーターまでの間で使うなど) 。</para>

	<para>葉ノードでは、以下のように使います:</para>

	<programlisting>
#! /bin/sh
#
# the node is on 10.0.1.5, router is on 10.0.1.1
setkey -c &lt;&lt;EOF
add 10.0.1.1 10.0.1.5 esp 1011 -E rijndael-cbc "rijndaeltest.001" ;
add 10.0.1.5 10.0.1.1 esp 1012 -E rijndael-cbc 0xdeadbeefdeadbeefdeadbeefdeadbeef;
spdadd 10.0.1.5/32 0.0.0.0/0 any -P out ipsec esp/tunnel/10.0.1.5-10.0.1.1/require;
spdadd 0.0.0.0/0 10.0.1.5/32 any -P in ipsec esp/tunnel/10.0.1.1-10.0.1.5/require;
EOF
</programlisting>

	<para>ルーターでは、 spdadd コマンドの <quote>out</quote> と <quote>in</quote>
	  を逆にします。</para>
      </sect3>

      <sect3 id="config_ike">
	<title>IKEによるAH/ESP鍵の設定</title>

	<para>まずは下記の設定について説明します:</para>

	<itemizedlist>
	  <listitem>ノード A と B はトランスポートモード ESP を使う。
	  </listitem>

	  <listitem>両端では、すべてのプロトコルについてパケット交換に ESP
	    を使う必要がある。
	  </listitem>

	  <listitem>IKE による間は、ノード A と B は、共有された秘密鍵の交換によって、
	    お互いに認証し合う。
	  </listitem>
	</itemizedlist>

	<para>どうか慎重に下記の手順をふんでください。
	  &man.tcpdump.8; を使い、 2 ノード間でどのようにパケットが交換されているか調べます。
	  <quote><code>netstat -sn</code></quote> による統計情報も、
	  カーネルの IPsec 部がどのように動作しているか知るために有用です。</para>

	<orderedlist>
	  <listitem><code>/usr/share/examples/racoon/racoon.conf.sample</code> を
	    <code>/etc/racoon/racoon.conf</code> にコピーします。
	    必要に応じて <code>racoon.conf</code> 中のパラメーターを修正します。
	    両端で同一の設定を使うことが、 *非常に* 重要です -
	    両者の racoon.conf の差異がないようにしなければいけません。
	  </listitem>

	  <listitem> racoon は、 IPsec 鍵の交渉をする際、カーネルの
	    IPsec ポリシーの設定に従います。
	    したがって、 &man.setkey.8; を使い、カーネルの IPsec ポリシーを
	    設定しなければなりません。
	    ノード A での IPsec ポリシーの設定は次のようになります。
	    この例において、 <quote>A</quote> と <quote>B</quote> は IPv4/v6 の数字アドレスです。
	    <programlisting>
A# setkey -c
spdadd A B any -P out ipsec esp/transport//require;
spdadd B A any -P in ipsec esp/transport//require;
^D
</programlisting>
	  </listitem>

	  <listitem>ノード B での &man.setkey.8; を使った IPsec ポリシーの設定は次のようになります:
	    <programlisting>
B# setkey -c
spdadd B A any -P out ipsec esp/transport//require;
spdadd A B any -P in ipsec esp/transport//require;
^D
</programlisting>
	  </listitem>

	  <listitem>両ノードにおいて、あらかじめ共有された鍵ファイルを用意します。
	    ファイルのパーミッションを適切に設定することが <emphasis role="bold">非常に</emphasis>
	    重要です。さもなければ IPsec を使う意味がありません - CPU 時間を
	    無駄に使うだけになってしまいます
	    (&man.racoon.8; は、不適切なパーミッションを持つファイルは
	    読み込みません) 。
	    繰り返しますが、 <quote>A</quote> と <quote>B</quote> は IPv4/v6 の数字アドレスです。
	    <programlisting>
A# cat &gt;/etc/racoon/psk.txt
B       spamspamspam
^D
A# chmod 600 /etc/racoon/psk.txt

B# cat &gt;/etc/racoon/psk.txt
A       spamspamspam
^D
B# chmod 600 /etc/racoon/psk.txt
</programlisting>
	  </listitem>

	  <listitem><code>racoon</code> を実行します。
	    デバッグトレースを見たい場合は、下記のような引数を取ります:
	    <programlisting>
# racoon -f /etc/racoon/racoon.conf -dddddd
</programlisting>
	  </listitem>

	  <listitem>A と B の間でパケットを交換してみてください。
	    racoon のメッセージがコンソールに出て、
	    鍵が確立されます。
	    <programlisting>
A# ping -n B
(しばらくしてから、応答が見られるでしょう)
^C
A# setkey -D
(racoon で交換された鍵が見られるでしょう)
</programlisting>
	  </listitem>
	</orderedlist>

	<para>racoon は、ポリシー定義に基づいて鍵を交渉します。
	  ポリシー定義を変更することで、これ以外のケースに対しても容易に設定できます。
	  次の例は、下記の状況向けに鍵を設定するものです:</para>

	<itemizedlist>
	  <listitem>A はメールサーバー。
	    A は、 A に POP プロトコル (TCP ポート 110) で接触する
	    すべてのクライアントに、トランスポートモード AH を使わせたい。
	    B は、 A と接触したいクライアント。
	    <orderedlist>
	      <listitem>A でのポリシー設定は、ローカルトラフィックに対しては AH を使いません
	        (racoon は自分自身とは鍵の交渉をできないことに注意)。
	        ポリシーの順序はたいへん重要です。
	        この順序を変えると、この設定は機能しなくなるでしょう。
	        <programlisting>
A# setkey -c
spdadd A[110] A tcp -P out none;
spdadd A A[110] tcp -P in none;
spdadd A[110] 0.0.0.0/0 tcp -P out ipsec ah/transport//require;
spdadd 0.0.0.0/0 A[110] tcp -P in ipsec ah/transport//require;
^D

B# setkey -c
spdadd B A[110] tcp -P out ipsec ah/transport//require;
spdadd A[110] B tcp -P in ipsec ah/transport//require;
^D
</programlisting>
	      </listitem>

	      <listitem>ポリシー設定以外の部分は、前の例と同様に設定します。
	      </listitem>
	    </orderedlist>
	  </listitem>
	</itemizedlist>

	<para>設定するうえでなにか問題があったら、フルデバッグログ (racoon -dddddd)
	  をしっかり見て、どこが原因か調べてください。
	  いかなる設定の違いも、交渉の失敗につながります。</para>
      </sect3>

      <sect3 id="configboot">
	<title>ブート過程で IPsec 手動鍵とポリシーを設定する</title>

	<para>&man.rc.conf.5; には、 <quote><code>ipsec</code></quote> という IPsec 用のエントリーがあります。
	  <code>ipsec=YES</code> とすると、ブート時に、すべてのネットワークが有効になってから
	  次のコマンドを実行します:</para>

	<programlisting>
/sbin/setkey -f /etc/ipsec.conf
</programlisting>

	<para>たとえば、 /usr を暗号化して NFS マウントすることができます。

	  <code>/etc/ipsec.conf</code> の内容は、正当な &man.setkey.8; コマンドでなければ
	  なりません; 上記の設定例から、 <code>setkey -c &lt;&lt;EOF</code> と <code>EOF</code>
	  の部分を除いた部分のようにします。</para>
      </sect3>

      <sect3 id="ipf-interaction">
	<title>ipfilter との相互の影響</title>

	<para>NetBSD は、 Darren Reed による ipfilter、 &man.ipf.4; を実装しています。
	  &man.ipf.4; はパケットをふるいにかけ、また、 IPsec ポリシーの作用は本質的に
	  パケットフィルターと同じものです。
	  したがって、これらの実装は機能的に衝突します。
	  &man.ipf.4;/IPsec 相互の影響は、以下のとおりとなっています:
	  &man.ipf.4; は、ネイティブのワイヤーフォーマットのパケットのみを監視します。
	  &man.ipf.4; は、入ってくるパケットは IPsec の処理前のものを、
	  出てゆくパケットは IPsec の処理後のものを監視します。</para>

	<para>この処理順序のもとでも、以下のことを知っておいてください:</para>

	<itemizedlist>
	  <listitem>IPsec パケットに &man.ipf.4; を通過させたくても、これを &man.ipf.4; ルールから
	    外すべきではありません。
	    IP パケットに適切な通過プロトコル番号 (ESP は 50、 AH は 51)
	    を振る必要があります。

	    <note>
	      <title>注意</title>
	      <para>プロトコル番号は、 TCP/UDP ポート番号とはまったくの別物です。</para>
	    </note>
	  </listitem>

	  <listitem>トンネルデバイス (&man.gif.4; および &man.ipip.4;) から来るパケットは、依然として
	    &man.ipf.4; を通過します。
	    これらのパケットには、 &man.ipf.conf.5; でインターフェース名ディレクティブを
	    使って見分けるようにする必要があるかもしれません。
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 id="procorder">
	<title>処理順序</title>

	<para>下記の図は、受信側の新しい処理順序をまとめたものです。</para>

	<programlisting>
入ってくる場合の処理:
        userland programs               IKE daemon
          ^ AF_INET{,6} socket            ^ | PF_KEY socket
========= | ============================= | | ======== Kernel/user boundary
          |                               | v
        transport layer, TCP/UDP        key management table
          ^                               ^ | key information
          |                               | |
          |                               | v
  +-----IP input/output logic &lt;-------&gt; AH/ESP/IPcomp logic
  v       ^          ^                      |
tunnel    |          +----------------------+ decapsulated IPsec packets
devices   |
  |     ipfilter rule
  |       ^
  +------>|
          |
        Network drivers (ethernet)
</programlisting>

	<para>下記の図は、送信側の新しい処理順序をまとめたものです。</para>

	<programlisting>
出てゆく場合の処理:
        userland programs               IKE daemon
            | AF_INET{,6} socket          ^ | PF_KEY socket
=========== | =========================== | | ======== Kernel/user boundary
            v                             | v
        transport layer, TCP/UDP        key management table
            |                             ^ | key information
            |                             | |
            v                             | v
  +---->IP input/output logic &lt;-------&gt; AH/ESP/IPcomp logic
  |         |                           (incl. IPsec tunnel encapsulation)
tunnel      |
devices     |
  |     ipfilter rules
  |         |
  +---------+
            v
        Network drivers (ethernet)
</programlisting>
      </sect3>

      <sect3 id="pitfalls">
	<title>ありがちな落とし穴と、デバッグの技巧</title>

	<itemizedlist>
	  <listitem>下記の三つのものを混同している人たちがいます。
	    他の実装との相互運用をしようとする場合には、これらを混同しないよう注意してください。
	    もしこれらを混同していたら、相互運用の設定など永遠に
	    できないでしょう。
	    ドキュメンテーションでも、これらを間違った用語で使っていることがあります (はあ…) 。
	    <itemizedlist>
	      <listitem><emphasis role="bold">IPsec with manual key (手動鍵による IPsec)</emphasis><html:br/>
	        NetBSD の場合、この方法は、 IPsec 秘密鍵の設定に
	        &man.setkey.8; を使います。
	        IPsec 秘密鍵は時間が経っても変更されません。
	      </listitem>

	      <listitem><emphasis role="bold">IPsec with IKE, with pre-shared secret (あらかじめ決めた文字列を使った IKE による IPsec)</emphasis><html:br/>
	        NetBSD の場合、これは &man.racoon.8; を使います。
	        あらかじめ決めた文字列によって通信相手との認証をします。
	        &man.racoon.8; は IPsec 鍵を動的に交渉して、
	        それをカーネルインストールします。
	        IPsec 秘密鍵は定期的に変更されます。
	      </listitem>

	      <listitem><emphasis role="bold">IPsec with IKE, with certificates (証明書を使った IKE による IPsec)</emphasis><html:br/>
	        NetBSD の場合、これは &man.racoon.8; を使います。
	        証明書ファイルによって通信相手との認証をします。
	        &man.racoon.8; は IPsec 鍵を動的に交渉して、
	        それをカーネルインストールします。
	        IPsec 秘密鍵は定期的に変更されます。
	      </listitem>
	    </itemizedlist>
	  </listitem>

	  <listitem>IPsec の設定は、 *容易なものではありません* 。
	    うまく使うためには多くの障害がありますし、 IPsec のもつ盗聴への
	    対抗性ゆえにデバッグは非常に難しいものです。パケットトレースをもとに
	    何が起きているか推測することは、基本的にできません。
	    設定しようとする前に、本や標準文書/RFC を読むなり、コンサルタントを
	    雇うなり何なりするようにしてください。
	  </listitem>

	  <listitem>ネットワークのデバッグには、常に tcpdump を走らせます。
	    たとえトラフィックが暗号化されていても、パケットが実際に経路上に
	    あるかどうかの情報は得られるでしょう。
	  </listitem>

	  <listitem>&man.netstat.1; はあなたの味方です。
	    <code>netstat -sn</code> を実行して IPsec パケットの数を確認します。
	  </listitem>

	  <listitem>&man.racoon.8; の実行で問題があったら、最大限の
	    デバッグ出力をするようにして実行し、その出力を見てください。
	    (コマンドライン引数 <code>-dddddd</code>)
	  </listitem>

	  <listitem>あなたの NetBSD デバイスは、通信相手のデバイスとの相互運用のため、
	    間違いなく本当に<emphasis role="bold">厳密に同一</emphasis>に設定する必要があります。
	    パケットは、相手方が期待しているものと厳密に同一のプロトコルと
	    暗号化アルゴリズムによって生成されなければなりません。
	    これができていないと、追跡することが非常に難しいエラーに見舞われます。
	    IPsec においては、暗号化/認証の失敗はパケットの欠落として現れます。
	    このため、設定を失敗すると、パケットがエラー表示を伴わずに
	    消えてなくなることになります。
	    このパケットの内容は、すでに解読不能になっているので、
	    &man.tcpdump.8; はたいして役に立ちません。
	    他の相手方を伴う設定は、くれぐれも慎重にするようにしてください。
	  </listitem>

	  <listitem>IKE 交渉は net.key.larval_lifetime sysctl MIB (デフォルトでは 30 秒)
	    の範囲内で完了しなければならないため、
	    遅いマシンでは鍵の交渉ができないかもしれません。
	    本当に遅いマシンをお使いなら、この変数値を増やしてみてください。
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 id="issues">
	<title>既知の問題</title>

	<itemizedlist>
	  <listitem>カーネル IPsec ポリシーエンジンの制限のため、トンネルモード AH
	    は、期待通りには動作しません。
	    トンネルモード AH は使わないようにしてください。
	  </listitem>

	  <listitem>IPsec と &man.ipf.4; のコードは、うまく協調しません。
	    詳細は <ulink url="#ipf-interaction">"ipfilter との相互の影響"</ulink>
	    を参照してください。
	  </listitem>

	  <listitem>IPsec ポリシールールは、 tcp/udp 以外のプロトコル仕様に対しては
	    十分テストされていません。安全側を取る場合にはプロトコル
	    <quote>any</quote> (= アドレスマッチのみ) を使ってください。この問題は、すべての
	    パケットフィルター一般についていえるものです - 通常のパケットフィルター
	    記述は、ヘッダーチェインに関してうまくふるまいません。
	  </listitem>
	</itemizedlist>
      </sect3>

      <sect3 id="conformance">
	<title>標準化、互換性への適合</title>

	<para>KAMEのIPsecの実装(NetBSDツリーに含められる)が、最新のIPsec標準に適合しています。
	  <ulink url="http://orange.kame.net/dev/cvsweb.cgi/kame/netbsd/sys/netinet6/IMPLEMENTATION">KAME の
	    NetBSD 実装ノート</ulink>
	  には、実装するための包括的な標準化文書があります。</para>

	<para>他の実装との互換性が、さまざまな場所で確認されました。
	  <ulink url="http://orange.kame.net/dev/cvsweb.cgi/kame/netbsd/sys/netinet6/IMPLEMENTATION">KAME の
	    NetBSD 実装ノート</ulink>
	  に含まれる実装は、過去に互換性は確認されたものです。
	  しかし、互換性のテスト後にコードは変更される可能性がありますので、互換性がなくなっている可能性もありますので注意して下さい。
	  NetBSDデバイスとpeerデバイスがある特定の構成のみで互換性をとることも可能です。</para>

	<para>もし他の実装でNetBSDデバイスを設定する場合、そのIPsecの仕様/実装には多くの難点があることに注意してください。
	  互換性を取るためにはpeerのデバイスと同じデバイスでNetBSDデバイスの構成を設定する必要があります。</para>
      </sect3>

      <sect3 id="compatibility">
	<title>他のIPsecスタックとのAPI互換性</title>

	<para>IPsecの知識がありユーザーランドのコードを書きたいなら、あなたはIPsecプラットフォーム間のAPI互換性について知りたくなるでしょう。</para>

	<para>我々はカーネル内に鍵データベースを操作するために <!--RFC-->RFC2367 PF_KEY APIを持っています。
	  このAPIの基本的な部分は他のUNIXベースのIPsecスタック上で利用可能であり、そしてある程度(例えば、OpenBSDが同様にPF_KEY APIを実行する)の互換性があるかも知れません。
	  かめIPsecスタックが、他のグループがそうするのと同じように、ある特定の方法でこれを拡張します。
	  拡張された部分は他の(非かめ)IPsecスタックと両立できません。</para>

	<para>IPsecポリシー管理APIの仕様書ドキュメントはありません。
	  それ故に、IPsecポリシー管理APIで(非かめ)IPsecスタックとの互換性を想定することができません。</para>

	<para>設定ファイルの書式の標準がありません。
	  NetBSD 以外の IPsec デバイスとの間で設定をコピーしたい場合は、設定ファイルの書式を変換する必要があるでしょう。</para>

	<para>NetBSDとFreeBSDは同じ原点(かめ)からIPsecコードベースを共有するため、API互換性があります。
	  しかしながら、異なった日付のかめコードをマージした時点で、NetBSDとFreeBSDのIPsecコードには違いが生じます。
	  標準的なユーザーランドアプリケーションがその違いを認識する必要はありません。
	  ただし、 IPsec key management daemons の実装をするのであれば、
	  PF_KEY API の差異を考慮する必要があるでしょう。</para>

	<itemizedlist>
	  <listitem>NetBSD 1.5 は2000年6月初旬にかめIPsecスタックを取り込んでいます。
	  </listitem>

	  <listitem>FreeBSD 4.0-RELEASE は1999年12月初旬にかめIPsecスタックを取り込んでいます。
	  </listitem>

	  <listitem>マニュアルでのipsec鍵設定、 AH/ESPオペレーションまたは
	    &man.ipsec.set.policy.3; APIはカーネルにおける相違はありません。
	  </listitem>

	  <listitem>PF_KEYソケット、libipsec API、PF_KEYラッパー関数などには違いがあります。
	    直接PF_KEYソケットを操作する
	    (&man.racoon.8; のようなIKEデーモンや
	    &man.setkey.8;のような鍵設定プログラム)
	    アプリケーションを実装する際に、その違いは辛いかもしれません。
	  </listitem>
	</itemizedlist>

	<para>NetBSD 1.4 から 1.5 までの NetBSD-current の開発において、
	  KAME の IPsec 部分を 3 度にわたって導入しました。
	  この導入には、後方非互換な API の変更を含んでいます。
	  1.4 から 1.5 までの NetBSD-current を使う場合は、
	  それが最新のコードを使っているか確認してください。
	  NetBSD 1.5 では、 NetBSD 1.5 で提供される API について、
	  完全なバイナリー互換または API バージョンチェックを実現する予定です。</para>
      </sect3>

      <sect3 id="readings">
	<title>書籍その他の読みものは ?</title>

	<para>文字どおり、山ほどの書籍が出ています。</para>

	<itemizedlist>
	  <listitem><ulink url="http://search.barnesandnoble.com/booksearch/results.asp?WRD=ipsec">
	      Barnes &amp; Noble for books を <quote>IPsec</quote> で検索</ulink>
	    (注意: 私たちは書店について、何らの推奨もしていません)
	  </listitem>
	</itemizedlist>
      </sect3>
    </sect2>

    <sect2 id="Other_links">
      <title>他のリンク</title>

      <sect3 id="linklist">
	<title>雑多なリンク</title>

	<itemizedlist>
	  <listitem><ulink url="rasvpn.html">Racoon を使ったリモートユーザーアクセス VPN の構築方法</ulink>
	  </listitem>

	  <listitem><ulink url="http://asherah.dyndns.org/~josh/ipsec-howto.txt">FreeBSD IPsec mini-HOWTO</ulink>, Windows 2000 との相互運用を含みます
	  </listitem>

	  <listitem><ulink url="http://www.kame.net/">かめプロジェクト</ulink>,
	    現在マージされている IPv6 および IPsec 実装のでもと
	  </listitem>

	  <listitem><ulink url="http://orange.kame.net/dev/cvsweb.cgi/kame/netbsd/sys/netinet6/IMPLEMENTATION">KAME の
	      NetBSD 実装ノート</ulink>
	  </listitem>

	  <listitem><ulink url="http://orange.kame.net/dev/cvsweb.cgi/kame/IMPLEMENTATION">KAME の
	      実装ノート</ulink> - 内容は NetBSD と関係ないものも含まれます
	  </listitem>

	  <listitem><ulink url="http://orange.kame.net/dev/cvsweb.cgi/kame/COVERAGE">
	      KAME プラットフォーム間での実装の差分</ulink>
	  </listitem>

	  <listitem><ulink url="../../../about/crypto-export.html">
	      NetBSD 暗号コードの輸出に関して</ulink>
	  </listitem>
	</itemizedlist>
      </sect3>
    </sect2>
  </sect1>
  <parentsec url="../" text="NetBSD ドキュメンテーション: ネットワーク"/>
</webpage>
