<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE webpage
  PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
	 "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-docs-network-ipsec-rasvpn">
<config param="desc" value="リモートユーザーアクセス VPN の構築方法"/>
<config param="cvstag" value="$NetBSD: rasvpn.xml,v 1.5 2009/01/13 12:57:25 hubertf Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: rasvpn.xml,v 1.5 2009/01/13 12:57:25 hubertf Exp   -->
<config param="rcsdate" value="$Date: 2009/01/13 12:57:25 $"/>
<head>

  <!-- Copyright (c) 2005 Emmanuel Dreyfus.  ALL RIGHTS RESERVED. -->

  <title>Racoon を使ったリモートユーザーアクセス VPN の構築方法</title>
</head>

<sect1 role="toc">

  <sect2 id="version">
    <title>ソフトウェアリリース</title>

    <sect3 id="kernel">
      <title>カーネル</title>
      <para>この文書の情報は、以下の
	NetBSD カーネルを対象としています。
	<itemizedlist>
	  <listitem>2005 年 5 月以降の NetBSD-current</listitem>
	  <listitem>2005 年 5 月以降の NetBSD-3.0_BETA</listitem>
	</itemizedlist>
      </para>
    </sect3>

    <sect3 id="userland">
      <title>ユーザーランド</title>
      <para>この文書の情報は、以下のユーザーランド
	(&man.setkey.8;, &man.racoon.8;, &man.racoonctl.8; および
	libipsec) を対象としています。
	<itemizedlist>
	  <listitem>2005 年 5 月以降の NetBSD-current</listitem>
	  <listitem>2005 年 5 月以降の NetBSD-3.0_BETA</listitem>
	  <listitem>これより前の NetBSD リリースに、NetBSD の pkgsrc を使って
	    ipsec-tools 0.6.beta2 以上のパッケージを追加したもの</listitem>
	</itemizedlist>
      </para>
    </sect3>
  </sect2>

  <sect2 id="remote-user-vpn">
    <title>リモートユーザーアクセス VPN</title>

    <sect3 id="context">
      <title>背景となる状況</title>
    
      <para>多くの組織では、リモートアクセスサーバー (Remote Access Server, RAS)
	を持っており、ユーザーが旧来の公衆電話回線 (Plain Old Telephone System, POTS)
	とモデム接続を使ってリモートアクセスできるようにしています。</para>
      
      <para>デジタル加入者回線 (Digital Subscriber Line, DSL) やケーブル回線といった
	高帯域接続の普及に伴い、POTS を使ったリモートアクセスは時代遅れとなり、
	ユーザーは高帯域のリモートアクセスを求めるようになっています。
	仮想プライベートネットワーク (Virtual Private Network, VPN) を使うことは、
	この問題に対する解決策のひとつです。</para>

      <para>VPN アクセス用のユーザー認証としては、いくつかの方法があります。
	<itemizedlist>
	  <listitem>グループパスワード (ユーザー全員が同じパスワードを使う)</listitem>
	  <listitem>ログイン名とパスワード</listitem>
	  <listitem>x509 証明書</listitem>
	</itemizedlist>
      </para>

      <para>グループパスワードは劣った手法であり、使うべきではありません。
	ユーザーを本当に認証しているわけではないからです。
	x509 証明書は最高のセキュリティーをもたらしますが、ユーザー証明書の管理が面倒かもしれません。
	それでも構わなければ、必要な情報は <ulink url="index.html">IPsec FAQ</ulink>
	にすべてあります。ログイン名とパスワードは、並のセキュリティーレベルです。
	パスワードは推測されたり、別のプロトコルで公開されたり (例: SSL を使わない POP3)
	するので、安全性は高くはありません。しかし、強いパスワードを使うようにし、
	また、傍受されないようなプロトコルの使い方をしていれば、
	経済的に安全を実現できます。</para>

      <para>この HOW-TO では、リモートユーザー VPN アクセス用に
	ログイン名とパスワードが使われている状況を対象とします。</para>
    </sect3>

    <sect3 id="security">
      <title>セキュリティー上の問題</title>
      
      <para>安全な VPN を確立するために、リモートユーザーは VPN ゲートウェイを認証しなければならず、
	また、VPN ゲートウェイはリモートユーザーを認証しなければなりません。
	お互いの認証がおこなわれないと、中間者攻撃 (Man in the Middle (MiM) attack)
	の抜け穴が開き、攻撃者が VPN ゲートウェイになりすまして
	ユーザーパスワードを収集できてしまいます。</para>
      
      <para>リモートユーザーがログイン名とパスワードで認証すると説明しましたが、
	VPN ゲートウェイはどうやって認証するのでしょうか? 事前共有鍵を使う場合、
	その鍵を知っている人なら誰でも VPN ゲートウェイになりすますことができますし、
	正当なユーザーは事前共有鍵を知っておかねばならなくなります。これは非常に弱いセキュリティーです。
	代替策は、VPN ゲートウェイで x509 証明書を使うことです。これはサーバー証明書であり、
	ユーザー証明書より管理しやすいものです。ここでは、
	VPN ゲートウェイの認証に証明書を使うものとします。</para>
    </sect3>

    <sect3 id="solutions">
      <title>解決策</title>

      <para>ここでは、ユーザーの認証にはログイン名とパスワードを使い、
	VPN ゲートウェイの認証には証明書を使うことが必要です。これを実現できる手法はあまりありません。
	<ulink url="http://www.openvpn.org">OpenVPN</ulink> は、これが実現可能な、
	Secure Socket Layer (SSL) を使った解決策です。別の解決策として、 IPsec を使う方法もあり、
	この HOW-TO ではこちらの方法を取り扱います。</para>
    </sect3>
  </sect2>

  <sect2 id="remote-user-ipsec">
    <title>IPsec を使ったユーザーリモートアクセス</title>

    <sect3 id="ph1auth">
      <title>IPsec フェーズ 1 認証</title>
      
      <para>IPsec フェーズ 1 は、NetBSD では &man.racoon.8; としても知られる IKE デーモンによって行なわれる、
	IPsec 鍵交換 (IPsec Key Exchange, IKE) 操作の一部です。IPsec フェーズ 1 の目的は、
	通信相手を認証したうえで、 IPsec フェーズ 2 を安全に行なうためのマスター鍵の設定をすることです。
	フェーズ 2 の目的は、IPsec トラフィック交換に使われる鍵を得ることです。
	IPsec トラフィック交換がおこなわれている間、フェーズ 2 の鍵は定期的に再生成されます。</para>

      <para>IPsec フェーズ 1 は、二つの認証方法を提供します。事前共有鍵と、証明書です。
	以下の理由により、IPsec フェーズ 1 はわれわれが求めているものではありません。
	<itemizedlist>
	  <listitem>事前共有鍵は、ログイン名に縛られません。グループパスワードとした場合だけは管理可能ですが、
	    それを除けば、事前共有鍵を適切に扱うための管理ツールがありません。</listitem>
	  <listitem>IPsec フェーズ 1 認証は、対称的であることが前提です。
	    つまり、両端ともに事前共有鍵認証を、または両端ともに証明書認証を使う、というものです。
	    これは、われわれが探しているものではありません。</listitem>
	</itemizedlist>
      </para>
    </sect3>

    <sect3 id="xauth">
      <title>Xauth</title>

      <para>Xauth は、フェーズ 1 の後に使われ、ログイン名/パスワード認証を追加する IKE 拡張です。
	これは、認証にまつわる問題の半分を解決します。Xauth はフェーズ 1 の直後に使われるので、
	フェーズ 1 認証により安全なものとなります。問題の半分は解決しましたが、まだ
	フェーズ 1 では事前共有鍵か証明書が必要です。事前共有鍵の使用は安全ではありませんし、
	証明書を使うことは、ユーザー証明書を使うことを意味します。
	ユーザー証明書の使用はわれわれが避けたかったことです。</para>
    </sect3>

    <sect3 id="hybrid">
      <title>Hybrid auth</title>

      <para>Hybrid auth はもうひとつの IKE 拡張で、フェーズ 1 を非対称にするものです。
        フェーズ 1 の行なわれている間、VPN ゲートウェイは、リモートユーザーが認証をする必要がなくても、
        証明書を使うことができます。フェーズ 1 が行なわれた後の状況は、以下のとおりです。
        <itemizedlist>
          <listitem>リモートユーザーは、通信相手が VPN ゲートウェイであることがわかっています</listitem>
          <listitem>リモートユーザーと VPN ゲートウェイとの間のやりとりは安全です</listitem>
	  <listitem>VPN ゲートウェイは、話している相手が誰かわかっていません</listitem>
	</itemizedlist>
      </para>

      <para>このフェーズ 1 の後、リモートユーザーのセキュリティー認証のために Xauth 交換をすることができます。
        その後、フェーズ 2 がおこなわれます。</para>

      <para>IPsec + Xauth + Hybrid auth のセキュリティーの度合は、
        パスワード認証を使った SSH とだいたい同じぐらいです。</para>
    </sect3>

    <sect3 id="mode_cfg">
      <title>ISAKMP モード設定</title>

      <para>以上のとおり、認証の問題は IPsec + Xauth + Hybrid auth を使うことで解決されました。
	リモートアクセスをユーザーフレンドリーなものにするために、
	リモートユーザーのマシン設定を自動化する必要があります。ISAKMP モード設定は、
	VPN ゲートウェイがリモートユーザーのマシンにネットワーク設定 (内部 IP アドレス、
	DNS アドレス、ドメイン名など) を提供できるようにする IKE 拡張です。</para>
    </sect3>

    <sect3 id="nat_t">
      <title>NAT Traversal</title>

      <para>リモートユーザーは、IPsec 暗号化ストリームを使った場合には機能しない、
	ネットワークアドレス変換器 (Network Address Translator, NAT) の向こうにいるかもしれません。
	トラフィックを暗号化する必要があるときは、IPsec は、暗号ペイロード (Encapsulated Security Payload, ESP)
	というレイヤー 4 のプロトコルを使用します。TCP や UDP とは異なり、ESP
	はポート番号を持たず、 NAT デバイスが簡単に扱うことはできません。</para>

      <para>RFC 3947 および 3948 では、ESP を UDP でカプセル化する方法と、
	IPsec ストリームの両端の間にある NAT を管理するための IKE 拡張について解説しています。
	このカプセル化の方法と IKE 拡張の組み合わせは、NAT Traversal (NAT-T)
	として知られています。</para>

      <para>NAT-T は、合衆国特許の<ulink url="https://datatracker.ietf.org/public/ipr_detail_show.cgi?&amp;ipr_id=78">制約を受けることになるかもしれません</ulink>。</para>
    </sect3>

    <sect3 id="ike_frag">
      <title>IKE フラグメンテーションおよび ESP フラグメンテーション</title>

      <para>リモートユーザーが DSL モデムルーター機器を介して接続してくるのは、よくあることでしょう。
	これらのデバイスのほとんどは、大きな UDP パケットの扱いに関して、まったく用をなしません。
	UDP が DNS リクエストでしか使われないという想定で作られており、それより大きな
	UDP パケットやフラグメントされた UDP パケットはこぼしてしまいます。
	IKE トランザクションや ESP オーバー UDP は大きくなりがちなので、
	ブロックされてしまいます。</para>

      <para>この問題を処理するため、IKE パケットを小さな断片に分割 IKE 拡張である、
	IKE フラグメンテーションを使います。
	ESP フラグメンテーションは、大きな ESP オーバー UDP パケットの問題を、
	ESP のカプセル化の前に IP フラグメンテーションをすることによって、処理します。
	すなわち、ネットワークに frag(IP/UDP/ESP/IP) を送るのではなく IP/UDP/ESP/frag(IP) を送るのです。
	このため、IPsec 両端点の間にはさまれたデバイスは、
	いかなるフラグメントされたパケットも認識しません。</para>
    </sect3>

    <sect3 id="dpd">
      <title>Dead Peer Detection</title>

      <para>最後の問題です。リモートユーザーのインターネット接続が不安定で、
	あたかも接続が切れたかのようになることがあります。これに対して、
	IPsec に内蔵されている仕組みは、しばらく後に IKE phase 2 鍵再生成を強制的に行なうことだけです。
	その時に通信相手がオンラインでなかったら、これは失敗し、その結果 VPN トンネルは破棄されます。</para>

      <para>この仕組みは、リモートユーザーがオフラインになったことを確認するため頻繁に鍵再生成を強制されるので、
	あまり便利ではありません。Dead Peer Detection (DPD) は、リモートの IPsec 端点が生きていることを
	定期的に確認するのに使われる IKE 拡張です。
	DPD は、リモートホストが数秒間オフラインになったことを確認するのに使うことができます。</para>
    </sect3>
  </sect2>

  <sect2 id="vpn-gateway">
    <title>VPN ゲートウェイの設定</title>

    <para>以下に、IPsec + Xauth + Hybrid auth + ISAKMP モード設定 + NAT-T + DPD + IKE フラグメンテーション +
      ESP フラグメンテーションを使った VPN ゲートウェイの設定例を示します。</para>

    <sect3 id="kernel">
      <title>カーネルコンフィギュレーション</title>

      <para>最初に、少なくとも以下のオプションを含めた<ulink url="../../kernel/#how_to_build_a_kernel">カーネルを
	  構築してインストール</ulink>する必要があります。</para>
      <programlisting>options INET
options GATEWAY
options PFIL_HOOKS
options IPSEC
options IPSEC_ESP
options IPSEC_NAT_T

pseudo-device   ipfilter</programlisting>
    </sect3>

    <sect3 id="forw">
      <title>パケットフォワーディング</title>

      <para>以下のコマンドを使って、IPv4 パケットフォワーディングを有効化する必要があります。
	<programlisting># sysctl -w net.inet.ip.forwarding=1</programlisting>
	<filename>/etc/sysctl.conf</filename> に以下の行を追加して、
	リブート時に自動的に実行することができます。
	<programlisting>net.inet.ip.forwarding=1</programlisting></para>
    </sect3>

    <sect3 id="cert">
      <title>証明書の作成</title>

      <para>OpenSSL の設定をまだ行なっていない場合は、設定ファイルのサンプルのインストールから始めてください。
	<programlisting># cp /usr/share/examples/openssl/openssl.cnf /etc/openssl/</programlisting>
	設定ファイルの用意ができたら、秘密鍵を作り、その鍵を使って証明書署名要求 (Certificate Signing 
	Request, CSR) を作ります。
	<programlisting># cd /etc/openssl
# umask 077
# openssl genrsa > certs/vpngw.key
# umask 022
# openssl req -new -key certs/vpngw.key -out certs/vpngw.csr</programlisting>
	この CSR (<filename>vpngw.csr</filename>) を認証局へ送って、署名をしてもらいます。
	これで x509 証明書が交付されます。この証明書を <filename>vpngw.crt</filename>
	という名前にすることにします。</para>

      <para>自分自身が認証局となりたい場合は、以下の手順で
	CA 秘密鍵の生成と署名をおこないます。
	<programlisting># cd /etc/openssl
# mkdir -p demoCA/newcerts
# touch demoCA/index.txt
# echo "00" > demoCA/serial
# umask 077
# openssl genrsa > certs/ca.key
# umask 022
# openssl req -days 3650 -x509 -key certs/ca.key -new > certs/ca.crt
# openssl ca -in certs/vpngw.csr -keyfile certs/ca.key -cert certs/ca.crt -out certs/vpngw.crt</programlisting></para>

      <para>秘密鍵が漏れると、 VPN はもう安全ではなくなってしまうので、
	秘密鍵は秘密にするようにしてください。CA 証明書 <filename>ca.crt</filename>
	をリモートユーザーに渡して、次の手順に進んでください。</para>
    </sect3>

    <sect3 id="config">
      <title>&man.racoon.8; の設定</title>

      <para>以下に <filename>/etc/racoon/racoon.conf</filename> ファイルの例を示します。
	<programlisting>path certificate "/etc/openssl/certs";

listen {
        adminsock disabled;
}

remote anonymous {
        exchange_mode aggressive;
        certificate_type x509 "vpngw.crt" "vpngw.key";
        my_identifier asn1dn;
        proposal_check claim;
        generate_policy on;		# IPsec ポリシーを自動生成する
	dpd_delay 20;			# 20 秒毎に、 DPD ポーリングする
        nat_traversal force;		# NAT-T を常に使う
        ike_frag on;			# IKE フラグメンテーションを使う
        esp_frag 552;			# ESP フラグメンテーションを使う
        proposal {
                encryption_algorithm aes;
                hash_algorithm sha1;
                authentication_method hybrid_rsa_server;
                dh_group 2;
        }
}
mode_cfg {
        network4 10.99.99.1;		# VPN 用 IPv4 アドレス在庫の先頭のアドレス
        pool_size 253;			# VPN 用 IP アドレス在庫のサイズ: 253 アドレス
        auth_source system;		# /etc/passwd をもとにログインを検証する
        dns4 10.0.12.1;			# IPv4 DNS サーバー
        wins4 10.0.12.1;		# IPv4 WINS サーバー
        banner "/etc/racoon/motd";	# クライアントに対するバナーメッセージ
	pfs_group 2;
}

sainfo anonymous {
	pfs_group 2;
        lifetime time 1 hour;
        encryption_algorithm aes;
        authentication_algorithm hmac_sha1;
        compression_algorithm deflate;
}</programlisting></para>

      <para><code>mode_cfg</code> セクションで、ISAKMP モード設定を使って
	VPN ゲートウェイからクライアントへ送られる設定を定義しています。
	現在のところ、IPv4 の設定だけに対応しています。
	このセクションで、払い出す VPN アドレスの在庫を、先頭のアドレス (<code>network4</code>)
	と在庫のサイズ (<code>pool_size</code>) により定義しています。<code>auth_source</code>
	は、ログイン名とパスワードをどうやって検証するかを表します。ここで指定できる値は、
	システムユーザーデータベースをもとに検証する <code>system</code>、Pluggable Authentication Module (PAM)
	システム (<filename>/etc/pam.d/racoon</filename> が使われます) を使う <code>pam</code>、
	RADIUS をもとにログインを検証する <code>radius</code> です。</para>

      <para><filename>/etc/racoon/racoon.conf</filename> ファイルの準備ができれば、
	&man.racoon.8; を実行することができます。
	<programlisting># racoon</programlisting></para>

      <para>ブート時に &man.racoon.8; を起動するためには、
	<filename>/etc/rc.conf</filename> に以下のように書きます。
	<programlisting>racoon=YES</programlisting></para>
    </sect3>

    <sect3 id="more_frag">
      <title>さらなるフラグメンテーション問題</title>

      <para>この設定例では、ESP フラグメンテーションを使って、送出するパケットが
	552 バイトより大きくならないような <code>esp_frag</code> の指定をしています。
	552 バイトは非常に小さいですが、これなら最もひどい DSL モデムルーター機器でも使えるはずです。
	<code>esp_frag</code> を大きくすれば、性能が向上します。</para>

      <para>ESP フラグメンテーションを使えば、どんなサイズの IP パケットでもトンネル経由で交換可能です。
	しかし、TCP には特別な場合があり、Path Maximum Transmission Unit (PMTU)
	探索にまつわる問題が起きるかもしれません。これに対する解決策は、
	最大セグメント長 (Maximum Segment Size, MSS)
	の調節を使うことです。払い出し用の VPN 内部アドレスの範囲が 10.99.99.0/24 であるとすると、
	<filename>/etc/ipnat.conf</filename> に以下のように書けばよいです。
	<programlisting>map ex0 10.99.99.0/24 -> 0/0 mssclamp 512</programlisting>
	この設定を有効にするために、以下のようにタイプします。
	<programlisting># ipf -E; ipnat -f /etc/ipnat.conf</programlisting>
	起動時にこのコマンドを実行するには、
	<filename>/etc/rc.conf</filename> に以下のように書きます。
	<programlisting>ipfilter=YES
ipnat=YES</programlisting>
	
	注意: <filename>/etc/ipf.conf</filename> ファイルがない場合は、<code>ipfilter=YES</code>
	とするとシステムが起動しません。 IP フィルタリングが一切必要ない場合は、
	空のファイルを作っておけばよいです。</para>
    </sect3>

    <sect3 id="firewall">
      <title>ファイアウォールとの関係</title>

      <para>この VPN の手法では、クライアントは VPN ゲートウェイの 500 番ポートと 4500 番ポートへ
	UDP パケットを送る必要があります。最初のパケットは 500 番ポートで交換され、
	それから NAT-T 交渉で 4500 番ポートにトランザクションが移ります。</para>

      <para>VPN ゲートウェイの前に立つファイアウォールは、
	VPN ゲートウェイ宛の udp/500 と udp/4500 を通すように設定する必要があります。</para>
    </sect3>


    <sect3 id="radius">
      <title>VPN ゲートウェイと RADIUS </title>

      <para>RADIUS は、ログインの検証、IP アドレスの割り当てと、
	アカウンティングに使うことができます。以下に示すのは、
	<filename>/etc/racoon/racoon.conf</filename> ファイルの <code>mode_cfg</code> セクションで、
	RADIUS を使うようにするための例です。
	<programlisting>mode_cfg {
	pool_size 253;			# IPv4 アドレス在庫のサイズ
	auth_source radius;		# RADIUS をもとにログインを検証する
	conf_source radius;		# RADIUS で IPv4 アドレスを割り当てる
	accounting radius;		# RADIUS アカウンティング
        dns4 10.0.12.1;			# IPv4 DNS サーバー
        wins4 10.0.12.1;		# IPv4 WINS サーバー
        banner "/etc/racoon/motd";	# クライアントに対するバナーメッセージ
	pfs_group 2;
}</programlisting></para>

      <para>この設定のほか、RADIUS サーバーのアドレスと RADIUS サーバーとの共有鍵を含んだ
	<filename>/etc/radius.conf</filename> ファイルを作る必要があります。
	このファイルは、共有鍵を安全に保つために、
	root の所有としてパーミッションを 0600 にしなければなりません。
	以下に例を示します。詳細は &man.radius.conf.5; をご覧ください。
	<programlisting>auth radius.example.net MyDirtySecret
acct radius.example.net MyDirtySecret</programlisting></para>
    </sect3>
  </sect2>

  <sect2 id="vpn-client">
    <title>VPN クライアント</title>

    <sect3 id="client">
      <title>Cisco VPN client</title>

      <para>前章で説明したような設定をした VPN ゲートウェイは、相互グループ認証 (mutual group authentication;
	Hybrid authentication と同義) の設定をした Cisco VPN Client と相互運用することができます。
	Cisco VPN クライアントが要求するグループおよびグループパスワードを、
	&man.racoon.8; は無視しますが、これによってユーザー認証が安全でなくなることはありません。</para>

      <para>NAT-T が有効になるよう、クライアントに
	IPsec オーバー UDP トランスポートの設定をすることを忘れないでください。</para>
    </sect3>

    <sect3 id="client_conf">
      <title>クライアントとしての &man.racoon.8; : 設定例</title>

      <para>&man.racoon.8; はクライアントとして使うことができます。
	CA 証明書を <filename>/etc/openssl/certs/ca.crt</filename> にインストールし、
	<filename>/etc/racoon/racoon.conf</filename> を以下のように設定する必要があります。
	<programlisting>path certificate "/etc/openssl/certs";
path pre_shared_key "/etc/racoon/psk.txt";

listen {
	# racoon と racoonctl との間で使うソケット
        adminsock "/var/racoon/racoon.sock" "root" "operator" 0660;
}

# Here is the address of the VPN gateway
remote 192.0.2.50 {
        exchange_mode aggressive;
        ca_type x509 "ca.crt";
        proposal_check obey;
        mode_cfg on;		# ISAKMP モード設定による設定を受け入れる
	dpd_delay 20;
        nat_traversal force;
        ike_frag on;
        esp_frag 552;
        script "/etc/racoon/phase1-up.sh" phase1_up;
        script "/etc/racoon/phase1-down.sh" phase1_down;
        passive off;
        proposal {
                encryption_algorithm aes;
                hash_algorithm sha1;
                authentication_method hybrid_rsa_client;
                dh_group 2;
       }
}


sainfo anonymous {
        lifetime time 1 hour;
        encryption_algorithm aes;
        authentication_algorithm hmac_sha1;
        compression_algorithm deflate ;
}</programlisting></para>

      <para>二つのスクリプト <filename>phase1-up.sh</filename> と <filename>phase1-down.sh</filename> は、
	それぞれ IKE phase 1 の確立時と終了時、つまり VPN 接続時と切断時に呼ばれます。
	このスクリプトは IPsec Security Policies (SP), VPN IP アドレス、
	ルーティングエントリーの設定と消去を受け持っています。
	サンプルスクリプトのままでも必要なことはできるはずですが、
	各自の必要に応じてカスタマイズすることもできます。
	<programlisting># cp /usr/share/examples/racoon/roadwarrior/client/*.sh /etc/racoon/</programlisting></para>

      <para>この準備ができれば、 &man.racoon.8; を起動できます。
	<programlisting># racoon</programlisting>
	ブート時に &man.racoon.8; を起動するには、<filename>/etc/rc.conf</filename> に
	<code>racoon=YES</code> を書き加えます。</para>
    </sect3>

    <sect3 id="connection">
      <title>VPN との接続と切断</title>

      <para>racoonctl(8) は、VPN への接続や VPN からの切断に使うことができます。
	ログイン名を <code>-u</code> オプションで指定します。
	パスワードは端末上で入力を促されます。
	<programlisting>$ racoonctl vc -u username 192.0.2.50
Password: password
Bound to address 10.99.99.3
==========================================================
                     Flying pigs LTD

 Welcome to our internal network, remote user.
==========================================================
$ racoonctl vd 192.0.2.50
VPN connection terminated</programlisting>
	この例では IP アドレスを使っていますが、DNS アドレスを使うこともできます。
	注意: 何らかの理由で、ルーティングエントリーかセキュリティーポリシーデータベース
	(Security Policy Database, SPD) にねじれが起きると、
	VPN の切断時に DNS 名前解決ができなくなります。
	この場合は、root で以下のコマンドを使って復旧できます。
	<programlisting># setkey -F
# setkey -FP
# route flush
# route add default your_default_gateway</programlisting></para>

      <para>&man.racoon.8; ソケット <filename>/var/racoon/racoon.sock</filename> への読み書き権限がある人なら、
	誰でも VPN の起動や停止をすることができます。
	このソケットの所有者とアクセス権限は、<filename>/etc/racoon/racoon.conf</filename> の
	<code>listen</code> セクションで、<code>adminsock</code> ステートメントを使って設定できます。</para>
    </sect3>

    <sect3 id="save_pwd">
      <title>Xauth パスワードの保存</title>

      <para>Xauth パスワードの入力を省略したい場合、このパスワードを racoon の事前共有鍵 (PSK)
	ファイルに保持することができます。<filename>/etc/racoon/racoon.conf</filename> の
	<code>remote</code> セクションに、以下の記述を追加します。
	<programlisting>xauth_login "username";</programlisting></para>

      <para>そして、 <filename>/etc/racoon/psk.txt</filename> に、
	ログイン名とパスワードを一行で書き足します。
	<programlisting>username	password</programlisting></para>

      <para>以上の設定をしておけば、以下のコマンドは、パスワードの入力を求めることなく、
	<code>toto</code> ログイン<!-- XXX -->を使って VPN 接続を確立します。
	<programlisting>$ racoonctl vc 192.0.2.50</programlisting></para>
    </sect3>
  </sect2>
</sect1>
<parentsec url="./" text="NetBSD ドキュメンテーション: NetBSD IPSec"/>
</webpage>
