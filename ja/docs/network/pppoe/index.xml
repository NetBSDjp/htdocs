<?xml version="1.0"?>
<!DOCTYPE webpage
 PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="docs-network-pppoe-index">
<config param="desc" value="NetBSD Documentation: Steps to connect via PPPoE (DSL)"/>
<config param="cvstag" value="$NetBSD: index.xml,v 1.2 2010/02/15 20:47:34 hubertf Exp $"/>
<config param="rcsdate" value="$Date: 2010/02/15 20:47:34 $"/>
<head>
<!-- Copyright (c) 1994-2004
        The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<title>NetBSD Documentation: Steps to connect via PPPoE (DSL)</title>
</head>


<sect1 role="toc">

<sect2>
<title>Steps to connect via PPPoE (DSL)</title>

<sect3 id="intro">
<title>Introduction</title>
<para>
This document will describe a simple setup to connect via PPPoE
(often used by DSL providers) to the Internet.
</para>

<para>
This document relates to NetBSD 1.6 and beyond, earlier releases do
not include kernel PPPoE support. If you are using an older release of
NetBSD, we suggest you install the net/rp-pppoe package from pkgsrc. This
includes a command called <code>adsl-setup</code> that will set everything up
for you.
</para>

<para>
PPPoE is an acronym for <emphasis role="bold">P</emphasis>oint-to-<emphasis role="bold">P</emphasis>oint <emphasis role="bold">P</emphasis>rotocol 
<emphasis role="bold">o</emphasis>ver <emphasis role="bold">E</emphasis>thernet. The typical setup is a DSL modem (which talks
via the DSL line to your providers router, called <emphasis>Access Concentrator</emphasis>)
and connects to your machine via a standard Ethernet. So you need an Ethernet
interface, dedicated to talk to your DSL modem. Over this Ethernet interface
a PPP connection is established.
</para>

<para>
At closer look this is weird. You got an Ethernet connection - why does your
provider not run IP on top of it? Some do this (similar to cable modem 
connections), using DHCP to assign IP numbers to your system. Most providers
do not do it, as PPPoE makes their lives a bit easier. It will make your live
a bit harder, since PPPoE has an unusual small MTU, which prevents many 
systems behind misconfigured firewalls on the Internet to connect to you.
A workaround is described <ulink url="#clamping">below</ulink>.
</para>

<para>
For the following examples we pick <emphasis>ne0</emphasis> as the interface name for our
Ethernet interface connecting to the DSL modem. Any other interface will
do, of course.
</para>
</sect3>


<sect3 id="check-kernel">
<title>Check your kernel</title>
<para>
Before you can use PPPoE, you will need support for it in your kernel.
To check it is there, run
<screen> ifconfig -C </screen>
and look for "pppoe" in the output. If it is not there, you need to add
<programlisting>
  pseudo-device pppoe
</programlisting>
to your kernel config file.
</para>
</sect3>


<sect3 id="manual-test">
<title>Do a manual test connection</title>
<para>
Before setting up your machine to automatically connect, you should do
a manual test connection. If anything fails, this will be the easy way
to debug your setup.
</para>
<para>
First we create the pppoe interface itself and assign dummy IP numbers to it,
which will be replaced later during PPP negotiation. For now we keep the
interface marked down, as it is not ready yet:
</para>
<screen>
  ifconfig pppoe0 create
  ifconfig pppoe0 inet 0.0.0.0 0.0.0.1 down
</screen>

<para>
Next we attach the pppoe interface to the Ethernet interface used to connect
the DSL modem. This interface needs to be marked UP, but it does not need
an IP address assigned.
</para>

<screen>
  ifconfig ne0 up
  pppoectl -e ne0 pppoe0
</screen>

<para>
Now you need your authentication data. Most providers offer some documentation
how that data has to be formatted for Linux users, as the windows software
often plays tricks and ask for provider specific things. If you are using
t-online, please see <ulink url="#t-online-isdn-vs-dsl">this side note</ulink>.
Enter the authentication data via a command like this (note that you
may need
to protect special characters from the shell by using single quotes):
</para>


<screen>
  pppoectl pppoe0 myauthproto=pap 'myauthname=XXX' 'myauthsecret=YYY' hisauthproto=none
</screen>

<para>
where <code>XXX</code> is your username and <code>YYY</code> is your password.
The <code>hisauthproto=none</code> prevents PPP from forcing the peer to 
authenticate, something many providers will refuse to do. If your provider
supports the CHAP protocol, you may set <code>myauthproto=chap</code>.
</para>

<para>
We are now ready to test a first connection. Since something may be wrong,
we will restrict retries for now:
</para>

<screen>
  pppoectl pppoe0 max-auth-failure=1
</screen>

<para>
Now activate the interface:
</para>

<screen>
  ifconfig pppoe0 up
</screen>

<para>
Nothing will happen (we have not enabled extended debugging messages). If 
everything works your PPPoE session will get connected, which you can verify
with:
</para>

<screen>
  # pppoectl -d pppoe0
  pppoe0: state = session
          Session ID: 0x254f
          PADI retries: 0
          PADR retries: 0
</screen>

<para>
This example output shows a working setup. The PPPoE session has been 
established and is still in use (state = session). If the output shows
non session state, you either have your authentication data wrong (see
below) or the access concentrator did not answer or establish a session,
which will show up as PADI or PADR retries. This means either your DSL
setup is not working at all, or you need to specify a service name (via
the <code>-s</code> option to pppoectl) or an access concentrator name (via
the <code>-a</code> option to pppoectl). Your provider should have documented
this need. See &man.pppoectl.8; for details.
</para>

<para>
Assuming your PPPoE session got up, we can now check the IP negotiation
of PPP:
</para>

<screen>
  # ifconfig pppoe0
  pppoe0: flags=8851&lt;UP,POINTOPOINT,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1492
          inet 117.80.111.85 -&gt; 118.5.113.169 netmask 0xff000000
</screen>

<para>
This is a working connection, as we got a local (117.80.111.85) and a 
remote (118.5.113.169) IP address assigned (of course you will see different
IP numbers). If you do not get a similar display, your PPP authentication
data are wrong. Double check them and possibly correct them, by repeating
the pppoectl setting them and starting again from there.
</para>
</sect3>


<sect3 id="permanent-setup">
<title>Setup a permanent connection</title>
<para>
Now that you verified it works, you will want to configure the machine
to start the connection automatically.
</para>
<para>
To have your machine connect automatically on boot, the things you tried
before in the manual setup need to be encoded in some scripts and configuration
files.
</para>
<para>
Depending on the contract you have you will choose a connection that is always
on, used if you have a <ulink url="#stay-connected">flat rate</ulink> charging model.
</para>
<para>
If you pay for connection time, you will prefer an <ulink url="#connect-on-demand">
on demand</ulink> connection.
</para>
<para>
Regardless, your ISP should have provided you with the IP addresses of your
nameservers, which you should enter in <code>/etc/resolv.conf</code>.  See
&man.resolv.conf.5; and the <ulink url="../index.html#configuration_files">Networking
FAQ</ulink> for details.
</para>
</sect3>


<sect3 id="stay-connected">
<title>Setup a line that is always connected</title>
<para>
The aim of this setup is to keep the line open as long as possible, and in
the event of disconnections (for whatever reason) to reconnect as soon as
possible. This is the default mode of operation. Filling in the authentication
data you used in the manual test connection above, create this files:
</para>
<para>
In <code>/etc/ifconfig.pppoe0</code> put:
</para>

<screen>
create
# Mark the physical interface used by this PPPoE interface up
! /sbin/ifconfig ne0 up
# Let $int use ne0 as its Ethernet interface
! /sbin/pppoectl -e ne0 $int
# Configure authentication
! /sbin/pppoectl $int myauthproto=pap 'myauthname=XXX' 'myauthsecret=YYY' hisauthproto=none
# Configure the PPPoE interface itself. These addresses are magic
# meaning we don't care about either address and let the remote
# ppp choose them.
0.0.0.0 0.0.0.1 up
</screen>

<para>
Make sure this file is only readable by root.
</para>
<para>
In <code>/etc/ppp/ip-up</code> put:
</para>

<screen>
#! /bin/sh
/sbin/route add default $5
</screen>

<para>
and make this file executable by root.
</para>
<para>
In <code>/etc/ppp/ip-down</code> put:
</para>

<screen>
#! /bin/sh
/sbin/route delete default $5
</screen>

<para>
and make this file executable by root too.
</para>
<para>
Finally, add this line to <code>/etc/rc.conf</code>:
</para>

<screen>
ifwatchd=YES
</screen>

<para>
You are done. Due to the missing <code>link1</code> flag of the pppoe0
interface the connection will be established as soon as possible, and 
reestablished immediately after failure. Every time the connection comes
up, the script <code>/etc/ppp/ip-up</code> will be executed, and every time it
goes down <code>/etc/ppp/ip-down</code>. You can use these scripts for further
cleanup (i.e., pruning stale NAT connections after the line dropped and you
will be assigned a new dynamic IP number on reconnect) or kicking servers
that need to know about that the connection is working again (i.e., a
forwarding and caching named).
</para>
<para>
Note that on system boot the ifwatchd daemon (which executes the ip-up
and ip-down scripts) is probably run quite late. The PPPoE connection will
be established as soon as the ifconfig.pppoe0 file is run, early on network
startup. The connection will come up immediately, but the <code>/etc/ppp/ip-up</code>
script will not yet be run. When &man.ifwatchd.8; starts, it will execute the
ip-up script if the connection is already up. Many network daemons will
start in between, and due to the missing default route not be able to connect
to the outside Internet. Kicking these daemons in the ip-up script is a
good idea (and will take care of most problems those daemons cause when
using dynamic IP addresses as well). A typical example is to flush all
NAT connections and restart named and ntpd:
</para>

<screen>
#! /bin/sh
/sbin/route add default $5
/etc/rc.d/ntpd restart
/etc/rc.d/named restart
</screen>
</sect3>


<sect3 id="connect-on-demand">
<title>Setup a line connecting only on demand</title>
<para>
This connection setup will establish the PPPoE connection only when traffic
tries to use it. It will disconnect automatically after a configurable idle
period.
</para>
<para>
The main differences to a permanent connection configuration are
</para>

<itemizedlist>
<listitem><para>The <code>link1</code> flag on the pppoe0 interface</para>
</listitem>
<listitem><para>The idle timeout (set to 60 seconds in the example below) to make
the line drop after some time without traffic</para>
</listitem>
<listitem><para>The routing configuration, as you need to root packets to the pppoe0
interface even when the connection is not established.</para>
</listitem>
</itemizedlist>

<para>
Put this in <code>/etc/ifconfig.pppoe0</code>:
</para>

<screen>
create
# Mark the physical interface used by this PPPoE interface up
! /sbin/ifconfig ne0 up
# Let $int use ne0 as its Ethernet interface
! /sbin/pppoectl -e ne0 $int
# Configure authentication
! /sbin/pppoectl $int idle-timeout=60 myauthproto=pap 'myauthname=XXX' 'myauthsecret=YYY' hisauthproto=none
# Configure the PPPoE interface itself. These addresses are magic
# meaning we don't care about either address and let the remote
# ppp choose them.
0.0.0.0 0.0.0.1 link1 up
! /sbin/route add default -iface 0.0.0.1
</screen>

<para>
It is not necessary to use ifwatchd in this configuration, as the default route
is a permanent one already set by above config file. If you need notifications
of changing IP addresses or the connection dropping or reestablishing, you
may configure ifwatchd and use <code>/etc/ppp/ip-up</code> and <code>/etc/ppp/ip-down</code>.
See the <ulink url="#stay-connected">permanent connection</ulink> case for an
example (but do not change the default route).
</para>
</sect3>


<sect3 id="clamping">
<title>Setup NAT with MSS-clamping</title>
<para>
Some systems behind misconfigured firewalls try to use Path-MTU-Discovery,
while their firewall blocks all ICMP messages. This is an illegal, but not
uncommon, setup. Typically you will have no chance to fix this (remote,
outside of your control) setup. And sometimes you will have to use such
remote systems (to download data from them, or to do your online banking).
</para>
<para>
Without special care systems as described above will not be able to send
larger chunks of data to a system connected via PPPoE. But there is a
workaround (some may call it cheating): pretend to not be able to handle large
packets, by sending a small MSS (maximum segment size) option during initial
TCP handshake.
</para>
<para>
For connections originating from your PPPoE connected machines, this is 
accomplished by setting the sysctl variable net.inet.tcp.mss_ifmtu to 1,
i.e. by adding this 
</para>

<screen>
# Obey interface MTUs when calculating MSS
net.inet.tcp.mss_ifmtu=1
</screen>

<para>
to <code>/etc/sysctl.conf</code>. For connections originating from systems
behind your PPPoE router, you need to set the mssclamp options in your
NAT rules, like in this example <code>/etc/ipnat.conf</code>:
</para>

<screen>
map pppoe0 192.168.1.0/24 -&gt; 0/32 portmap tcp/udp 44000:49999 mssclamp 1440
map pppoe0 192.168.1.0/24 -&gt; 0/32 mssclamp 1440
</screen>

<para>
See the <ulink url="../#simplenat">NetBSD Networking FAQ</ulink> for more
information about configuring NAT.
</para>

<para>
If you do not use NAT, you need to setup a 1:1 NAT rule, just to get the
clamping:
</para>

<screen>
map pppoe0 x.x.x.x/24 -&gt; 0/0 mssclamp 1440
</screen>

<para>
The above examples assume a MTU of 1492 bytes. If the MTU on your PPPoE
connection is smaller use the MTU - 52 bytes for clamping e.g. 1408 bytes
for a MTU of 1460 bytes.
</para>

<para>
<emphasis role="bold">Note:</emphasis>
The theoretically correct value for the above example would be 1452 bytes
(it accounts for the smaller PPPoE MTU, the TCP header and the maximum
of 0x40 bytes of TCP options) but it seems to not be sufficient in some
cases. Experiments conducted by various people have shown that clamping
to the MSS values suggested above works best.
</para>
</sect3>
</sect2>

<sect2>
<title>Various notes</title>

<sect3 id="t-online">
<title>General information on T-Online account names</title>
<para>
 If you want to dial-in into the german ISP T-Online, the
 two most tricky things are getting the correct username, and
 using a proper chat-script. See the <ulink url="../#ppp">NetBSD Network FAQ</ulink> for a
 general description of how to set up PPP.
</para>

<orderedlist>
  <listitem>
    <para>
      Your login name at T-Online consists of three parts,
      glued together:
    </para>

    <orderedlist>
    <listitem>
      <para>
        Anschlu&szlig;kennung: 12 digit number
        (<emphasis>AAAAAAAAAAAA</emphasis>),
        e.g. 000120123456
      </para>
    </listitem>
    <listitem>
      <para>
        T-Online Nr: 12 digit number (<emphasis>TTTTTTTTTTTT</emphasis>),
        e.g. 3200123456. Often
        starts with "32"; if yours is less than 12 digits,
        add a '#')
      </para>
    </listitem>
    <listitem>
      <para>
        Mitbenutzer-Nummer, usually "0001" (<emphasis>MMMM</emphasis>),
        e.g. 0001
      </para>
    </listitem>
    </orderedlist>
    
    <para>
      Your login is now all three parts put in a row, with no
      separator ("<emphasis>AAAAAAAAAAAATTTTTTTTTTTTMMMM</emphasis>"),
      e.g. 0001201234563200123456#0001. Use this for
      the "<code>user</code>"-line in your PPP options file.
    </para>
  </listitem>
  <listitem>
    <para>
      In the chat-script, you need to pay attention to send a
      "<code>.</code>" after the modem reported a
      <code>CONNECT</code>:
    </para>

<programlisting>
ABORT BUSY    '' AT
              OK ATZ
              OK ATL1
              OK ATD0191011
              CONNECT <emphasis>'.'</emphasis>
</programlisting>

    <para>
      Without this trailing dot, you may be disconnected
      immediately without an answer from the T-Online dialin
      server after your side has sent out the first LCP
      ConfReq frame.
    </para>
  </listitem>
  <listitem>
    <para>
      If you want to use T-Online with T-DSL, be sure to append
      "<code>@t-online.de</code>" for the login,
      e.g. "<code>0001201234563200123456#0001@t-online.de</code>". 
    </para>
  </listitem>
</orderedlist>

<para>
  Here are some (german language) links with more information
  (don't let yourself distract that most of them are not
  for NetBSD - being just another Unix-like operating
  system, these tips usually apply to NetBSD as well):
</para>

<itemizedlist>
  <listitem><para> <ulink url="http://www.linux-user.de/ausgabe/2001/08/018-rp-pppoe/rp-pppoe.html">Gut gebr&uuml;llt - Roaring Penguin Software's DSL-Software</ulink></para>
  </listitem>
  <listitem><para> <ulink url="http://www.albert-rommel.de/ppp.htm">PPP-Zugang
            zu <html:font color="#FF00FF">T</html:font>-Online</ulink></para>
  </listitem>
  <listitem><para> <ulink url="http://home.t-online.de/home/Diedrich.Ehlerding/besonderheiten.html">Netzzugang bei <html:font color="#FF00FF">T</html:font>-Online: Besonderheiten und Einschr&auml;nkungen</ulink></para>
  </listitem>
  <listitem><para> <ulink url="http://sdb.suse.de/sdb/de/html/toppp.html">SuSE:
       T-Online Zugang mit PPP</ulink></para>
  </listitem>
  <listitem> <para><ulink
       url="http://sdb.suse.de/sdb/de/html/t_online3.html">SuSE:
       T-Online: Verbindung wird nicht aufgebaut</ulink></para>
  </listitem>
  <listitem> <para><ulink
            url="http://sdb.suse.de/sdb/de/html/toppp_files.html">SuSE: PPP-Files f&uuml;r T-Online</ulink></para>
  </listitem>
</itemizedlist>
</sect3>


<sect3 id="t-online-isdn-vs-dsl">
<title>T-Online accounts names for ISDN and DSL</title>
<para>
If you have used an ISDN connection to T-Online before, note that T-DSL 
usernames differ from the ISDN ones. The DSL usernames need an additional
<code>@t-online.de</code> suffix, see the
<ulink url="#t-online">General information on T-Online account names</ulink>
section.
</para>
</sect3>

<sect3 id="pppoe-server">
<title>Setting up a PPPoE server</title>
<para>
  What do you do if you want to test PPPoE, but don't have a DSL
  line handy? You set up your own PPPoE server, of course. 
  The &man.pppoe.4; manpage contains pretty much all the information
  needed:

<itemizedlist>
  <listitem> <para>
    Make sure you have "options PPPOE_SERVER" in your kernel
  </para> </listitem>
  <listitem> <para>
    On the server, set the link0 flag on the pppoe0 interface
  </para> </listitem>
  <listitem> <para>
    For the local and remote IP address, set what you want to use
    locally and remote. For example, if you want your server to use
    10.3.3.1 and your client to use 10.3.3.2, use 
    "10.3.3.1 10.3.3.2 up" as last line of your /etc/ifconfig.pppoe0
    file, instead of "0.0.0.0 0.0.0.1 up".
  </para> </listitem>
  <listitem> <para>
    For authentication, be sure to replace the "my" from the client
    with "his" on the server - "myauthproto" on the client has to
    match "hisauthprot" on the server, and so on.
  </para> </listitem>
</itemizedlist>
</para>

<para>
  Here is a full server /etc/ifconfig.pppoe0 file:
  <screen>
create
# Server:
link0
#
! /sbin/ifconfig re1 up
! /sbin/pppoectl -e re1 $int
! /sbin/pppoectl $int hisauthproto=pap hisauthname='foobar@baz.com' hisauthsecret='oink' myauthproto=none
10.3.3.1 10.3.3.3 up
  </screen>
</para>

<para>
  Here is the matching client's /etc/ifconfig.pppoe0 file:
  <screen>
create
! /sbin/ifconfig re1 up
! /sbin/pppoectl -e re1 $int
! /sbin/pppoectl $int myauthproto=pap 'myauthname=foobar@baz.com' 'myauthsecret=oink' hisauthproto=none
0.0.0.0 0.0.0.1 up
  </screen>
</para>
</sect3>

</sect2>
</sect1>
</webpage>
