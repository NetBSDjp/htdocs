<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
  PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-docs-kernel-pseudo-index">
  <config param="desc" value="NetBSD ドキュメンテーション: 擬似デバイスの書き方"/>
  <config param="cvstag" value="$NetBSD: index.xml,v 1.1 2007/06/09 11:33:49 dsieger Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: index.xml,v 1.1 2007/06/09 11:33:49 dsieger Exp   -->
  <config param="rcsdate" value="$Date: 2007/06/09 11:33:49 $"/>
  <head>

  <!-- Copyright (c) 1994-2007
        The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->

    <title>NetBSD ドキュメンテーション: 擬似デバイスの書き方</title>
  </head>

  <sect1 role="toc">
    <sect2 id="pseudo">
      <title>擬似デバイスの書き方</title>

      <sect3 id="intro">
        <title>序説</title>
	
	<para>このドキュメントはカーネルドライバーを書いてみようという方へのガイドです。
	  ここではシンプルな擬似デバイスドライバーの書き方を扱います。
	  カーネルの構築、makefile 関連や新しいカーネルのインストールに関する他の奥義
	  はこれらはこのドキュメントには含まれてなく(別に)必要です。
	  また、カーネルプログラミングそれ自体も含まれていなく
	   - これは、ユーザーレベルプログラミングとは多くの面でとても違います。
	  という断り書きをした上で、この文章を読めば、あなたのコードを
	  カーネルに加えて動作させることができるようになります。</para>
      </sect3>

      <sect3 id="your_code">
        <title>あなたのコード</title>

	<para><ulink
	  url="../../../../docs/kernel/pseudo/pseudo_dev_skel.c">pseudo_dev_skel.c</ulink> ファイルが
	  擬似デバイスとファイルの骨格となります。
	  <ulink
	  url="../../../../docs/kernel/pseudo/pseudo_dev_skel.h">pseudo_dev_skel.h</ulink> では 
	  kernel 関数プロトタイプと ioctl データ構造 と加えて ioctl 番号自体を定義します。
	  注として、普通のデバイスドライバーと違って、
	  擬似デバイスドライバーには、プローブルーチンは必要ないので持っていません。
	  このため、autoconfig フレームワークを扱う必要がなく、話が簡単になります。
	  この skeleton ファイルは擬似デバイスの open, close, ioctl calls をサポートします。
	  これは、実際の擬似デバイスにおいて最低限実用的なコールのセットです。
	  read, write, mmap や ほかの デバイス 関数 をサポートするためのほかのコールもありますが、
	  詳細を除けば全て open, close, ioctl のパターンと同様に扱えます。</para>

	<para>   たぶん、最初の重要な決定は、新しいデバイスをなんと呼ぶかを決めることです。
	  関数コール名の前にデバイス名をくっつけた kernel 構造体をつくるのに
	  便利なマクロがたくさんあることが知られていて、これは
	  作りたいカーネルコンフィグファイルエントリーの助けになるでしょう。
	  config ファイルエントリーはヘッダーファイル名と合わせる必要はありません。
	  この skeleton ドライバー では、 <quote>skeleton</quote> 擬似デバイスと呼ぶ事にしたので
	  skeleton というエントリーを コンフィグファイルに作る事になります。
	  つまり、 attach, open, close, ioctl 関数 呼び出しcall の名前を、それぞれ
	  skeletonattach, skeletonopen, skeletonclose, skeletonioctl とすると言う事です。
	  もう1つの重要なのはデバイスの種類を決めることで -
	  あなたのコードが、カーネルと、もちろん、あなたのコード自体と、どう相互作用するかで
	  キャラクター型 か ブロック デバイス のどちらかにします。
	  ブロック型対キャラクター型のデバイスの決定は、
	  ドライバーが会話する根底の ハードウェアにかなり依存し、
	  もしドライバーがデータの読書きを一定の塊で行なうデバイスなら
	  ブロックデバイスが良い選択で、そのようなデバイスの例として、
	  ハードディスクはたいてい 512 byte セクターをブロックとして読み書きします。
	  ハードウェアが一度に読み書きするのが 1 byte のデータなら、
	  普通、キャラクター型デバイスが最もよい選択で、
	  例えば、シリアルラインドライバーがそうです。
	  注として、いくつかのドライバーはデバイスのアクセスに
	  ブロックモードとキャラクターモードの両方をサポートしていて、
	  この場合、キャラクターモードはしばしば "raw" デバイスと呼ばれます。
	  それは、アクセス時に
	  データブロック抽出操作(the data blocking abstractions operating) なしに
	  ハードウェアのアクセスができるからです。
	  擬似デバイスでは、考慮するべき根底のハードウェアがないので、より柔軟に選べます。
	  擬似デバイスを使ってする内容により選択し、ブロック型デバイスは 
	  ハードディスクやそのようなもののエミュレートには便利でしょう。
	  skeleton ドライバーは キャラクター型デバイスです。</para>

	<para>それを決定したら、コードを編集することができますが、
	  その前にファイルをどこに置くか決めることが必要です。
	  複数のアーキテクチャーで使われる擬似デバイスを書くなら、
	  そのドライバーのコードの置き場は <filename>/usr/src/sys/dev</filename> です。
	  もし擬似デバイスが個別のアーキテクチャーに特有の物なら、
	  ドライバーのコードは個別のディレクトリーの下に置き、
	  i386 の例では、 <filename>/usr/src/sys/arch/i386/i386</filename> です。
	  インクルードファイルについては、
	  アーキテクチャー非依存のデバイスは <filename>/usr/src/sys/sys</filename> に、
	  アーキテクチャー特有のデバイスでは、
	  アーキテクチャー個別のディレクトリーの下の <filename>include</filename> ディレクトリー、
	  例えば i386 アーキテクチャーでは
	  <filename>/usr/src/sys/arch/i386/include</filename> に置くべきです。
	  どちらの場合でも、適切な <filename>Makefile</filename> を更新してください。
	  それで、インクルードファイルがインストールされます。
	  <ulink
	  url="../../../../docs/kernel/pseudo/pseudo_dev_skel.c">pseudo_dev_skel.c</ulink> の先頭に
	  <code>struct
	  skeleton_softc</code> を書いてください。
	  デバイス名に "_softc" が書き添えられた名前で softc 構造体の宣言が必要で、
	  この構造体の最初の要素は <code>struct device</code> 型である必要があり、
	  エントリー名は重要ではありませんが、最初にある必要があり、
	  autoconfig システムが softc struct が宣言されていることをあてにしているから
	  <!-- ??? これ本当 ??? -->で、その最初の要素は struct device です。
	  デバイスハンドル minor 番号 ごとに softc struct が必要です。
	  softc 構造体は minor デバイスがそれを維持する状態の情報を、必要に応じて
	  ただの struct device より多くの要素を持つことができます。</para>

      </sect3>

      <sect3 id="functions">
        <title>関数</title>

	<para>ユーザーレベルプログラムによるアクセスには
	  カーネルインターフェースはデバイスに対しては関数のコールを通して行ないます。
	  デバイスは後に示すように全ての関数をサポートする必要はありませんが、
	  実用的なデバイスは最低限オープンとクローズをサポートする必要はあります。
	  関数名はデバイス名を前につけることを思い出してください。
	  この関数は:</para>

	<orderedlist>
	  <listitem>
	    <para><function>attach()</function></para>
	    <para>この関数はカーネルが初期化するときに一度呼び出されます。
	      これは、あらゆる変数の設定に使われ、
	      後のコールや、バッファーが必要とするカーネルメモリー割り当て
	      で参照されます。
	      attach 関数には引数が一つ渡されます。これはこのドライバーが扱う
	      デバイスの数です。</para>
	  </listitem>
	  <listitem>
	    <para><function>open()</function></para>
	    <para>その名が示すように、ユーザーレベルプログラムが
	      デバイスに対して &man.open.2; コールをした時に呼び出されます。
	      一番簡単な場合、 open 関数は単に success で戻るだけです。
	      より一般に open call は
	      バッファーの要求と可能なら allocate することや
	      他ドライバー関数のコールをサポートするため
	      他のドライバーの状態を初期化することを有効にします。
	      open call は下記のパラメーターが使え:</para>
	    <itemizedlist>
	      <listitem>
	        <para><parameter>dev</parameter></para>
		<para>open しようとするデバイスのマイナー番号。</para>
              </listitem>
	      <listitem>
	        <para><parameter>flags</parameter></para>
		<para>open call に渡されるフラグ</para> <!-- ??? ユーザーによる open call のフラグを素通し ??? -->
	      </listitem>
	      <listitem>
	        <para><parameter>mode</parameter></para>
		<para>open のモード</para> <!-- ??? open のモード ??? -->
	      </listitem>
	      <listitem>
	        <para><parameter>proc</parameter></para>
		<para>オープン要求をしているプロセスの proc 構造体のポインター
                  これは、そのプロセスが
                  信頼できるものである(資格証明を有効にしてよい)ことを示します。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para><function>close()</function></para>
	    <para>open されていたデバイスを close します。
	      ドライバーによって、これはただ単純に success で戻るだけのものだったり、
	      あるいは、割り当てられていたメモリーの解放や
	      ドライバーの状態変数を、もはや open されてはいないと示すように変更する
	      必要があったりします。
	      close 関数呼び出しのパラメーターは、 open で記述したのと同じです。</para>
	  </listitem>
	  <listitem>
	    <para><function>read()</function></para>
	    <para>デバイスからデータを読み出します。
	      この関数のパラメーターは:</para>
	    <itemizedlist>
	      <listitem>
	        <para><parameter>dev</parameter></para>
		<para>デバイスのマイナー番号。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>uio</parameter></para>
		<para> uio 構造体へのポインターです。
		  read 関数は uio 構造体 にユーザーが欲しいデータを満たして戻ります。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>flags</parameter></para>
		<para>flags</para> <!-- ??? wuffor ??? -->
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para><function>write()</function></para>
	    <para>デバイスにデータを書きこみます。
	      write 関数 のパラメーターは、 read 関数のものと同じで - ただ、違うのは
	      uio 構造体はデバイスに書きこまれるデータを含んでいることです。</para>
	  </listitem>
	  <listitem>
	    <para><function>ioctl()</function></para>
	    <para>デバイスに ioctl をします。
	      ioctl call のパラメーターは:</para>
	    <itemizedlist>
	      <listitem>
	        <para><parameter>dev</parameter></para>
		<para>デバイスのマイナー番号。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>cmd</parameter></para>
		<para>実行される ioctl コマンドです。
                  このコマンドはヘッダーファイル内で定義され
                  カーネルコードおよびユーザーレベルコードが参照します。
                  例は<ulink url="../../../../docs/kernel/pseudo/pseudo_dev_skel.c">サンプルのヘッダー</ulink>を見てください。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>data</parameter></para>
		<para>ユーザーレベルコードで使えるパラメーターのポインターです。
                  このパラメーターは ioctl の実装と、実際に発行されたコマンドに依存します。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>flags</parameter></para>
		<para>flags</para> <!-- ??? wuffor ??? -->
	      </listitem>
	      <listitem>
	        <para><parameter>proc</parameter></para>
		<para>ioctl 要求を出したユーザーレベルプロセスに関連する
                  proc 構造体 です。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para><function>stop()</function></para>
	    <para>tty 様式デバイスで出力を停止します。</para>
	    <itemizedlist>
	      <listitem>
	        <para><parameter>tty</parameter></para>
		<para>デバイスに結び付けられた tty</para>
	      </listitem>
	      <listitem>
	        <para><parameter>flags</parameter></para>
		<para>flags</para> <!-- ??? -->
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para><function>poll()</function></para>
	    <para>デバイスからデータが読めるかチェックします。
	      パラメーターは:</para>
	    <itemizedlist>
	      <listitem>
	        <para><parameter>dev</parameter></para>
		<para>デバイスが使っているマイナー番号。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>events</parameter></para>
		<para>ユーザーレベルコールがポーリングするイベント。</para>
	      </listitem>
	      <listitem>
	        <para>proc</para>
		<para>ioctl 要求を出したユーザーレベルプロセスに関連する
		  proc 構造体 です。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	  <listitem>
	    <para><function>mmap()</function></para>
	    <para>ドライバーのバッファーをユーザーレベルプログラムのメモリー空間に mmap する
	      権限をサポートします。パラメーターは:</para>
	    <itemizedlist>
	      <listitem>
	        <para><parameter>dev</parameter></para>
		<para>デバイスが使っているマイナーデバイス番号。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>offset</parameter></para>
		<para>mmap 開始時のバッファーの先頭からのオフセット。</para>
	      </listitem>
	      <listitem>
	        <para><parameter>prot</parameter></para>
		<para>mmap の挙動のタイプで、
                  読みこみ専用、書きこみ専用、読み書き可能かのいずれかです。
                  デバイスドライバーは全てをサポートする必要はありません。</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</orderedlist>

	<para>このデバイスドライバーがサポートする関数を、
	  キャラクター型デバイス用の <code>struct cdevsw</code> と
	  <code>struct bdevsw</code> のいずれかまたは両方に含める必要があります。
	  この構造体の名前は、モジュール名の後に <code>_cdevsw</code> または <code>_bdevsw</code>
	  を付けたものです。
	  ここで例示する疑似デバイスは、キャラクター型デバイスとしてのみふるまうので、
	  構造体の名前は <code>skeleton_cdevsw</code> とします。
	  なお、この構造体には、すべてのデバイスインターフェース関数のエントリーがありますが、
	  デバイス側で実装するのは、この関数の一部分だけでかまいません。
	  使われないスタブ関数をすべてのデバイスに実装させるのではなく、
	  頭に <code>no</code> がついた (たとえば <code>noread</code>,
	  <code>nowrite</code> など)、
	  あらかじめ宣言されたスタブが用意されており、これらは呼ばれた時に <code>ENODEV</code>
	  または、何の操作もせずに成功を返す <code>null</code>
	  (たとえば <code>nullread</code>, <code>nullwrite</code>
	  など) を返します。
	  cdevsw や bdevsw にある関数でドライバーがサポートしていないものに対しては、
	  あらかじめ宣言されたスタブのものを使うだけです。</para>

      </sect3>

      <sect3 id="newdevice">
        <title>カーネルに新しいデバイスを知らせる</title>

	<para>擬似デバイスのコーディングをしたら、
	  アクセスできるよう、カーネルに組み込みます。
	  注として、カーネルが擬似デバイスを組みこむ方法は
	  通常のデバイスの場合と、いろいろ違います。
	  擬似デバイスは、通常のデバイス検出と auto-configuration を飛ばし、
	  実行時の代わりにソースレベルでカーネル構造体の中にエントリーを作ったり
	  そうではなかったりするからです。
	  カーネルがあなたのコードを使うようにするには、
	  これらのファイルを変更する必要があって:</para>

        <orderedlist>
	  <listitem>
	    <para><filename>/usr/src/sys/conf/majors</filename> or
	      <filename>/usr/src/sys/&lt;arch&gt;/conf/majors.&lt;arch&gt;</filename></para>

	    <para>この各ファイルには、
	      &os; におけるデバイスメジャー番号のリストが含まれます。
	      <filename>/usr/src/sys/conf/majors</filename> にあるのは、機種独立なデバイス、すなわち
	      &os; が対応しているすべてのアーキテクチャーで利用可能なデバイスのメジャー番号です。
	      デバイスが特定のアーキテクチャーにのみ関連するものである場合は、
	      <filename>/usr/src/sys/&lt;arch&gt;/conf/majors.&lt;arch&gt;</filename>
	      (&lt;arch&gt; は、関連するアーキテクチャーに置き換えます)
	      ファイルを使う必要があります。
	      この各ファイルに含まれるエントリーは、以下の形式をとります。</para>

	    <programlisting>
device-major    prefix		type      number	condition</programlisting>
	    <para>この行の正確な文法は、
	      &man.config.5; マニュアルページで説明されていますが、
	      ここで例示するドライバーのためにその内容を説明しておきます。</para>

	    <itemizedlist>
	      <listitem>
	        <para>device-major</para>
		<para>このエントリーが、
		  デバイスメジャー番号のエントリーであることを示すキーワードです。</para>
	      </listitem>
	      <listitem>
	        <para>prefix</para>
		<para>すべてのドライバーの関数に対して、
		  関数名が自動生成される時に与えられる接頭辞です。
		  ここでの例においては、
		  <code>skeleton</code> とします。</para>
	      </listitem>
	      <listitem>
	        <para>type</para>
		<para>メジャーデバイスの型で、
		  <code>char</code> または <code>block</code> のいずれかです。
		  char と block それぞれの type と number の組を繰り返し書くことで、
		  両方の型のデバイスを指定することができます。</para>
	      </listitem>
	      <listitem>
	        <para>number</para>
		<para>デバイスのメジャー番号です。次の空いている番号を選びます。
		  なお、<filename>/dev</filename> にデバイスノードを作る必要があるので、
		  選んだ番号を控えておきます。</para>
	      </listitem>
	      <listitem>
	        <para>condition</para>
		<para>このデバイスがカーネルに含まれる条件です。
		  これは、conf ファイル (後述)
		  に含めた疑似デバイスのエントリーと一致させるようにします。</para>
	      </listitem>
	    </itemizedlist>

	    <para>ここで例示する skeleton 疑似デバイスは、キャラクター型デバイスとし、
	      ドライバーは i386 アーキテクチャーに依存するものとします。
	      このような仮定をしたので、
	      <filename>/usr/src/sys/arch/i386/conf/majors.i386</filename>
	      ファイルを編集すればよいことになります。すると、
	      メジャー番号 140 が使えることがわかるので、以下のような行を追加します。</para>
	    <programlisting>
device-major	skeleton	char	140	skeleton</programlisting>
	  </listitem>
	</orderedlist>
      </sect3>

      <sect3 id="config">
        <title>&man.config.1; に新しいデバイスを知らせる</title>

	<para>&man.config.1; に新しい擬似デバイスを知らせるには、
	  <filename>/usr/src/sys/conf/files</filename> (アーキテクチャー独立なデバイスの場合) または
	  <filename>/usr/src/sys/arch/&lt;arch&gt;/conf/files.&lt;arch&gt;</filename>
	  (&lt;arch&gt; は関連するアーキテクチャー) のいずれかのファイルを編集します。
	  このファイルは  有効な デバイスの名前 と
	  これらのデバイスと関連するファイルを config に教えます。
	  最初に擬似デバイスを定義するセクションを捜します。
	  この セクションは <code>defpseudo</code> で始まる行を持っています。
	  ここでは、ドライバーはアーキテクチャー依存であることを仮定しているので、
	  <filename>/usr/src/sys/arch/i386/conf/files.i386</filename>
	  を編集します。
	  正しいセクションを見つけると、こういう行を加えることができ:</para>

	<programlisting>
defpseudo skeleton</programlisting>

        <para>&man.config.1;に skeleton という擬似デバイスがあることを教えます。
	  つぎに、 &man.config.1; に skeleton 擬似デバイスに関連するファイルを教えてあげる必要があります。
	  この場合はひとつのファイル
	  があるだけですが、より複雑な擬似デバイスでは より多くのファイルがあるかもしれず、
	  同じ方法で必要とされるファイルごとに行を単純に追加していきます。
	  例では、このような1行が必要なだけで:</para>

	<programlisting>
file dev/skeleton.c	   skeleton	needs-flag</programlisting>

        <para>行中の <code>file</code> はデバイスとファイルの関係の定義 
	  を書くためのキーワードです。
	  2番目のフィールドは、ファイルの
	  カーネルソースツリールートからの相対位置 (通常、
	  <filename>/usr/src/sys</filename>) です。
	  3番目のフィールドはドライバー名でこのファイルが関連しているもので、
	  この場合 skeleton - サンプル擬似デバイスです。
	  4番目 で 最後の フィールド は &man.config.1; に
	  <filename>skeleton.h</filename> インクルードファイルを書かせるための制御フラグです。
	  ここでファイル名が <filename>skeleton.c</filename> になっていますが、例示したファイルを使った場合、
	  ファイル <filename>pseudo_dev_skel.c</filename> を
	  <filename>skeleton.c</filename> にリネームするか、このエントリーを
	  (<filename>pseudo_dev_skel.c</filename> に) 変更するかする必要がありますので注意してください。
	  上述のとおり、私たちはこれを skeleton と呼んでいるので、ここは
	  <filename>skeleton.c</filename>
	  としたほうがおそらく素直でしょう。</para>

	</sect3>

	<sect3 id="kernelconfig">
	  <title>カーネルコンフィグファイルに新しいデバイスを追加する</title>

	  <para>&man.config.1; にデバイスのことを教えてやったあと、
	    そのデバイスをカーネルコンフィグファイルに追加することは簡単です。
	    skeleton デバイスを追加するには、このような行を加え:</para>

	  <programlisting>
pseudo-device  skeleton</programlisting>

          <para>カーネルコンフィグファイルには、
	    前節での <code>defpseudo</code> 行で与えられた名に揃えた
	    擬似デバイス名を書きます。
	    
	    新しい定義は
	    <code>options</code> カーネルコンフィグファイル キーワードをつかうことで、
	    カーネル makefile に追加することができ、
	    config は <command>cc</command> コマンドに対し
	    <option>-D</option> コマンドラインオプションを指定した
	    makefile を作ります。</para>
	    
	</sect3>

	<sect3 id="userlevel">
	  <title>ユーザーレベルプログラムが新しいデバイスにアクセスすることを許す</title>

	  <para>新しいカーネルを構築しインストールした後、
	    最後にすることとして、新しい擬似デバイスにアクセスできるように
	    デバイスノードを作る必要があります。
	    そのデバイスノードはアクセスすることができる
	    どんなファイルシステム上に作ることもできますが、
	    慣習によって、 デバイスノードは
	    <filename>/dev</filename> に作られます。
	    デバイスノード をつくるために &man.mknod.8;を使う必要があり、
	    4.i 節で書きとめた major 番号で デバイスノード を作ります。
	    この場合、 &man.mknod.8; コマンドでこのようにでき:</para>

	  <screen>&rprompt; <userinput>mknod /dev/skel c 140 0</userinput></screen>

	  <para>これで、新しいデバイスをオープンして試すことができます。
	    <ulink
	    url="../../../../docs/kernel/pseudo/sample.c">sample.c</ulink> ファイルは
	    skeleton 擬似デバイスが元気であることを示します。
	    このファイルは、ここにある指示に従っていて
	    <filename>/dev/skel</filename> が作られていると仮定していて、
	    このデバイスはオープンされ、パラメーター構造体は
	    ioctl call でデバイスドライバーに移されます。
	    サンプルコードをコンパイルするには、コマンドラインで:</para>
	    
	  <screen>&uprompt; <userinput>cc -o sample sample.c</userinput></screen>

	  <para>これで、 sample というバイナリーができるでしょう。
	    <emphasis>注意:</emphasis> ヘッダーファイル置き場で、
	    <filename>pseudo_dev_skel.h</filename> を入れた
	    システムインクルードファイルのディレクトリーで
	    <command>make includes</command> をする必要があります。
	    さもなければ、コンパイラーはインクルードファイルが見つからないと訴えるでしょう。
	    プログラムをコンパイルして実行すると、
	    カーネルメッセージがコンソールと
	    <filename>/var/log/messages</filename> の両方に現われ、
	    それはこのようなもので:</para>

	  <programlisting>
May 17 20:32:57 siren /netbsd: Got number of 42 and string of Hello World</programlisting>

          <para>SKELTEST ioctl 要求を受けた時に skeleton ioctl ハンドラーが表示する
	    メッセージです; この番号と文字列は <filename>sample.c</filename> の <code>param</code>
	    構造体の中に入れてあったものです。</para>

	</sect3>
    </sect2>
  </sect1>

  <parentsec url="../" text="&os; ドキュメンテーション: カーネル"/>
  
</webpage>
