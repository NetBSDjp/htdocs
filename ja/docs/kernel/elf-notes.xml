<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
 PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-docs-kernel-elf-notes">
<config param="desc" value="ベンダー特有の ELF 記号"/>
<config param="cvstag" value="$NetBSD: elf-notes.xml,v 1.2 2007/11/19 00:14:19 martin Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: elf-notes.xml,v 1.2 2007/11/19 00:14:19 martin Exp   -->
<config param="rcsdate" value="$Date: 2007/11/19 00:14:19 $"/>
<head>

<!-- Copyright (c) 1994-2007
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->

<title>NetBSD ドキュメンテーション: ベンダー特有の ELF 記号要素(Note Elements)</title>
</head>

<sect1 role="toc">
  <sect2 id="introduction">
    <sect3 id="introduction-sub">
    <title>序</title>
      <para>
	さまざまなオペレーティングシステムベンダーが
	異なるシステムコールインターフェースを要求する ELF バイナリー
	を出荷しています。
	オペレーティングシステムが ELF プログラムが実行できるかどうか、
	どうやって実行するか(例えば どの OS エミュレーションを使うのか)を
	正しく決定する手助けのために、
	いくつかのオペレーティングシステムのベンダーは
	ELF バイナリーの <constant>PT_NOTE</constant> セクションにベンダー特有の記号要素 (note elements) 
	を付け始めました。
      </para>
      <para>
	このページは、バイナリーの <constant>PT_NOTE</constant> セクションで
	オペレーティングシステムの識別のために使われているベンダー特有の記号要素
	についての知識の宝庫にしようと思います。
      </para>

      <para>
	もし、あなたのオペレーティングシステムが
	ベンダー特有記号要素
	をバイナリーのマークに使っていて、ここの一覧に載っていないなら、
	<ulink url="mailto:cgd@NetBSD.org">Chris Demetriou</ulink>
	まで、その記号の情報をメールしてください。(訳注:たぶん英文で)
      </para>
    </sect3>
    <sect3 id="note-format">
      <title>ELF Note Element のフォーマット</title>

      <para>
	全ての ELF Note Element は同じ基本構造を持っていて:
	<variablelist class="elf-note">
	  <varlistentry>
	    <term><varname>Name Size</varname></term>
	    <listitem>4 bytes (整数)</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc Size</varname></term>
	    <listitem>4 bytes (整数)</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Type</varname></term>
	    <listitem>4 bytes (たいてい整数として解釈されます)</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Name</varname></term>
	    <listitem>可変長, 4 byte 境界で詰め物をされた</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc</varname></term>
	    <listitem>可変長, 4 byte 境界で詰め物をされた</listitem>
	  </varlistentry>
	</variablelist>
      </para>
      
      <para>
	"Name" , "Desc" 各フィールドの(詰め物を除いた)サイズの決定をする 
	"Name Size" , "Desc Size" 各フィールドは
	整数型 (バイトオーダーはバイナリーの ELF ヘッダーに指定されています)です。
      </para>
    
      <para>
	Name field は ベンダー が記号のフォーマットに基づいて指定します。
	一般的に、 ベンダーはプロジェクトや会社名に関連した名前を使います。
	例えば、 GNU project はその名前に "GNU" を使います。
	ELF Note Name は、note の意味を解釈しようという時混乱するといけないので、
	どの 2つの ベンダーも同じ物を使わないようにするべきです。
      </para>
      
      <para>
	"Type" フィールドはベンダー特有ですが、記号の特定において、
	たいてい整数型として扱われます。
      </para>
      
      <para>
	"Desc" フィールドはベンダー特有で、
	たいてい記号の型に依存するデータが含まれています。
      </para>
    </sect3>
    
    <sect3 id="note-names">
      <title>知られている ELF 記号名</title>

      <para>
	下記は ELF 記号名として使われている事が知られている文字列と
	それを使っている組織です。
	記号名の語長が 4 の倍数で無いものは 詰め物で埋められますが、
	与えられた長さだけを調べるようにするべきです。
      </para>
      
      <segmentedlist>
	<segtitle>Note Name 文字列</segtitle>
	<segtitle>文字列のバイト毎のエンコーディング</segtitle>
	<segtitle>語長</segtitle>
	<segtitle>組織</segtitle>
	<?dbhtml list-presentation="table"?>
	<seglistitem>
	  <seg><code>"NetBSD\0"</code></seg>
	  <seg><code>0x4e 0x65 0x74 0x42 0x53 0x44 0x00</code></seg>
	  <seg>7</seg>
	  <seg><xref linkend="note-contents-netbsd" /></seg>
	</seglistitem>
	<seglistitem>
	  <seg><code>"GNU\0"</code></seg>
	  <seg><code>0x47 0x4e 0x55 0x00</code></seg>
	  <seg>4</seg>
	  <seg><xref linkend="note-contents-gnu" /></seg>
	</seglistitem>
      </segmentedlist>
    </sect3>
  <sect3 id="note-contents">
    <title>ベンダー特有 ELF 記号</title>
      
    <para>
      この節にはベンダーが <constant>PT_NOTE</constant> セクションで使っていて、 
      ベンダー別に異なっている ELF 記号のフォーマットに関する情報が含まれています。
    </para>

    <sect4 id="note-contents-netbsd" xreflabel="The NetBSD Project">
      <title>The NetBSD Project</title>
      
      <para>
	NetBSD には2つの ベンダー特有の ELF 記号があって、
	OS バージョン記号とエミュレーション Name 記号です。
	前者は、どの OS バージョンの native バイナリーかを示すのに使われ、
	native バイナリーを識別するのにも使えます。
	後者は、実行時にどのエミュレーションコードセットを使えば良いかを示す名前と共に、
	バイナリーを (native と 非-native の)マークするのに使われます。
      </para>
      <para>
	NetBSD OS バージョン 記号 のフォーマットは:
	
	<variablelist class="elf-note">
	  <varlistentry>
	    <term><varname>Name Size</varname></term>
	    <listitem>7</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc Size</varname></term>
	    <listitem>4</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Type</varname></term>
	    <listitem>4-byte 整数 <code>0x01</code> という値が入っている</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Name</varname></term>
	    <listitem><code>"NetBSD\0"</code> (8 byte に合わせて詰め物がされています)</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc</varname></term>
	    <listitem>4-byte 整数 NetBSD OS バージョン定数が入っている</listitem>
	  </varlistentry>
	</variablelist>
      </para>

      <para>
	NetBSD エミュレーション Name 記号 のフォーマットは:
	<variablelist class="elf-note">
	  <varlistentry>
	    <term><varname>Name Size</varname></term>
	    <listitem>7</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc Size</varname></term>
	    <listitem>variable</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Type</varname></term>
	    <listitem>4-byte 整数 <code>0x02</code> という値が入っている</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Name</varname></term>
	    <listitem><code>"NetBSD\0"</code> (8 byte に合わせて詰め物がされています)</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc</varname></term>
	    <listitem>バイナリーを実行するのに使うエミュレーションを表す、
	    ナル (<code>NUL</code>) 文字で終わる文字列
	    (次の4バイト境界まで詰め物された)</listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect4>

    <sect4 id="note-contents-gnu" xreflabel="The GNU Project">
      <title>The GNU Project</title>

      <para>
	glibc 2.1 以降では、 GNU project は 
	GNU オペレーティングシステム とどのバージョンのシステムで構築されたバイナリーか
	を示すのに、単一の ELF Note を使い、
	そのフォーマットは:
	<variablelist>
	  <varlistentry>
	    <term><varname>Name Size</varname></term>
	    <listitem>4</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc Size</varname></term>
	    <listitem>16</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Type</varname></term>
	    <listitem>4-byte 整数 <code>0x01</code> という値が入っている</listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Name</varname></term>
	    <listitem><code>"GNU\0"</code></listitem>
	  </varlistentry>
	  <varlistentry>
	    <term><varname>Desc</varname></term>
	    <listitem>
	      4 個の 4-byte 整数。順序は以下のとおり:
	      <orderedlist>
		<listitem>OS (0 = Linux, 1 = Hurd, 2 = Solaris)</listitem>
		<listitem>Major</listitem>
		<listitem>Minor</listitem>
		<listitem>Teeny</listitem>
	      </orderedlist>
	      major, minor, teeny は、この ABI をサポートする OS バージョンで最も古いもののバージョン。
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>

      <para>
	GNU C ライブラリーでの ELF notes の使い方について、さらなるドキュメンテーションは、
	<ulink url="http://sources.redhat.com/cgi-bin/cvsweb.cgi/libc/abi-tags?cvsroot=glibc">abi-tags</ulink>
	および
	<ulink url="http://sources.redhat.com/cgi-bin/cvsweb.cgi/libc/csu/abi-note.S?cvsroot=glibc">csu/abi-note.S</ulink>
	のソースを調べてください。
      </para>
    </sect4>
  </sect3>
  
    <sect3 id="note-creation">
      <title>ELF <constant>PT_NOTE</constant> セクションの作成</title>

      <para>
	バイナリーを作るために、 GNU binutils 2.8 かそれ以降を使っていれば、
	最終版のオブジェクトファイルに <constant>PT_NOTE</constant> セクションを生成することができます。
	<constant>PT_NOTE</constant> セクションを作るには、
	オブジェクトファイルの一つ
	(デフォルトで <constant>PT_NOTE</constant> エントリーを生成するシステムでは、
	これは一般的にランタイムのスタートアップコードです) に
	名前が ".note" で始まり "allocate" 属性セットを持つセクションをつくります。
	このセクションに、 ELF Note エントリーを適切な形で書きます。
	最終的なリンクが終わったとき、 ".note" で始まる名前をもち、かつ
	"allocate" とマークされた全セクションは、
	最終オブジェクトファイルにおいて、
	<constant>PT_NOTE</constant> セクション内に配置されるでしょう。
      </para>
      <para>
	GNU アセンブラーの例では、
	最終リンク時に <constant>PT_NOTE</constant> セクションを作る入力物は:
      </para>
<programlisting language="assembler">
    .section ".note.ident", "a"
    .p2align 2
    .long 1f - 0f           # name サイズ (詰め物含まず)
    .long 3f - 2f           # desc サイズ (詰め物含まず)
    .long 0x01234567        # type
0:  .asciz "NaMe"	    # name
1:  .p2align 2
2:  .long 0x76543210        # desc
    .long 0x89abcdef
3:  .p2align 2
</programlisting>

<para>
  この例では ".note.ident" と呼ばれ、 "allocate" とマークされた、
  (最終リンク時に <constant>PT_NOTE</constant> セクションと変わる)
  1つの note を含むセクションを作るでしょう。
  この note は <varname>type</varname> が
  <code>0x012345678</code> (訳注9桁???)、 <varname>name</varname> が
  <code>"NaMe\0"</code> で、
  <varname>desc</varname> 値は、2つの 4-byte 整数、<code>0x76543210</code> と
  <code>0x89abcdef</code> です。
</para>
    </sect3>
    
    <sect3 id="netbsd-note">
      <title>NetBSD ELF <constant>PT_NOTE</constant> セクションの作成</title>
      
      <para>
	NetBSD カーネルは、 ELF バイナリー中に <constant>PT_NOTE</constant> セクションが見つからない場合に
	ENOEXEC を返します。通常、ネイティブ NetBSD アプリケーション用の
	PT_NOTE セクションは <filename>crtbegin.c</filename>
	に含まれています。以下に示す例は、  NetBSD/sparc でこのセクションを作成するものです。
	(他のポート、たとえば arm では @ はコメントの開始を意味するために %note を使うなど、
	アセンブラーの文法が若干異なることがありますが、
	エンディアンの違いを除けば、個々の断片はすべて同じです)
      </para>
<programlisting language="assembler">
        .section ".note.netbsd.ident", "", @note
        .long   2f-1f
        .long   4f-3f
        .long   1
1:      .asciz "NetBSD"
2:      .p2align 2
3:      .long   499003600
4:      .p2align 2
</programlisting>
    </sect3>
  </sect2>
</sect1>
</webpage>

