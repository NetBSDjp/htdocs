<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE webpage
  PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-docs-kernel-programming">
  <config param="desc" value="NetBSD ドキュメンテーション: カーネルプログラミング FAQ"/>
  <config param="cvstag" 
    value="$NetBSD: programming.xml,v 1.2 2008/05/31 10:43:42 tsutsui Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: programming.xml,v 1.2 2008/05/31 10:43:42 tsutsui Exp   -->
  <config param="rcsdate" value="$Date: 2008/05/31 10:43:42 $"/>
  <head>

    <!-- Copyright (c) 1994-2005
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
    
    <title>NetBSD ドキュメンテーション: カーネルプログラミング FAQ</title>
  </head>


  <sect1 role="toc">
    <sect2 id="misc">
      <title>Misc</title>

      <sect3 id="knf">
	<title>KNF とは何ですか</title>

	<para>KNF は Kernel Normal Form の略で、
	  <filename>/usr/share/misc/style</filename> に記述されている
	  C のコーディングスタイルです。ソースツリーに <filename role="cvsweb">src/share/misc/style</filename>
	  として含まれています。</para>
      </sect3>

      <sect3 id="packed-attribute">
	<title>pack された属性を使用する</title>
	
	<para>wire プロトコルデータフォーマットを記述する構造体の中では、いつも
	  <code>`pack'</code> された属性を使用しています。</para>
      </sect3>

      <sect3 id="printf">
	<title>デバッグのための <code>printf()</code> の使い方</title>

	<para>カーネルドライバーのデバッグ用の情報を出力するもっとも簡単な方法は、
	  <code>printf()</code> を使うことでしょう。カーネルの printf は コンソールに出力
	  されるので、多く出力しすぎ、システムが使いものにならないように注意
	  しなければなりません。</para>
      </sect3>

      <sect3 id="forcing-ddb">
	<title>強制的に DDB に落とす</title>

	<para>カーネルのコンフィグファイルが '<code>options DDB</code>' を
	  含んでいる事を確認してください。
	  ファイルに '<code>#include "opt_ddb.h"</code>' を記述し、
	  '<code>Debugger()</code>' を使ってください。</para>
      </sect3>

      <sect3 id="adding_a_new_driver">
	<title>カーネルに新しいドライバーを追加する</title>

	<para>全てのドライバーは、すくなくとも以下の二つの関数を必要とします。
	  <itemizedlist>
	    <listitem><code><emphasis>xxx</emphasis>probe()</code> (
	      NetBSD
	      がデバイスの存在を調べる時)</listitem>
	    <listitem><code><emphasis>xxx</emphasis>attach()</code>
	      ルーチンはデバイスを設定、
	      アタッチします。</listitem>
	  </itemizedlist>
	</para>

	<para>プローブとアタッチルーチンを書いたら、
	  <filename>/usr/src/sys/arch/&lt;your-arch&gt;/&lt;your-arch&gt;/conf.c</filename>
	  にエントリーを追加してください。そこには以下の二つのテーブルがあります。</para>
	
	<para>
	  <itemizedlist>
	    <listitem><code>cdevsw</code> キャラクターデバイス用。</listitem>
	    <listitem><code>bdevsw</code> ブロックデバイス用
	      (ブロックI/O
	      とストラテジー・ルーチンとして使用する)。</listitem>
	  </itemizedlist></para>

	<para>ほとんどのエントリーは <code>cdev_<emphasis>xxx</emphasis>_init()</code> という形式と
	  なります。これは標準的な Unix のデバイススイッチルーチンのプロトタイプ
	  のためのマクロです。</para>

	<para>プローブとアタッチルーチンはブート時によばれます。
	  <code>open()</code>、<code>close()</code>、<code>read()</code>、
	  <code>write()</code> ルーチンは、メジャー番号がテーブルのインデックス
	  に一致するデバイススペシャルファイルがオープンされた時によばれます。
	  例えば、メジャー番号18 のデバイスをオープンした場合、<code>cdevsw[]/bdevsw</code>
	  の中のデバイス番号18の "open" ルーチンがよばれます。</para>

	<para>ほとんどのドライバーはバス固有のアタッチコードとマシン独立のコアに分割
	  されています。例えば、PCI lance イーサネットドライバーは以下のファイルで
	  構成されています。

	  <itemizedlist>
	    <listitem><filename
		role="cvsweb">src/sys/dev/pci/files.pci</filename>
	      - アタッチ情報 ('le at pci'を見てください)。</listitem>
	    <listitem><filename role="cvsweb">src/sys/dev/pci/if_le_pci.c</filename> 
	      - ドライバーのためのPCI バスのアタッチのコード。</listitem>
	  </itemizedlist>
	</para>
	
	<para>
	  <itemizedlist>
	    <listitem><filename role="cvsweb">src/sys/conf/files</filename>
	      - MI コアのアタッチ情報('le:'を見てください)。</listitem>
	    <listitem><filename role="cvsweb">src/sys/dev/ic/am7990.c</filename>
	      - MI ドライバー、24ビットアクセスのコード。</listitem>
	    <listitem><filename role="cvsweb">src/sys/dev/ic/am79900.c</filename>
	      - MI ドライバー、32ビットアクセスのコード。</listitem>
	  <listitem><filename role="cvsweb">src/sys/dev/ic/lance.c</filename>
	      - MI コアのドライバーのコード。</listitem>
	  </itemizedlist>
	</para>

	<para><ulink 
	    url="#autoconf">autoconf の説明</ulink>もご覧ください。</para>
      </sect3>

      <sect3 id="autoconf">
	<title>この autoconf の素材は、どのように動作するのか?</title>
	
	<para>autoconf の仕組みは、その動作方法を一度理解してしまえば非常に単純なものです。
	  実行時にデバイスプローブツリーがどのように構築されて使われるのかについて、
	  正確な詳細は無視したいのであれば、
	  個々の<quote>葉</quote>のドライバーに関して必要なことは以下のとおりです。
	  
	  <orderedlist>
	    <listitem>各ドライバーは、 3 個の構成要素からなる構造体を規定します -
	      構成要素は、そのプライベート構造体のサイズ、プローブ関数、アタッチ関数です。
	      これはコンパイルされて実行時に使われます - たとえば以下のようになります:
	      <programlisting>
struct cfattach foo_baz_ca = {
    sizeof(struct foo_baz_softc), foo_baz_match, foo_baz_attach
};</programlisting></listitem>
	    <listitem>カーネル起動に際して、このデバイスをアタッチする時に、
	      autoconf のコードはデバイスのプローブルーチンを呼んで、
	      親へのポインター (<code>struct device *parent</code>)・
	      アタッチタグ構造体へのポインター (<code>void *aux</code>)・
	      適切な autoconf ノード (<code>struct cfdata *cf</code>) を渡します。
	      ドライバーは、呼ばれるべき場所かどうかを判断することになっています
	      (通常、ロケーションおよびコンフィギュレーション情報がアタッチタグによって渡されます)。
	      そこがしかるべき場所だった場合は、プローブルーチンは 1 を返すべきです。
	      もしデバイスがそこになければ、プローブルーチンは 0 を返す必要があります。
	      いずれの場合も、<emphasis role="bold">いかなる状態も保持されてはいけません</emphasis>。</listitem>
	    
	    <listitem>プローブが成功して戻ると、 autoconf は、デバイスの *_ca
	      で指定されたサイズのメモリー塊を割り当て、そのデバイスのアタッチルーチンを呼んで、
	      親へのポインター (<code>struct device *parent</code>)・
	      今割り当てたメモリーへのポインター(<code>struct device *self</code>)・
	      アタッチタグ構造体へのポインター (<code>void *aux</code>) を渡します。
	      ドライバーは、正確なポートとメモリーを見つけ出し、資源を割り当て、
	      これに応じてドライバー内の構造体を初期化することになっています。
	      ドライバーのインスタンスに固有な情報は、
	      極力、ここで割り当てられたメモリーに保持すべきです。</listitem>
	  </orderedlist>
	</para>
	
	<para>例: PCI イーサネットドライバー 'baz' を考えましょう。
	  カーネルコンフィグは以下のようになっています:
	  <programlisting>
pci*    at mainbus?
baz*    at pci? dev ? function ?</programlisting>

	  実行時、 autoconf はマシンの PCI バス上の物理デバイスすべてに対して
	  繰り返し実行されます。各物理デバイスに対して、 autoconf は、
	  pci バス上にあることがカーネルに設定されているすべてのデバイスの
	  ドライバーのプローブルーチンを呼ぶことを繰り返します。
	  いずれかのプローブルーチンがそのデバイスについて 1 を返すと、
	  autoconf はこれを中止し、上述の 3) で説明した作業をおこないます。
	  アタッチ関数が戻ると、 autoconf は次の物理デバイスの処理を続けます。</para>
	
	<para><ulink 
	    url="#adding_a_new_driver">カーネルに新しいドライバーを追加する</ulink>もご覧ください。</para>
      </sect3>
      
      <sect3 id="adding_a_system_call">
	<title>システムコールを追加する</title>
	
	<para><code>syscalls.master</code> にエントリーを追加し、syscall スタブを
	  <code><filename role="cvsweb">src/lib/libc/sys/Makefile.inc</filename></code>
	  の適当な場所に追加してください。</para>
	<para>さらなる情報は、<ulink
	    url="../../../docs/internals/en/">
	    NetBSD Internals Guide</ulink> 内の <ulink
	    url="../../../docs/internals/en/chap-processes.html#syscall_howto">
            HOWTO</ulink> および関連ドキュメンテーションをご覧ください。
	</para>
      </sect3>
	
      <sect3 id="adding_a_sysctl">
	<title>sysctl を追加する</title>
	
	<para><ulink 
	    url="http://mail-index.NetBSD.org/tech-kern/">tech-kern</ulink>
	  メーリングリストに、この質問への答えが<ulink
	    url="http://mail-index.NetBSD.org/tech-kern/2001/06/24/0000.html">投稿</ulink>
	  されているので、そちらを参照してください。</para>
	
	<para>なお、 NetBSD 1.6 とそれ以降では、ベンダー特有の項目用として、
	  特別な <quote>vendor</quote> カテゴリーが予約されています。さらなる情報は
	  &man.sysctl.8; を参照してください。</para>
      </sect3>
      
      <sect3 id="mmap_in_pseudo-device">
	<title>仮想デバイスに &man.mmap.2; を実装する方法</title>
	
	<para>あなたの作ったデバイスは、おそらくキャラクターデバイスでしょう。もし、
	  そうであれば、デバイスページャーを使っているはずです。(VM システムは、
	  これらすべてを隠蔽しているので、心配しないでください)。</para>
	
	<para>最初に、mmap インターフェースのために、適当なオフセットをいくつか選
	  んでください。例えば「mmap オフセット 0-M は オブジェクトAをあたえる、
	  N-O はオブジェクト B をあたえる」等のように。</para>
	
	<para>これが終ると、mmap ルーチンは以下のように実装できます。
	  <programlisting>
int
foommap(dev_t dev, int off, int prot)
{

        if (off &amp; PAGE_MASK)
                panic("foommap");

        if ((u_int)off &gt;= FOO_REGION1_MMAP_OFFSET &amp;&amp;
            (u_int)off &lt; (FOO_REGION1_MMAP_OFFSET + FOO_REGION1_SIZE))
                return (atop(FOO_REGION1_ADDR + ((u_int)off -
                    FOO_REGION1_MMAP_OFFSET)));

        if ((u_int)off &gt;= FOO_REGION2_MMAP_OFFSET &amp;&amp;
            (u_int)off &lt; (FOO_REGION2_MMAP_OFFSET + FOO_REGION2_SIZE))
                return (atop(FOO_REGION1_ADDR + ((u_int)off -
                    FOO_REGION2_MMAP_OFFSET)));

        /* Page not found. */
        return (-1);
}</programlisting></para>

	  <para>さて、実際には単純なカーネルメモリーオブジェクトを mmap するので、
	    コードはもうすこし複雑になります(結局は仮想デバイスですから)。</para>
	  
	  <para>これを動作させるためには、アロケートしたメモリーオブジェクトをページ調整
	    された境界に確実に mmap しなければなりません。もし、アロケートしたメモリー
	    のサイズ &gt;= <code>PAGE_SIZE</code> なら、これは保証されます。そうでなければ、
	    <code>uvm_km_alloc()</code> を使い、アロケーションサイズをページサイズに切りあげてください。</para>
	  
	  <para>若干の修正を加えると以下のようになります。
	    <programlisting>
int
foommap(dev_t dev, int off, int prot)
{
        paddr_t pa;

        if (off &amp; PAGE_MASK)
                panic("foommap: offset not page aligned");

        if ((u_int)off &gt;= FOO_REGION1_MMAP_OFFSET &amp;&amp;
            (u_int)off &lt; (FOO_REGION1_MMAP_OFFSET + FOO_REGION1_SIZE)) {
                if ((vaddr_t)foo_object1 &amp; PAGE_MASK)
                        panic("foommap: foo_object1 not page aligned");
                if (pmap_extract(pmap_kernel(), foo_object1 +
                    (u_int)off - FOO_REGION1_MMAP_OFFSET, &amp;pa) == FALSE)
                        panic("foommap: foo_object1 page not mapped");
                return (atop(pa));
        }

        if ((u_int)off &gt;= FOO_REGION2_MMAP_OFFSET &amp;&amp;
            (u_int)off &lt; (FOO_REGION2_MMAP_OFFSET + FOO_REGION2_SIZE)) {
                if ((vaddr_t)foo_object2 &amp; PAGE_MASK)
                        panic("foommap: foo_object2 not page aligned");
                if (pmap_extract(pmap_kernel(), foo_object2 +
                    (u_int)off - FOO_REGION2_MMAP_OFFSET, &amp;pa) == FALSE)
                        panic("foommap: foo_object2 page not mapped");
                return (atop(pa));
        }

        /* Page not found. */
        return (-1);
}</programlisting></para>
      </sect3>
      
      <sect3 id="accessing_a_kernel_structure_from_userland">
	<title>ユーザーランドからカーネルの構造体へアクセスする</title>
	
	<para>良い例が  <code>
	    <filename role="cvsweb">src/usr.bin/vmstat/dkstats.c</filename></code>
	  にあります。ここではディスクの統計情報を読んでいます。</para>
      </sect3>
      
      <sect3 id="sample_driver">
	<title>参考にできそうな簡単な PCI ドライバーはありませんか</title>
	<para><filename>sys/dev/pci/puc.c</filename> を参考にしてください。これは、最も簡単なドライバーの
	  ひとつです。PUC は、ひとつ以上のシリアル、パラレルポートを持つデバイス
	  で、通常、標準的なチップを使用しています(例えば、シリアルの 16550 UART)。
	  ドライバーは、単に シリアル、あるいはパラレルコントローラーのレジスター
	  の I/O アドレスをさがし、それをシリアル、またはパラレルドライバーへ渡す
	  だけです。</para> 
      </sect3>
      
      <sect3 id="other-related-links">
	<title>他の関連するリンク</title>
	
<itemizedlist>
	  <listitem>&man.driver.9; - デバイスドライバーが利用する
	    NetBSD の自動コンフィギュレーションのインターフェース</listitem>
	  <listitem>&man.autoconf.9; - NetBSD の自動コンフィギュレーションフレームワークについての
	    全般的な説明</listitem>
	  <listitem>&man.config.9; - 自動コンフィギュレーションフレームワークの
	    「デバイス定義」言語</listitem>
	  <listitem>&man.bus.dma.9; - NetBSD のバスとマシン独立な DMA フレームワーク、
	    これに関する<ulink
	      url="../../../docs/kernel/bus_dma.pdf">論文</ulink> (64k, PDF)</listitem>
	  <listitem>&man.bus.space.9; - NetBSD
	    のバススペースの操作のためのインターフェース</listitem>
	  <listitem><ulink url="../../../docs/kernel/scsidma.html">SCSI DMA
	      はどのように動作するか</ulink> - Tohru Nishimura による</listitem>
	  <listitem><ulink url="lazyfpu.html">lazy FPU
	      コンテキストスイッチはどのように動作するか</ulink> - Tohru Nishimura による</listitem>
	  <listitem><ulink
	      url="../../../docs/kernel/converting-ethernet-drivers.html">昔の BSD のイーサネットドライバーの NetBSD-1.2D 以降への移植</ulink></listitem>
	  <listitem><ulink
	      url="porting-freebsd-net.html">FreeBSD のネットワークドライバーを NetBSD に移植するためのメモ</ulink></listitem>
	</itemizedlist>
      </sect3>
    </sect2>
  </sect1>
  
  <parentsec url="./" text="NetBSD ドキュメンテーション: カーネル"/>
  
</webpage>
