<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
 PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-docs-current-index">
<config param="desc" value="Tracking NetBSD-current"/>
<config param="cvstag" value="$NetBSD: index.xml,v 1.8 2009/09/21 15:09:47 tsutsui Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: index.xml,v 1.8 2009/09/21 15:09:47 tsutsui Exp   -->
<config param="rcsdate" value="$Date: 2009/09/21 15:09:47 $"/>
<head>

<!-- Copyright (c) 1994-2005
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->

    <title>NetBSD-currentの追跡</title>
</head>

<sect1 role="toc">

<sect2 id="faq">
<title>よくある質問</title>

<sect3 id="why-track">
<title>なぜ NetBSD-current を追跡するのか?</title>
<para>
NetBSDの開発者はそのときどきの開発中のソースをいくつかの理由から一般に
公開してきました。まず、NetBSD-currentを用意することで、より安定した、
利用しやすいシステムを作ることができます。
</para>
<para>
これにより、NetBSDの開発に熱中するのが容易になります。最新の開発中ソー
スを配布することで、システムが今どうなっているのかが多くの人に明らかに
なりますし、新機能が実装されればすぐにそれを試してみることができます。
</para>
<para>
また、利用者からの変更を統合するのも楽になります。もし利用者が最新の開
発中ソースに対して変更を加えたならば、その変更をマスターソースツリーに
取り込むための作業は事実上要らなくなります。
</para>
<para>
また、そうすることでソフトウェアが開発されてすぐに広い範囲のテストをす
ることができます。NetBSD-currentの利用者は最新のソースについての<ulink
url="../../support/send-pr.html">バグレポート</ulink>を出すことが奨励されます。
これはバグを見つけたり修正したりする助けになります。ソフトウェアが書か
れてからすぐに多くの人がそれをテストするために、より多くのバグを見つけ
出して退治することができます。
</para>
</sect3>

<sect3 id="installing">
<title>current スナップショットのインストール</title>
<para>
current を手っ取り早く使い始めるには、
リリースエンジニアリングサーバーで作られるスナップショットから始めます。
各プラットフォームの最新の構築状況は、
<ulink url="http://releng.NetBSD.org/cgi-bin/builds.cgi">
NetBSD Autobuild
</ulink>
で見ることができ、実際に構築されたものは、日付およびプラットフォーム別に
<ulink url="http://nyftp.NetBSD.org/pub/NetBSD-daily/HEAD/"/>
以下に置かれています。
</para>
<para>
<orderedlist>
<listitem> 必要な <code>binary/sets</code> ディレクトリーを探し、
ファイルを <code><emphasis role="bold">mget *.tgz</emphasis></code>
して、ローカルの管理用ディレクトリー
(たとえば <emphasis><code>$HOME/current</code></emphasis> ) に置きます。
ディスクスペースや時間が足りない場合は、
必要不可欠なのは kern-GENERIC, etc, base, comp (コンパイラーが必要な場合) だけです。</listitem>
<listitem> 適切なカーネル (通常は <code>GENERIC</code>) を展開して
<code>/</code> にコピーし、そのカーネルでマシンを再起動します。
<programlisting>
    $ su
    # cd /root
    # tar -zxpf ~/kern-GENERIC.tgz
    # ln -fh /netbsd /netbsd.old
    # cp netbsd /netbsd
    # shutdown -r now
</programlisting>
<para>
  <emphasis role="bold">注意: 新しいカーネルでマシンを再起動するまでは、
  ユーザーランドのバイナリーは一切展開してはいけません。</emphasis>
  新しいバイナリーでは、新しいシステムコール (動作中の古いカーネルでは非対応)
  を使っているかもしれないからです。
</para>
</listitem>
<listitem> 新しいカーネルが、問題なく起動して動作することを確認します。
新しいカーネルに問題がある場合は、名前を変えた古いカーネルをロードして、
元に戻すことができます。
</listitem>
<listitem> <code>base</code> ほか一連の必要なもの
(<emphasis role="bold"><code>etc</code> は除く</emphasis>) を展開し、
配置します。
<programlisting>
    $ su
    # cd /
    # tar -zxpf ~/base.tgz
    # tar -zxpf ~/comp.tgz
    # ...
</programlisting>
&man.tar.1; コマンドの <code>"p"</code> オプション (許可属性の保持)
を忘れずに指定してください。そうしないと、setuid されたコマンド (&man.su.1; など)
が動作しません。
<para>
  <emphasis role="bold">注意: 既存のシステムに対して <code>etc.tgz</code>
  を展開すると、独自におこなった設定が上書きされてしまいます。</emphasis>
</para>
</listitem>
<listitem> 最後に、 <code>/etc</code>
を <ulink url="#etcupdate">更新</ulink> します。
&man.postinstall.8; は、最初の検査をし、自動的に修正できることはほとんど修正してくれます。
その次にある &man.etcupdate.8; は、どのようにマージするかたずねてきます。
<programlisting>
    # /usr/sbin/postinstall -s ~/etc.tgz check
    # /usr/sbin/postinstall -s ~/etc.tgz fix
    # /usr/sbin/etcupdate -s ~/etc.tgz
    # shutdown -r now
</programlisting>
X 配布セット (xbase など) をインストールしている場合は、
リブートする前に、postinstall と etcupdate の引数を xetc.tgz にして、
同様の手順を繰り返します。
</listitem>
</orderedlist>
</para>
<para>
以上で、
current に近い状態になり、
current のソースを構築する準備ができました。
</para>
</sect3>

<sect3 id="downloading">
<title>current ソースのダウンロード</title>
<para>

伝統的に、
システムソースファイルは <code>/usr/src</code> に置くものですが、
これには一般的に root 権限が必要です。
現在の <code><emphasis role="bold">build.sh</emphasis></code> プロセスは、特権がまったくなくても実行可能です。
ただし、インストールについては root 権限が必要です。
このドキュメントの例示で <code>/usr/src</code> としているところはすべて、
(<emphasis><code>$HOME/current</code></emphasis> のような)
別の場所に置き換えてもかまいません。
</para>
<para>
<orderedlist>
<listitem> ソースツリーの置き場を選びます。
<programlisting>
    $ cd /usr
    $ su
</programlisting>
</listitem>
<listitem> -current ソースを、最寄りの
<ulink url="../../mirrors/">NetBSD ミラーサイト</ulink>
からダウンロードします。
<itemizedlist>
<listitem> <ulink
url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/tar_files/src/">
/pub/NetBSD/NetBSD-current/tar_files/src/</ulink> から ftp で、
または、</listitem>
<listitem> <ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/README.sup">sup</ulink> を使って。
</listitem>
</itemizedlist>
<para>
ダウンロードしたファイルは、ソースツリーのスナップショットになっています。
最新のファイルにするために、
<ulink
url="#using-anoncvs">anoncvs</ulink> を使って以下のようにします。
<programlisting>
    $ cd /usr/src
    $ cvs -q -d $CVSROOT update -dP
</programlisting>
</para>
<para>
<code>-d $CVSROOT</code> は、あなたが選んだミラーサイトの CVS
タグをつけるため、初めて update する場合のみ必要です。
<code>-P</code> フラグは必ず毎回指定するか、または .cvsrc ファイルに追加してください。
</para>
<para>
もし、NetBSD のソースに対するローカルな変更を追跡したいならば、
ローカルな CVS ツリーをセットアップし、<ulink url="#using-sup-into-cvs">sup 
で行なわれた変更を import</ulink> した方が良いでしょう。
</para>
</listitem>

<listitem>
パーミッションを修正します。<html:br/>
ソースツリーを、 (伝統的な) wsrc グループに属する
root 以外のユーザーが保守できるようにしたい場合は、
(root になって) 以下のようにします。
<programlisting>
$ chown -R <emphasis>user</emphasis>:wsrc /usr/src
$ chmod -R u=rwX,g=rwX,o=rX /usr/src</programlisting>
</listitem>

</orderedlist>
</para>
</sect3>

<sect3 id="building">
<title>ソースからリリースの構築</title>
<para>

<emphasis><ulink
url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/BUILDING">src/BUILDING</ulink> を見て、
最新の変更点を確認するのを忘れないようにしてください。</emphasis>
</para>
<para>
伝統的に、
システムオブジェクトファイルは <code>/usr/obj</code> に置くものですが、
これには一般的に root 権限が必要です。
そうするかわりに、オブジェクトファイルを別のファイルシステムに置くことで、
コンパイルにおける速度をかなり向上させることができます。
このドキュメントの例示で <code>/usr/src</code> としているところはすべて、
(<emphasis><code>$HOME/current</code></emphasis> のような)
別の場所に置き換えてもかまいません。
<orderedlist>
<listitem> オブジェクトツリーの置き場を選ぶ。
フルインストールに加えてリリース用の tarfile 一式を置けるだけの
十分な容量が必要です。
<programlisting>
    $ cd /usr/src
    $ su
    # mkdir ../tools
    # mkdir ../obj
</programlisting>
</listitem>
<listitem> ソースツリーのルートに移動し、そこで実行する。
<programlisting>
    $ cd /usr/src
    $ ./build.sh -O ../obj -T ../tools -u -U release
</programlisting>
</listitem>
</orderedlist>
</para>
<para>
この例において、
<code>-u</code> オプションは、構築開始前に <code>make clean</code>
を実行する必要がないことを表しています。これは、以前構築したものの更新や、
新規の構築をおこなう場合に便利です。
</para>
<para>
<code>-U</code> オプションは、 root でないユーザーによる完全なビルドができるようにするものです。
</para>
<para>
完了すると、
インストールメディアとノートを含む、インストールに必要なものがすべて、
<code>build.sh</code> が指定 (表示されます) したディレクトリー
以下に出来上がります。
</para>
<para>
異なるアーキテクチャー用に
<ulink url="../../../docs/guide/en/chap-build.html">クロスコンパイル</ulink>
をおこないたい場合は、 build.sh 実行時に
'<code>-m MACHINE -a ARCH</code>' オプションをつけます。
</para>
<para>
より詳しくは、
'<code>./build.sh -h</code>' を実行するとともに、
<ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/BUILDING">
/usr/src/BUILDING</ulink> を参照してください。
</para>
</sect3>

<sect3 id="updating">
<title>既存システムのアップデート</title>
<para>

<emphasis><ulink
url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/UPDATING">src/UPDATING</ulink> を見て、
最新の変更点を確認するのを忘れないようにしてください。</emphasis>
</para>
<para>
<orderedlist>
<listitem> ソースツリーのルートに移動する。
<programlisting>$ cd /usr/src</programlisting>
</listitem>
<listitem>toolchain を構築する。
<programlisting>$ ./build.sh -O ../obj -T ../tools -U -u tools</programlisting>
</listitem>
<listitem>配布物を構築する。
    <programlisting>$ ./build.sh  -O ../obj -T ../tools -U -u distribution</programlisting>
</listitem>
<listitem>カーネルを構築する。
    <programlisting>$ ./build.sh  -O ../obj -T ../tools -U -u kernel=GENERIC</programlisting>
</listitem>
<listitem>カーネルをインストールする。
<programlisting>
    $ cd ../obj/sys/arch/&lt;ARCH&gt;/compile/GENERIC
    $ su
    # mv /netbsd /netbsd.old
    # cp netbsd /netbsd
</programlisting>
</listitem>
<listitem>新しいカーネルでリブートする。
    <programlisting># shutdown -r now</programlisting>
</listitem>
<listitem>新しいユーザーランドをインストールする。
<programlisting>
    $ cd /usr/src
    $ su
    # ./build.sh -O ../obj -T ../tools -U install=/
</programlisting>
</listitem>
<listitem>古くなったファイルの修正のため、出力される説明に従う。たとえば以下のように。
<programlisting>
    # /usr/src/usr.sbin/postinstall/postinstall -s /usr/src -d // fix defaults mtree obsolete
</programlisting>
</listitem>
<listitem>/etc の<ulink url="#etcupdate">更新</ulink>
<programlisting># /usr/sbin/etcupdate -s /usr/src</programlisting>
</listitem>
<listitem>動作中のサービス群がすべて新しいバイナリーを使うようにするため、リブートする。 (これはしなくてもよい)
    <programlisting># shutdown -r now</programlisting>
</listitem>
</orderedlist>
</para>
<para>
この例において、
<code>-u</code> オプションは更新プロセスを表し、
<code>-U</code> オプションは、 root でないユーザーによる完全なビルドができるようにする
(その後に root でインストールする) ものです。
</para>
<para>
構築の順序 (tools, distribution, kernel) は、問題が起きた場合に、
ソース更新にかかる時間を常に最適化するために選ばたものです。
一貫性を保つため、
エラーが起きた場合や cvs update した場合は、
必ず上述の過程の最初からやり直してください。
</para>
<para>
より詳しくは、
<ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/UPDATING">
/usr/src/UPDATING</ulink> を参照してください。
</para>
</sect3>

<sect3 id="what-to-do">
<title>覚えておくべきこと</title>

<itemizedlist>
 <listitem>
  <para>
  より新しいバージョンの-currentにアップグレードするときは、どれかの新しい
  ライブラリー(<ulink url="#star">*</ulink>)をインストールする前に<emphasis>必ず</emphasis>
  新しいカーネルをコンパイルし、それで起動していなければなりません。
  一般的にもっともよいのは他のどれよりも先に新しいカーネルを試し、何か問
  題にぶつかったら<ulink
  url="../kernel/#problems_compiling_a_current_kernel">
  カーネル FAQ</ulink>を参照することです。
  </para>
  <para>
  カーネルが動き出したらソースツリーの一番上の
  <ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/BUILDING">BUILDING</ulink>.

  ファイルを一読し、 build.sh スクリプトを使って新しいユーザーランドを
  作るといいでしょう。
  </para>
 </listitem>
 <listitem>
  -current のカーネルをコンパイルする際には、常に
  COMPAT_&lt;最新のリリース&gt; オプション (例えば COMPAT_16)
  を含めるのを忘れないでください。current が最新の安定版リリース
  からかけはなれていくと互換性のコードが加えられますが、
  このオプションが設定されている時だけ有効になります。
  少なくとも、この互換性のためのコードは、新しいカーネルをブートして、
  <code>build.sh</code> による構築が終了するまでは必要です。
 </listitem>
 <listitem>
  NetBSD-currentを使っている人は<emphasis role="bold"><ulink
  url="../../mailinglists/#current-users">current-users</ulink></emphasis>
  メーリングリストに参加することを強く薦めます。<emphasis role="bold"><ulink
  url="../../mailinglists/#source-changes">source-changes</ulink></emphasis>
  を読むのも興味深いでしょう。
  </listitem>
</itemizedlist>
<para id="star">

*: もし新たなシステムコールが追加されていないことが
確かでなければ、とりあえずこうしてください。それがより安全です。
</para>
</sect3>

<sect3 id="build-targets">
<title>Makefileのいろいろなターゲットは?</title>
<para>

'build.sh' スクリプト (ソースディレクトリーの最上層にあります)
を使った新しい toolchain の使い方に関する詳しいドキュメンテーションについては、
'<code>./build.sh -h</code>' を実行するとともに、
<ulink url="ftp://ftp.NetBSD.org/pub/NetBSD/NetBSD-current/src/BUILDING">
/usr/src/BUILDING</ulink> を参照してください。
</para>
<para>
<emphasis role="bold">注意:</emphasis>
<emphasis>
toolchain が新しくなったことにより、 'make build' という使い方はもはや無用のものになりました。
使ってはいけません。
</emphasis>
</para>
<para>
<code>build.sh</code> を使って初めてシステムの構築をする場合には、
この先でコンパイルに使うツール一式も構築されます。
その後に作られるものはすべて、すでに構築済のツールを再利用することになるので、
所要時間は初回より短くなります。
</para>
<para>
もちろん、 <code>./build.sh build</code> が成功しない限り
<code>./build.sh install=/</code> を実行してはいけません。
さもないと、動作しないシステムをもとに作業が進められてしまう可能性があります。
</para>
</sect3>

<sect3 id="using-anoncvs-pserver">
<title>anoncvs の使用</title>
<para>
 
<emphasis>
ここでは暗号化されていない anoncvs 接続について説明します。
暗号化プロトコルを使いたい場合は、
<ulink url="#using-anoncvs-over-ssh">後述の項目</ulink>を参照してください。
</emphasis>
<orderedlist>
<listitem><filename role="pkg">devel/scmcvs</filename> をインストールします。
<emphasis>もし NetBSD が 2000-09-04 以降の -current のソースから構築されていれば、
cvs はすでにインストールされています。</emphasis>
</listitem>
<listitem>環境変数 CVSROOT を お好きな <ulink url="../../mirrors/#anoncvs">anoncvs
サーバー</ulink>を指すように設定します。
<itemizedlist>
    <listitem>&man.csh.1; または <filename 
    role="pkg">shells/tcsh</filename> ユーザーの方:
<programlisting># setenv CVSROOT :pserver:anoncvs@anoncvs.NetBSD.org:/cvsroot</programlisting>
</listitem>
    <listitem>For &man.sh.1;, &man.ksh.1;, または <filename 
    role="pkg">shells/bash2</filename> ユーザーの方:
<programlisting>$ CVSROOT=:pserver:anoncvs@anoncvs.NetBSD.org:/cvsroot; export CVSROOT</programlisting>
    </listitem>
</itemizedlist>
</listitem>
<listitem>
<programlisting>$ cd /usr
$ cvs login</programlisting>
(パスワードとして "anoncvs" を使用してください)
</listitem>
</orderedlist>
</para>
<para>
最初の checkout の際にはディレクトリーに対する書き込み権限が必要です。
その後、ソースツリーの所有者を他のユーザーに変更できます。一つの方法は
最初のチェックアウトは root で行ない、その後の使用のために
ソースツリー全体を他のユーザーの所有に変更することです。
</para>
</sect3>

<sect3 id="using-anoncvs-over-ssh">
<title>anoncvs over ssh の利用</title>
<para>
<ulink url="#using-anoncvs-pserver">anoncvs の利用</ulink>で説明した方法は、取り寄せた
ソースが正しいものであることを保証するため、 ssh 上でも使うことができます。
ただし、
そうすることで anoncvs サーバーにはかなりのオーバーヘッドがかかります。
</para>
<para>
<ulink url="../../mirrors/#anoncvs">ミラー一覧</ulink>に載っている
ssh 接続に対応したサーバーでは、各項目ごとに、必要な情報を列挙しています。
</para>
<para>
通常、 cvsroot の冒頭の ':pserver:' を削除し、
お使いのシェルに応じた方法で、変数 CVS_RSH を
'ssh' に設定します。
</para>
</sect3>

<sect3 id="using-anoncvs">
<title>anoncvs を用いた NetBSD-current の追跡</title>

<sect4 id="setting-up">
<title>セットアップ</title>

<itemizedlist>
<listitem>カーネルのみをチェックアウトする
<programlisting>$ cd /usr
$ cvs checkout -P src/sys</programlisting>
<para>
これにより、カーネルのソースは <code>/usr/src/sys</code> に用意されます。
<ulink url="../kernel/#how_to_build_a_kernel">カーネルの作り方</ulink>に
関する情報は別のページで提供されています。
</para>
</listitem>
<listitem><para>ソースツリー全体をチェックアウトする(カーネルも含みます)
<programlisting>$ cd /usr
$ cvs checkout -P src</programlisting>
</para>
<para>
これにより、NetBSD ソースの全体が /usr/src に用意されます。
</para>
<note>
<title>注意</title>
<para>最初に「ソース全体」のチェックアウトをするときは、
<ulink url="#downloading">tarball を FTP で取得</ulink>してローカルで展開するほうが、
たいてい速くなります。こちらのほうがネットワークリンクをもっともよく使うからです。
そうした後に cvs checkout/update を使うと、変更部分のみを送ることになり、
送られるバイト数が最小限になります。
</para>
</note>
</listitem>

<listitem>パーミッションの修正<html:br/>
    もしソースツリーを root 以外のユーザーの所有にしたければ
    (root で)次のようにして下さい。
<programlisting># chown -R <emphasis>user</emphasis> /usr/src</programlisting>
</listitem>
</itemizedlist>
</sect4>

<sect4 id="update-sources">
<title>ソースの更新</title>

<orderedlist>
<listitem>カーネルソースのみを更新する
<programlisting>$ cd /usr/src/sys
$ cvs update -dP</programlisting>
</listitem>
<listitem>ソースツリー全体を更新する
<programlisting>$ cd /usr/src
$ cvs update -dP</programlisting>
</listitem>
</orderedlist>
<para>
<emphasis role="bold">注意:</emphasis> <code>cvs checkout -d dir src</code> (あるいは、他の src*
モジュールに対する同様のコマンド) を実行しても動作しません。
"existing repository ... does not match ...; ignoring module _gnusrc-cmp"
等のエラーメッセージが出ます。回避するには、 <code>-d</code> オプションを外して
cvs がデフォルトのディレクトリーを作るようにします。
</para>
</sect4>

<sect4 id="checkout-by-date">
<title>特定の日付のソースをチェックアウトするには次のようにして下さい</title>
<programlisting>$ cvs checkout -D 20020501-UTC src</programlisting>
</sect4>

<sect4 id="checkout-by-branch">
<title>特定の枝のソースをチェックアウトするには</title>
<programlisting>$ cvs checkout -rnetbsd-1-6 src</programlisting>
CVS リポジトリーに含まれる各ブランチの説明については、
<ulink url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/doc/BRANCHES?rev=HEAD&amp;content-type=text/x-cvsweb-markup">src/doc/BRANCHES</ulink>
を参照してください。
</sect4>

<sect4 id="hints">
<title>有用なヒント</title>
<itemizedlist>
<listitem>
cvs の '-z' フラグは使わないでください。使った場合、データストリームが同期せず、
クライアント側でソースが壊れたり、クライアントが完全にハングアップしたりします。
さらに、 cvs サーバーに余計な負荷がかかります。
</listitem>
<listitem>ツリー内のあるブランチをチェックアウトしたい場合に、
このブランチ用に新しいディレクトリーを作って、既存のディレクトリーが上書きされないように
慎重を期したい方もいるでしょう:

<programlisting>$ cd /parent/dir/to/checkout/into
$ mkdir NewName-temp
$ cd NewName-temp
$ cvs checkout ... src
$ mv src ../NewName
$ cd ..
$ rmdir NewName-temp</programlisting>
</listitem>
<listitem>
cvs による更新が正しく実行できるようにするためには objdirs を
使用する必要があります。もし、cvs から
<programlisting>   cvs [update aborted]: could not chdir to gnu/usr.bin/gdb/gdb: Not a directory</programlisting>
のようなエラーメッセージを受けたならば、 <code>make cleandir</code> を
実行して、もう一度試して下さい。cvs による更新の後、
<code>make obj</code> を実行するのを忘れないように。
</listitem>
<listitem>
<para>

特定のコマンドに対するスイッチはホームディレクトリーの .cvsrc に
記述しておけば、自動的に使われます。.cvsrc ファイルの例を
掲げておきます。
</para>

<programlisting> update -dP
   checkout -P
   diff -u</programlisting>
</listitem>
</itemizedlist>
</sect4>

<sect4 id="building-from-source">
<title>ソースからの NetBSD の構築</title>
<para>
<emphasis>(すでに、最新の NetBSD バイナリースナップショットと /usr/src に
ソースがインストールされていると仮定します; また、 BSDOBJDIR は
/usr/obj であると仮定します。):</emphasis>
</para>
<para>
はじめてユーザーランドを構築する場合:
<programlisting># mkdir /usr/obj
# cd /usr/src
# ./build.sh -O /usr/obj -D /usr/NetBSD-new-build -T /usr/tools build
# ./build.sh -O /usr/obj -D /usr/NetBSD-new-build -T /usr/tools install=/
</programlisting>
</para>
<para>
build.sh を使って初めてシステムの構築をする場合には、
この先でコンパイルに使うツール一式も構築されます。
その後に作られるものはすべて、すでに構築済のツールを再利用することになるので、
所要時間は初回より短くなります。
</para>
<para>
もちろん、 <code>./build.sh build</code> が成功しない限り
<code>./build.sh install=/</code> を実行してはいけません。
さもないと、動作しないシステムをもとに作業が進められてしまう可能性があります。
</para>
<para>

CVS update の後、ユーザーランドのバイナリーを更新する場合:

<programlisting># cd /usr/src
# ./build.sh -D /usr/NetBSD-new-build -O /usr/obj -T /usr/tools -u build
# ./build.sh -D /usr/NetBSD-new-build -O /usr/obj -T /usr/tools -u install=/
</programlisting>

これらによって、新しいバイナリーが実行されたシステムにインストールされます。
新しいバイナリーが全て有効になるようにリブートしてください。
</para>
<para>

あなたがシステムを頻繁に更新しており、動作中のシステムを直接更新したい場合は、
<emphasis>熟練者</emphasis>モードを使って DESTDIR=/ で構築することができます。
たとえば次のようにします:

<programlisting># ./build.sh -E -O /usr/obj -T /usr/tools -u build</programlisting>

これは<emphasis role="bold">熟練</emphasis>ユーザー専用の方法であり、これを実行するだけで
システムが何も構築できない状態になってしまう可能性があることに注意してください。
構築が最後まで成功すると<emphasis role="bold">確信できる</emphasis>
場合にのみ、この方法を使ってください。
</para>
</sect4>
</sect3>

<sect3 id="using-sup-into-cvs">
<title>SUP と CVS の組合せによる NetBSD-current の追跡</title>

    <sect4 id="sup-overview">
<title>概要</title>

    <para>currentは次の方法により追跡できます。基準となるソースのコピーを、
       標準的にはほぼ週に一回SUPを使い最新の状態に維持します。そして、
       この基準となるソースツリーを、ローカルのCVSリポジトリーにインポー
       トします。そして、リポジトリーのコピーをチェックアウトし、それ
       からcurrentを作成します。</para>

    <para>このアプローチには3つの主要な理由があります。
    <orderedlist>
      <listitem>いつどのようにcurrentが更新されたか追跡するため。</listitem>
      <listitem>ローカルの変更をほとんど自動的に更新されたcurrentソースにマー
        ジできるようにするため。</listitem>
      <listitem>構築するときの問題に備えて、いつもまったく変更していない
	NetBSD-currentのソースツリーがあることを保証するため。</listitem>
    </orderedlist>
    </para>
    
    <para>このアプローチの短所は、3つの独立のソースツリーのために、実際の
      currentの構築に必要な空きを含めないで、およそ150MBのディスクスペー 
      スが必要なところです。
    </para>
    </sect4>

    <sect4 id="sup-requirements">
<title>必要なもの</title>
    <itemizedlist>
      <listitem>CVS 1.9かそれ以降(もし、あなたが 2000-09-04 以降の -current 
	を使用していればすでにインストールされていますし、
	そうでない場合は pkgsrcか、ソースから構築のどちらでも構いません)。
	マージが上手なのでCVS 1.10かそれ以降が望ましいでしょう。</listitem>
      <listitem>SUP</listitem>
      <listitem>Perl 5(任意)附属スクリプトのため</listitem>
    </itemizedlist>
    </sect4>
    <sect4 id="sup-details">
<title>詳説</title>
    <para>currentの追跡と構築は、6つの段階からなります:
    <orderedlist>
      <listitem>マスターソースツリーにSUPでソースを更新します。</listitem>
      <listitem>SUPしたファイルをCVSにインポートし、ソースの作業用コピーを更
        新します。</listitem>
      <listitem>作業用ソースとSUPしたソースとをマージします。</listitem>
      <listitem>currentを構築してインストールします。</listitem>
      <listitem>構築に成功したソースにタグをつけます。</listitem> 
    </orderedlist>
    </para>
    </sect4>
    </sect3>

    <sect3 id="supping-sources">
<title>ソースのSUP</title>
    <para>ソースは、どのNetBSD SUPサーバーからもSUP可能です。またSUPの出
      力は後の参照のためにファイルに保存するべきです。
    </para>
    </sect3>

    <sect3 id="import-merge">
<title>ソースのインポートとマージ</title>
    <para>ソースのインポートは次のように行ないます:</para>
<programlisting>$ cvs -d /misc/cvsrep import -I ! -I CVS netbsd netbsd current-<emphasis>date</emphasis></programlisting>

    <para><emphasis>date</emphasis>は追跡のためにSUP時の日付と置き換えます。
      <code>-I ! -I CVS</code> オプションは、
      ソースツリー中の 'CVS' ディレクトリーを除く全てのファイルが
      無視されないことを保証します。これはNetBSDのソースファイルに、通
      常CVSにより無視される拡張子のものがいくつかあるからです。もしロー
      カルのパッチと衝突がある場合、importコマンドはそれらを出力し、衝
      突をマージするためのコマンドを次のように出力します:</para>
<programlisting>$ cvs checkout -jnetbsd:yesterday -jnetbsd netbsd</programlisting>
    <para>このマージコマンドは、インポートされたNetBSDソースを正確にマー
      ジするためのものですが、SUPにより削除されたファイルは、ローカル
      に反映されません。これを行なうためのマージコマンドはこうなるでしょ
      う:</para>
<programlisting>$ cvs update -j<emphasis>previous import tag</emphasis> -j current-<emphasis>date</emphasis></programlisting>
    <para><emphasis>previous import tag</emphasis>は前回のCVSインポートで使用したタグ名
      と置き換えます。<emphasis>date</emphasis>は、今マージしたばかりのcurrentのイン
      ポートに使用したタグ名を利用できるようにするために、現在の日付と
      置き換えます。</para>
    <para>importコマンドにより表示される衝突は、衝突の可能性のあるもので
      す。これらは、通常updateコマンドによりマージされますが、いくつか
      の場合、実際に衝突を引き起こします。この場合、衝突行を手動でマー
      ジすることが必要です。実際に衝突がある場合、cvs update時に、
      <code>C</code>に続きファイルネームが表示されます。</para>
    <para>手作業による衝突のマージは単純作業ではありませんが、多くの場合、
      ファイルへ行なったローカルの変更を削除し、元のNetBSDソースコード
      に似せてやることで解決します。</para>
    <para>CVSは衝突を次のように表します:</para>
<programlisting>
&lt;&lt;&lt;&lt;&lt;&lt;
  <emphasis>ローカルファイルのコード</emphasis>
======
  <emphasis>インポートしたファイルのコード</emphasis>
&gt;&gt;&gt;&gt;&gt;&gt; <emphasis>新たにインポートされるリビジョンのローカルリビジョン番号</emphasis>
</programlisting>

    <para>もしimportコマンドが何の衝突を表示しない場合でも、チェックアウ
      トしたツリーのコピーは衝突した場合と同じ方法で更新できます。</para>
    <para>updateとcheckoutコマンドはすべて、チェックアウトしたソースのディ
      レクトリーで行なってください。私のシステムでは、これは
      <code>/usr/src/netbsd</code>です。</para>
    <para>もし、これが最初のインポートならば、チェックアウトしたソースは
      ないでしょう。'<code>/usr/src/netbsd</code>'にソースツリーを作り
      たいと仮定すると、次のコマンドでソースをチェックアウトします。マー
      ジ作業は必要ありません。</para>
<programlisting>$ cd /usr/src
$ cvs -d /misc/cvsrep checkout netbsd
</programlisting>
    </sect3>

    <sect3 id="building-current">
<title>currentの構築</title>
    <orderedlist>
    <listitem>configure の後、<ulink url="../kernel/#how_to_build_a_kernel">
	カーネルの構築</ulink>を行ない、できた新しいカーネルでリブートします。</listitem>
    <listitem>-current のソースツリーのベースディレクトリーに移動し、
	<code>./build.sh -T /usr/tools -O /usr/obj </code>.
       とタイプします。</listitem>
    <listitem>必要ならば、/etc の中のファイルに対する変更を merge します。</listitem>
    </orderedlist>
    </sect3>

    <sect3 id="tagging">
<title>構築に成功したものへのタグ付け</title>
    <para> もし、<ulink url="#building">構築</ulink>がうまくいって
      動作するバイナリーセットを作成できたのならば、
      動作するソースにタグ付けすることで使いやすくできます。
      これは、万一なにかの原因で構築できないcurrentツリーになっても、
      ひとつのCVSコマンドで、構築できるツリーに巻き戻すことを可能にします。
      タグ付けは次のコマンドで行えます:</para>
<programlisting>$ cvs tag successful-build-<emphasis>build date</emphasis></programlisting>

    <sect4 id="tag-notes">
<title>註</title>
    <itemizedlist>
      <listitem>もし、ファイル中の<emphasis role="bold">$Net</emphasis><emphasis role="bold">BSD$</emphasis>マーカーを認識する
        NetBSDカスタムバージョンのCVSを使用しない場
        合、ファイルのNetBSDリビジョン番号を、構築時に問題が起きた場合
        に参照の目的に使用することができます。</listitem>
      <listitem>上記のSUP/インポート/マージの作業は、まったく簡単に自動化で
        きます。以下のPerlスクリプトがこの作業を自動的に行ないます。
<programlisting>#!/usr/pkg/bin/perl
#
# NetBSD-currentをSUPしてそれをCVSに取り込み、手元の変更とマージする
# スクリプト
#
# 原註:
# このスクリプトはエラー処理をしていないので、対話的でない用途には向い
# ていない。
#
# このスクリプトはcvs-1.10.1とcvs-1.9.18でのみテストされている。
#
$SRCROOT="/usr/src/netbsd";
$IMPORTROOT="/misc/import";
$CVSROOT="/misc/cvsrep";
# supを実行してその標準出力をperlに取り込む
system "/usr/sbin/sup -zsv" ; # ここは最新のシステム以外では変更する
                              # 必要がある

# 新しいファイルをCVSに取り込む

chdir $IMPORTROOT or die "Could not cd to $IMPORTROOT\n";

($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;
$date = localtime;
$shortdate = sprintf "%02d%02d%04d",$mday,$mon+1,1900+$year;
system "/usr/local/bin/cvs -d$CVSROOT import -I ! -m\"SUP Import $date\" netbsd netbsd current-$shortdate ";

# 作業ディレクトリーを手元のNetBSDソースツリーにする
chdir $SRCROOT or die "Could not change to $SRCROOT directory\n";

# 取り込みを始める
$lastimport = `cat /usr/src/netbsd/.tag`; # `はバッククォート
$lastimport =~ s/\n//; # 文字列の終りの改行をすべて取り去る
system "/usr/local/bin/cvs update -j $lastimport  -j
current-$shortdate ";
# tag保存ファイルに最新のファイルを書き込む
open TAG,"&gt;$SRCROOT/.tag" or die "Could not open new tag file";
 print TAG "current-$shortdate";
close TAG;
</programlisting>
    <para>このスクリプトは作者がもっともよく使っているスクリプティングツー
          ルであるという理由からPerlでかかれていますが、同じことをする
          shellスクリプトを書くのはとても簡単でしょう。</para></listitem>
      <listitem>CVSを用いてcurrentを追跡するテクニックについてはNetBSDの
        current-usersメーリングリストで何度か議論されています。他のテ 
        クニックについてはNetBSDメーリングリストを検索してみてください。</listitem>
    </itemizedlist>
    <para>
    何かコメントや提案があれば、この部分を担当している
    Mike Pumford <email>mpumford@black-star.demon.co.uk</email> (訳註:英語で)、または
    <email>www@jp.NetBSD.org</email> までメールしてください。
</para>
</sect4>
</sect3>

<sect3 id="getrepos">
<title>リポジトリー全体の入手</title>
<para>

以上で説明した方法では、あなたが独自に行なった変更を自分用のリポジトリーに
保存することができます。これは、あなたが NetBSD をもとにしたソフトウェアの
開発をしている場合には便利でしょう。あなたが自分の CVS リポジトリーの
保守をしているわけでなく、単に NetBSD の CVS リポジトリーをミラーしたい
だけならば、それ用の方法が三つあります。
</para>
<para>

以下に簡単に説明するいずれの方法でも、 NetBSD CVS リポジトリーのコピー
(つまり、チェックアウトされたファイルでは*なく*、 RCS の ,v ファイル)
を取得できます。その後は、自分の anoncvs サーバーをセットアップしたり、
ローカルハードディスクにチェックアウトしたりできます。また、
リポジトリーに記録されている履歴にすぐにアクセスするのにも便利です。
</para>
<para>

リポジトリー全体を取得する方法は、次のとおりです:

<variablelist>
<varlistentry>
  <term>sup</term>
<listitem><para>すでに sup を使って NetBSD のソースの一部をミラーしている場合は、
     sup の設定ファイルに下記の行を追加します:</para>
<programlisting>anoncvs release=all  host=sup.NetBSD.org hostbase=/ftp/pub \
base=/usr prefix=/usr backup use-rel-suffix compress
</programlisting>
     <para>
     それから、 "sup /path/to/supfile anoncvs" を実行してファイルを取得します。
     </para>
     <para>
     sup ファイルの例が <code>/usr/share/examples/supfiles</code> にいくつかあります。
     また、 <ulink url="../../mirrors/#sup">SUP ミラーのリスト</ulink> で、
     あなたの近所のサーバーを探すようにしてください。
     </para>
</listitem>
</varlistentry>

<varlistentry>
  <term>rsync</term>
<listitem><para>rsync は rsync サーバーに大きな負荷をかけることに注意してください。
     このため、同時に利用できる rsync ユーザー数に制限があります。それでもなお
     rsync したい場合、リポジトリー取得のコマンドは次のとおりです:</para>
<programlisting>rsync -v -a rsync://anoncvs.NetBSD.org/cvsroot/src .</programlisting>
     <para><ulink url="../../mirrors/#rsync">rsync ミラーのリスト</ulink>をご覧ください !</para>
</listitem>
</varlistentry>

<varlistentry>
  <term>cvsup</term>
<listitem><para>M3 コンパイラーが移植されていないため、現在、 CVSup はすべての NetBSD
     アーキテクチャーで使えるわけではありません。 i386 では、
     <filename role="pkg">devel/cvsup</filename> パッケージと下記の設定ファイルを使って、
     cvsup.de.NetBSD.org から
     リポジトリーをミラーできます:
<programlisting>*default host=cvsup.de.NetBSD.org
*default base=/usr
*default prefix=/local/NetBSD-cvs
*default release=cvs
*default delete use-rel-suffix
*default compress

netbsd
</programlisting>
     </para>
     <para>
     <ulink url="../../mirrors/#cvsup">CVSup ミラーのリスト</ulink>をご覧ください!
</para>
</listitem>
</varlistentry>
</variablelist>
</para>
</sect3>

<sect3 id="error">
<title>エラーが出た場合は ?</title>
<para>

スナップショットや以前の -current をもとに -current の構築をしようとして
うまくいかなくても、慌てないでください。次の手順を踏んでみてください:
<orderedlist>
<listitem>構築をしようとしているリリースの <ulink
    url="http://cvsweb.NetBSD.org/bsdweb.cgi/src/UPDATING">UPDATING</ulink>
    ファイルを読みます。
</listitem>
<listitem>手がかりを得るために <ulink
    url="http://mail-index.NetBSD.org/current-users/">current-users
    アーカイブ</ulink>を読みます。
</listitem>
<listitem>再度アップデートします。関連あるファイル群のコミットの合間に
    リポジトリーを受け取っていた可能性もありますし、あるいは問題が修正
    されているかもしれません。
</listitem>
<listitem>どれも失敗した場合、 current-users にメールを送って、
    問題を説明してください。これには、日付、時刻、 -current のソースの
    入手方法と、あなたが加えた変更点をすべて含めてください。それから、
    出たエラーメッセージを含む<emphasis role="bold">短い</emphasis>スクリプトを入れてください。
    おそらく、誰かがすぐに問題を解決してくれるでしょう。
</listitem>
</orderedlist>
</para>
</sect3>

<sect3 id="etcupdate">
<title>etcupdate を使った設定ファイルと起動ファイルの更新</title>

<sect4 id="etcupdate-overview">
<title>概観</title>

etcupdate は、オペレーティングシステムのアップグレード後の、 /dev、 /etc、
/root 以下の新しい設定ファイルや起動ファイル (etc.tgz
配布セットに含まれるファイル) の比較・マージ・インストールを
手伝ってくれるスクリプトです。オペレーティングシステムのアップグレードは、
ソースからのコンパイル、バイナリー配布物の展開の、いずれの方法でも
おこなうことができます。
</sect4>

<sect4 id="using-etcupdate-source">
<title>ソースファイルに etcupdate を使う</title>
<para>
ソースが /usr/src 以下に置かれている場合は、
下記のコマンドで十分なはずです:
</para>
<programlisting># etcupdate</programlisting>
<para>
しかし、 NetBSD のソースがこれ以外の場所、たとえば /home/jdoe/netbsd/src
にある場合はどうでしょうか? 案ずることはありません。ソースツリーの場所を
-s srcdir を使って etcupdate に教えてやれば、うまくいきます:
</para>
<programlisting># etcupdate -s /home/jdoe/netbsd/src</programlisting>
</sect4>

<sect4 id="using-etcupdate-binary">
<title>バイナリー配布セットに etcupdate を使う</title>
<para>
時には、ソースが用意されていないけれども設定ファイルや起動ファイルを
更新したいときがあるでしょう。この場合の解決法は、必要な配布セット
(少なくとも etc.tgz) を展開し、 -b srcdir を使って etcupdate に
「ソースはなく公式配布セットがあるだけである」ことを伝えます。
</para>
<programlisting># mkdir /tmp/temproot
# cd /tmp/temproot
# tar xpzf /some/where/etc.tgz
# etcupdate -s /tmp/temproot</programlisting>
</sect4>
</sect3>
</sect2>

<html:hr/>

<sect2 id="specific-problems">
<title>特定の問題</title>

<sect3 id="wscons">
<title>wsconsにアップデートした後コンソールが使えない</title>
<para>

以下の手順が必要です。<ulink
url="ftp://ftp.jp.NetBSD.org/pub/NetBSD/NetBSD-current/src/etc/">src/etc</ulink>
にある適切なetc.<emphasis>port</emphasis>ディレクトリーから最新のMAKEDEVファイルを
<code>/dev</code>にコピーしてシングルユーザーで起動してください。そのあと
以下をタイプします:
<programlisting># fsck -p
# mount -vt nonfs
# cd /dev
# ./MAKEDEV wscons
</programlisting>
</para>
</sect3>

<sect3 id="rebuild-nbmake">
<title>build.sh が常に nbmake を最初に再構築するのは、なぜか?</title>
<para>

たとえ、 <code>./build.sh tools</code> を実行しておき、その後に <code>-u</code>
フラグを使ったり <code>/etc/mk.conf</code> で <emphasis>TOOLDIR</emphasis> を指定していたとしても、
<code>nbmake</code> は常に <code>build.sh</code> によって再構築されます。これは正常な挙動です。
その理由は <code>./build.sh</code> 自体の中の <code>rebuildmake</code>
関数に書いてあります:
<programlisting>        # なお、ここでは "mk.conf" に TOOLDIR が設定されていても、
        # それに従おうとは *しません* 。なぜなら、ここに設定されている make
        # 変数の展開その他のことは、 ${toolprefix}make を行なった *後に* のみ、
        # パース可能となるからです。このため、このような TOOLDIR 指定が有効となるのは、
        # ユーザーが環境変数 TOOLDIR をあらかじめ設定しているか、 build.sh に
        # -T オプションが使われたときだけです。
        #               
</programlisting>
よって、 <code>nbmake</code> を再構築したくない場合は、
<code>-T tooldir</code> を build.sh へ渡すか、環境変数 <emphasis>TOOLDIR</emphasis>
を設定しておく必要があります。
</para>

</sect3>
</sect2>
</sect1>
</webpage>
