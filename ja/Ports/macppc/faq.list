<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<!-- Copyright (c) 1998, 1999, 2000
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@NetBSD.ORG">
<title>NetBSD/macppc Frequently Asked Questions</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<h1>NetBSD/macppc Frequently Asked Questions</h1>

Here are some frequently asked questions (and answers) about
NetBSD/macppc.
<p>

This FAQ is very much a work in progress. If you have additional
information, questions, or answers, send mail to <a
href="mailto:port-macppc@NetBSD.org">port-macppc@NetBSD.org</a>.

<LIST>

<h2>See also the following related information:</h2>
<ul>
    <li><a href="SystemDisk-tutorial/">NetBSD/macppc System Disk
        Tutorial</a>
    <li><a href="models.html">NetBSD/macppc Model Support Page</a>
    <li><a href="nvedit.html">NetBSD/macppc nvedit HOW-TO</a>, for
        info on how to edit the contents of the NVRAMRC
    <li><a href="partitioning.html">NetBSD/macppc Partitioning HOW-TO</a>
    <li><a href="x11.html">NetBSD/macppc X11 FAQ</a>
    <li><a href="../../Documentation/elf.html">NetBSD ELF FAQ</a>
    <li><a href="../../Documentation/wscons/">wscons
	FAQ</a>, for NetBSD's platform-independent workstation console
	driver
</ul>
<p>

<h2>Additional information is also available:</h2>
<ul>
<li><a
href="ftp://ftp.NetBSD.ORG/pub/NetBSD/NetBSD-1.5.2/macppc/INSTALL.html">
    NetBSD 1.5.2 install notes</a> - supported hardware and how to install.
<li><a href="../../MailingLists/#port-macppc"> port-macppc mail list</a>
    - if you have any additional questions please subscribe.
<li><a
href="../../Documentation/network/netboot/">Diskless NetBSD HOW-TO</a>.
<li><a href="../../Documentation/Hardware/Misc/serial.html">NetBSD Serial 
Port Primer</a>
<li><a href="../../Documentation/">General NetBSD Documentation</a>
    - for questions not specific to NetBSD/macppc.
</ul>
<p>



<SECTION>General Problems/Questions


<ENTRY>boot-trouble Help, I can't boot NetBSD!
Unfortunately, there are several causes of this problem.  It's actually rather 
more common than we'd like, but is primarily due to the variety of machines
that we support and all the undocumented changes Apple made along the line.

<p>First, check to make sure your <a href="models.html">model</a> is supported.
Next, did you <i>really</i> read through the INSTALL notes and ignore
the instructions for Open Firmware versions other than your model? 
Next, read through this FAQ entry, and if you still can't make your machine
boot into NetBSD, post to 
<a href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a>.

<p>Look at the messages below to determine which problem you are encountering.

<p>
<pre>     Open Firmware, 1.0.5
     To continue booting the MacOS type:
     BYE&lt;return&gt;
     To continue booting from the default boot device type:
     BOOT&lt;return&gt;
      ok
     0 &gt; </pre>

If you don't see this message on screen (or serial console), then you haven't 
properly entered Open Firmware.  If your machine starts to boot MacOS (i.e. 
the screen turns grey and a happy mac or broken folder appears), then skip
down to 
<a href="#ofw-access">how to enter Open Firmware</a>.  If your screen stays 
black and you have an older mac, see instructions on 
<a href="#ofw-boot-serial"> how to get around using a serial console</a>.
If your screen is all weird, then see how to fix the 
<a href="#non-sync-monitor">monitor sync problems</a>.

<p>OK, now Open Firmware has started and is ready for user commands if you
set it to stop at the Open Firmware prompt (the "<tt>0&nbsp;&gt;</tt>").
If you specified that it not stop, Open Firmware tries to boot using the
settings you previously supplied (the Open Firmware variables
<tt>boot-command</tt>, <tt>boot-device</tt>, and <tt>boot-file</tt>). 
See <a href="#ofw-use">What can I do at the Open Firmware prompt?</a> for help 
using the Open Firmware command line interface.

<p>The next step is usually the trickiest -- getting Open Firmware to load
the bootloader from the correct location.  See what 
<a href="#boot-support">boot methods</a> are supported, Open Firmware 
<a href="#boot-disk">boot commands</a>, and some 
<a href="#common-of-probs">common Open Firmware booting problems</a>. 
Questions related to netbooting are covered in the 
<a href="../../Documentation/network/netboot/">Diskless HOW-TO</a>, 
particularly in the 
<a href="../../Documentation/network/netboot/intro.macppc.html">macppc-specific</a>
section, and the section below on <a href="#netboot-probs">common netboot 
problems</a>.

<pre>     0 &gt; <b>boot enet:,\ofwboot.xcf</b> file: 192.168.0.11,/ofwboot.xcfloading XCOFF
     tsize=C280 dsize=14AC bsize=2620 entry=600000
     SECTIONS:
     .text    00600000 00600000 0000C280 000000E0
     .data    0060D000 0060D000 000014AC 0000C360
     .bss     0060E4B0 0060E4B0 00002620 00000000
     loading .text, done..
     loading .data, done..
     clearing .bss, done..</pre>

If there are memory addressing issues, it might stop and print 
<a href="#ofw-claim-failed"><tt>CLAIM failed</tt></a>.

<pre>     &gt;&gt; NetBSD/macppc OpenFirmware Boot, Revision 1.3
     &gt;&gt; (tsubai@mint.iri.co.jp, Sun Nov 26 01:41:27 JST 2000) 
    1701508+177748 [100+68176+55886]=0x1e9468</pre>

If it hangs here, then you need to set the 
<a href="#ofw-real-base"><tt>real-base</tt></a> of your Open Firmware 1.0.5
or 2.0.x machine. If you get past this point, then your kernel has started
to load.  Now, if you have problems, it is most likely no longer an Open
Firmware problem, but a NetBSD problem. 

<p>If you have a PowerBook (FireWire) or a PowerBook G4 (Titanium) and you 
experience a hang here, then read about the <a href="#pb418">4.1.8 BootROM</a>.

<p>If your <a href="#black-lcd">screen turns black</a>, and you have a 
laptop, the LCD brightness may have been turned down all the way.

<pre>      start=0x100000
     Copyright (c) 1996, 1997, 1998, 1999, 2000, 2001
         The NetBSD Foundation, Inc.  All rights reserved.
     Copyright (c) 1982, 1986, 1989, 1991, 1993
         The Regents of the University of California.  All rights reserved.
     
     NetBSD 1.5S (AL) #0: Thu Mar 15 00:52:56 PST 2001
         mw@al:/usr/src/sys/arch/macppc/compile/AL
     total memory = 192 MB
     avail memory = 172 MB
     using 2483 buffers containing 9932 KB of memory
     [...]
     boot device: sd0
     root on sd0a dumps on sd0b
     root file system type: ffs</pre>

Sometimes the kernel can't figure out where it was booting from.  You may
need to build a kernel with the <a href="#dash-a">boot device hard-coded</a>.

<p>If your system hangs here, and you're using an USB keyboard, then see
<a href="#usb-keyboard-problems">below</a>.

<pre>     swapctl: adding /dev/sd0b as swap device at priority 0
     Automatic boot in progress: starting file system checks.
     [...]</pre>

OK, now you've started in "multi-user mode" and the boot process is complete.
If your keyboard doesn't work, see the FAQ entries for 
<a href="#usb-keyboard-problems">USB keyboards</a> and for 
<a href="#powerbook">recent laptops</a>.

<p>If you're running sysinst and it says
<tt>I can not find any hard disk for use by NetBSD</tt>
then you should see the FAQ entry on <a href="#nodisk">Where's my 
disk?</a>


<ENTRY>macos-newbie Help, I don't know anything about MacOS!
This may or may not be a problem depending on your 
<a href="models.html">model</a>. Some older models require nvram patches before
they can boot NetBSD/macppc.  Often, the easiest way to add these patches is
by using a MacOS utility.  If you don't know the basics (such as to use
StuffIt Expander to extract a BinHex file, how to start a MacOS app, or even
how to copy files in the MacOS Finder), you're probably better off trying to
avoid using MacOS (unless you want to learn!). 

<p>There are ways that unix-heads can set things up easily that would pain the most
experienced MacOS user.  This FAQ entry is aimed at such unix-heads, since
the INSTALL notes are aimed at people with MacOS experience and minimal unix 
background.  

<p><h3>If you have an Open Firmware 3 system</h3>
MacOS is briefly unavoidable if you want NetBSD entirely contained on one
hard drive.  You'll need to use a MacOS utility to repartition your disk,
then copy the bootloader <tt>ofwboot.xcf</tt> to an HFS partition.  If you're
willing to compromise a bit, you can permanently keep <tt>ofwboot.xcf</tt> on
a netboot server, an ISO 9660 CD-R, or an MS-DOS disk (you'd set your
<tt>boot-device</tt> to the bootloader location, and your <tt>boot-file</tt>
to the path to your kernel).  See info on <a href="#ofw-variables">the Open
Firmware variables of interest</a>. 

<p><h3>If you have an earlier, Open Firmware 1.0.5, 2.0.x, or 2.4 system</h3>
Things get a little more interesting here, since many of these models default
to using a <a href="#ofw-input-output-devices">serial console</a>.  The quick
easy way to determine your model's default console type is to power on the
machine, and during the chime, hold down the four <tt>Command-Option-P-R</tt>
keys until the screen turns black, grey, or white.  Black means either bad
hardware or a serial console.  Grey means that you didn't successfully enter
Open Firmware and it's trying to boot MacOS.  White (with text) means the
default is a local console. 

<p>Once you've got the <tt>0&nbsp;&gt;</tt> Open Firmware prompt on your
screen or serial console, you can try installing NetBSD starting at the
"Getting to the Open Firmware Prompt (Without using MacOS)" section in the
INSTALL notes.  If your system can't boot NetBSD, then post to <a
href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a> asking
someone to mail you the nvram patches for your model.  You can use your
serial console to paste the nvram patches into Open Firmware.  See the <a
href="nvedit.html">NetBSD/macppc nvedit HOW-TO</a> for help with this step.
Once you do this, you should be golden. 

<p>Good luck!



<ENTRY>disk-sharing How do I share files between the OSes on my machine?
Unfortunately, NetBSD doesn't yet support the Macintosh filesystems natively
(i.e. HFS, HFS+, and UFS), so we must use a workaround.  Install
<a href="ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/sysutils/hfsutils/README.html">hfstools</a>
and/or 
<a href="ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/sysutils/hfsutils/README.html">xhfs</a>
from the NetBSD package 
collection.  These utilities allow you to read and write files to an HFS
(<i>not</i> HFS+ or UFS) filesystem using command line tools or a graphical
browser.  If this is too much trouble for you, keep reading.

<p>Create an MS-DOS format partition.  Classic MacOS will automatically 
mount it, and the unix-like OSes (NetBSD, linuxpcc, Darwin, and MacOS X) can 
mount it using the <tt>mount_msdos</tt> command.  The steps below outline
the most straightforward technique.

<p><ol>
<li>Partition your hard drive from within MacOS using Drive Setup.  <i>This 
will erase all information on your hard drive.</i>

<p><li>Next, grab a copy of 
<a href="http://hyperarchive.lcs.mit.edu/cgi-bin/NewSearch?key=disk+charmer&amp;search=&amp;sp=sp">
Disk Charmer</a> or
<a href="http://www.versiontracker.com/moreinfo.fcgi?id=1253">DiskCharmer</a>,
 and set it up to create an
MS-DOS filesystem.  Your settings should look something like this:
<p>
<img src="../../images/ports/macppc/diskcharmer.gif" width="405" height="251"
alt="screenshot of DiskCharmer">

<p><li>Drag the partition onto DiskCharmer's window and it will prompt you
before erasing it and creating an MS-DOS filesystem in place of the HFS 
filesystem you created in the first step.

<p><li>Now, when you boot Classic MacOS, this partition will automatically 
mount using PC Exchange or File Exchange (depending on what it's called in your 
version of MacOS).  

<p>When you boot into MacOS X, linuxppc, or NetBSD, run the following command:
<pre>mkdir -p /msdos.filesystem;/sbin/mount_msdos -m 777 /dev/disk0s11 /msdos.filesystem</pre>

where <tt>/msdos.filesystem</tt> is the mountpoint you'd like, and 
<tt>/dev/disk0s11</tt> is the device name for your partition.  Alternatively,
for NetBSD and linuxppc, you can add an entry to your <tt>/etc/fstab</tt>
to always mount this filesystem.  There's probably a way to do this with MacOS
X, but I don't know how yet.
</ol>

<ENTRY>partitions I'm confused by all these contradicting partition notations
And you have a right to be.  We get confused too.

<p>There are <i>three</i> partition identification schemes you'll run across
when using NetBSD/macppc.  To make things more confusing, the order of
the partitions gets shuffled around, and some have more than others.  Most of
the users with Open Firmware 1.0.5, 1.1.22, or 2.0.x models need not be
concerned with these issues, since NetBSD insists on writing its own
partition map over the contents of your drive, and that's the only partitioning
scheme you will encounter.  This section is primarily to describe the
situation on Open Firmware 3 systems.

<p>See also the <a href="partitioning.html">NetBSD/macppc Partitioning 
HOW-TO</a>

<p><ol>
<li><b>MacOS-visible partitions (by partition name in Finder):</b><br>
While you may have created a bunch of partitions in Drive Setup, only
those partitions visible to MacOS will show up in the Finder.

<p>The only partitions visible to MacOS 9 and earlier are those formatted in
HFS, HFS+, or MS-DOS formats.  The only partitions visible to MacOS X and later
are those formatted in HFS, HFS+, and UFS (<i>not</i> NetBSD's 4.2BSD FFS).
The user can manually mount MS-DOS format partitions as well.

<li><b>Open Firmware's scheme (0 thru max partition number, as seen by
  Open Firmware, also visible using pdisk):</b><br>
Additionally, these are the partion numbers used by MacOS X and Darwin.
The order of partitions is directly related to the order you selected 
in Drive Setup or the NetBSD partitioning tools.
<p><table border=1 cellpadding=5>
 <tr><td>0</td>
 <td>a special "partition" reserved for a first stage bootloader</td></tr>
 <tr><td>1 thru ~8</td>
 <td>often reserved for MacOS drivers if the drive is formatted with a MacOS
  tool, not visible from MacOS</td></tr>
 <tr><td>~9 thru ~15</td>
 <td>user created partitions, placed in order of their physical location on
  disk (i.e. HFS, A/UX, and UFS partitions are in whatever order the user
  created them in).</td></tr>
 </table>

<p><li><b>NetBSD-visible partitions (letters a thru h, as seen by 
 <tt>disklabel</tt>):</b><br>
NetBSD shuffles the partitions around such that things work out better for 
itself.  The <tt>fstype</tt> reported by <tt>disklabel(8)</tt> is set
by the Apple Partition Map flags, and does not depend on the actual
type of filesystem on that partition (be it NetBSD FFS, Apple HFS, or MS-DOS).
In particular, MS-DOS formatted partitions show up as <tt>HFS</tt> partitions.

<p><table border=1 cellpadding=5>
 <tr><td>a</td>
 <td>Your "A/UX Root" partition, regardless of its order on the disk</td></tr>
 <tr><td>b</td>
 <td>Your "A/UX Swap" partition, regardless of its order on the disk</td></tr>
 <tr><td>c</td>
 <td>This is the entire disk (first sector to last sector)</td></tr>
 <tr><td>d-f</td>
 <td>First few non-A/UX partitions (usually the user HFS(+) partitions)</td></tr>
 <tr><td>g</td>
 <td>Your "A/UX User" partition (if present), regardless of its order on the disk</td></tr>
 <tr><td>h</td>
 <td>Additional non-A/UX partitions (usually user HFS(+) partitions)</td></tr>
</table>
</ol>

<p>So, for example the following is what Drive Setup created on my PowerBook 
(FireWire):
<p><table border=1 cellpadding=5>
<tr><td><b>MacOS</b></td><td><b>OF/OSX</b></td><td><b>NetBSD</b></td> 
  <td><b>Comment</b></td><td><b>Apple Partition Map type</b></td>
  <td><b>disklabel fstype</b></td></tr>

<tr><td><br></td>        <td>0</td>  <td><br></td>    
  <td>bootloader</td>               <td><br></td>
  <td><br></td></tr>

<tr><td><br></td>        <td>1</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_partition_map Apple</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>2</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_Driver43*Macintosh</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>3</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_Driver43*Macintosh</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>4</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_Driver_ATA*Macintosh</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>5</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_Driver_ATA*Macintosh</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>6</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_FWDriver Macintosh</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>7</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_Driver_IOKit Macintosh</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td>8</td>  <td><br></td>    
  <td>MacOS driver</td>             <td>Apple_Patches Patch Partition</td>
  <td>unknown</td></tr>

<tr><td>Untitled</td>   <td>9</td>  <td>d</td>    
  <td>MacOS 9 boot partition</td>   <td>Apple_HFS untitled</td>
  <td>HFS</td></tr>

<tr><td>Untitled 2</td> <td>10</td> <td>e</td>    
  <td>MacOS X boot partition</td>   <td>Apple_HFS untitled 2</td>
  <td>HFS</td></tr>

<tr><td>Untitled 3</td> <td>11</td> <td>f</td>    
  <td>MS-DOS shared partition</td>  <td>Apple_HFS untitled 3</td>
  <td>HFS</td></tr>

<tr><td><br></td>        <td>12</td> <td>a</td>      
  <td>NetBSD boot partition</td>    <td>Apple_UNIX_SVR2 A/UX Root</td>
  <td>4.2BSD</td></tr>

<tr><td><br></td>        <td>13</td> <td>b</td>      
  <td>NetBSD swap</td>              <td>Apple_UNIX_SVR2 Swap</td>
  <td>swap</td></tr>

<tr><td><br></td>        <td>14</td> <td>g</td>      
  <td>unused disk space</td>        <td>Apple_Free Extra</td>
  <td>unknown</td></tr>

<tr><td><br></td>        <td><br></td> <td>c</td>      
  <td>NetBSD whole disk</td>         <td><br></td>
  <td>unused</td></tr>
</table>

<p>After installation, one of the HFS partitions, "Untitled" (which is
partition 9 to Open Firmware, and partition d to NetBSD) has 
<tt>ofwboot.xcf</tt>, and one of the A/UX partitions (which is partition 12
to Open Firmware, and partition a to NetBSD) has my NetBSD kernel, so I use 
the following command to boot:
<pre>boot hd:9,ofwboot.xcf hd:12</pre>

<ENTRY>scroll-speed Why does the screen scroll text so slowly?
The text console code is not optimized in the GENERIC kernel.  There is
accelerated text console code in -current, if you build a new
kernel.  This fix is <em>not</em> in NetBSD 1.5.x.
<p>
You will need to build a new kernel.  Add the following line to your 
<a href="../../Documentation/kernel/#how_to_build_a_kernel">
kernel configuration</a>:
<pre>options	OFB_ENABLE_CACHE</pre>
<p>
For information on X11 servers, see the <a href="x11.html">NetBSD/macppc      
X11 FAQ</a>.


<ENTRY>usb-mouse-bug My USB mouse is not recognized.

Try plugging it into the back of the Mac instead of into the keyboard.


<ENTRY>usb-keyboard-problems USB keyboard problems
There are two different types of USB keyboard problems.  One set of
problems appeared after NetBSD 1.4.3 was released, and applies only to
some iMac (Bondi Blue) and some PowerMacintosh G3 (Blue and White) machines.  
This problem has not been fixed yet.
<p>
The other problem occurred on all models with USB keyboards, but was fixed
prior to the release of NetBSD 1.5.

<p><H3>iMac (Bondi Blue) and PowerMacintosh G3 (Blue and
White) problems:</h3>
See Bob Nestor's 
<a href="http://mail-index.netbsd.org/port-macppc/2001/06/11/0009.html">post</a>
to the mailing list describing the problem and a
workaround for the PowerMacintosh G3 (Blue and White).  This
workaround doesn't work for the iMac (Bondi Blue), but Rob Gridley reports that 
unplugging the mouse allows his system to boot and use the keyboard.  Also, 
see the problem report, 
<a href="http://www.NetBSD.org/cgi-bin/query-pr-single.pl?number=12894">port-macppc/12894</a>
<p>
Briefly, what he recommends is:
<p>
<ol>
  <li>Unplug the USB keyboard and plug in an ADB keyboard and mouse
    <p>
  <li>Boot NetBSD with the ADB keyboard
    <p>
  <li>Enter root, swap and filesystem responses on the ADB keyboard
    <p>
  <li>When the system gets to the shell prompt (or login if you went 
    multi-user), unplug the ADB and plug in the USB keyboard
</ol>
<p>

The USB will be usable at this point and you can use the
system.  You'll notice that the ADB is dead even before you unplugged it.  
Also you <b>MUST</b> boot without the USB installed or this won't work.
<p>
Alternatively, NetBSD 1.4.3 works fine on these two models and does not
have this USB keyboard problem.

<p><h3>Repeating keypress problems prior to NetBSD 1.5:</h3>
There is a problem in some kernels that causes the first keypress
from a USB keyboard to be repeated over and over again. A symptom
of this would be the install system continually asking "<tt>(I)nstall,
(S)hell or (H)alt ?</tt>" To avoid this problem, press the
shift key before anything else.
<p>
On some newer machines, NetBSD will hang after configuring the devices but
before entering single-user mode.  The recommended solution is to unplug
all USB devices (especially hubs) and plug the mouse into the keyboard and
the keyboard directly into the back of the mac.

<ENTRY>cannot-allocate-vm-panic <tt>panic: startup: cannot allocate VM for buffers</tt>
This problem should have been fixed in NetBSD 1.5.  If you
still have this problem after upgrading, post to 
<a href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a>. 

<p>
On some machines with large quantities of RAM the kernel will run out of
kernel VM when it tries to allocate the buffer cache.
You can avoid this by either of:
<ol>
<li>Removing some RAM
<li>Adding <tt>"options BUFPAGES=800"</tt> to the <a
    href="../../Documentation/kernel/#how_to_build_a_kernel">kernel
    configuration</a>
</ol>

<ENTRY>wdc-lost-interrupt <tt>wdc0:0:1: lost interrupt</tt>
This problem is present in NetBSD 1.5.2 on newer machines that support 
ATA4 drives.  Unfortunately, there is presently no easy workaround.  Post 
to <a href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a> for 
assistance.

<p>This has been reported on the iBook (Dual USB) and the iMac (Summer 
2000) which has been updated to BootROM 4.1.9.

<p>The problem is not present in NetBSD-current.

<ENTRY>pciide-lost-interrupt <tt>pciide0:0:0: lost interrupt</tt>
This problem is fixed in NetBSD 1.5.1 and later.
If you still have this problem after upgrading, post to 
<a href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a>.

<p>
The NetBSD initialization code for the CMD 646 IDE controller doesn't
correctly undo some of the settings that Open Firmware sets.  What happens
is that Open Firmware sets the IDE controller up in 0646U2 mode and
changes some of the interrupt settings.  The MI pciide driver doesn't know
how to deal with this situation and you get a lot of "lost
interrupt" messages.
<p>
What this means is that if you use Open Firmware to load the bootloader
(i.e. <tt>ofwboot.xcf</tt>) or the kernel from your hard drive, NetBSD
cannot use that drive.
<p>
A workaround is to place the kernel on another bootable
bus and then use that to mount the drive with your NetBSD filesystem 
on the drive connected to the CMD 646 IDE bus.  The
key phrase here is "another bootable bus".  On the G3 and G4 machines which
have this problem, they have more than one IDE bus (in addition to add-on
SCSI busses).  The hard drive is typically on the bus which we have
troubles with, but the CD-ROM and Zip drive are typically on a different
IDE bus which works just fine.
<p>
What you may want to do is move your hard drive to the bus the CD-ROM is
attached to (paying attention to the master/slave jumpers), and all your
problems will go away, although your drive is using a slower IDE bus
protocol.


<ENTRY>mesh-fifo <tt>Panic: mesh: FIFO != 0</tt>
This bug is not present in NetBSD 1.5 and later.
<p>
This is usually caused by bad SCSI cabling or devices.  Check your
internal and external termination.  Check the length and quality of your
cables.  Disconnect all devices that are not critical.
<p>
More often than not, this is caused by having a Zip drive on your MESH
SCSI bus, as these devices do not behave like good SCSI citizens.
<p>
One person
suggested that the MESH driver is more reliable if you don't reboot
from MacOS into NetBSD. (That is, if you're running MacOS, shut down
rather than rebooting, and then power it back on and boot to NetBSD.)
<p>
M L Riechers posted a very thorough 
<a href="http://mail-index.netbsd.org/port-macppc/2000/08/02/0029.html">
message</a> on this topic.
<p>
Good luck.


<ENTRY>bm0-device-timeouts I'm getting device timeouts on bm0
This problem has been fixed in NetBSD 1.5 and later.
<p>
Inserting a 10Mb Hub (forcing bm0 to 10Mb/s instead of 100Mb/s) seems
to prevent this problem.


<ENTRY>ethernet-bad-date Ethernet isn't working
Aside from the usual sorts of problems (such as cables and 
<a href="../../Documentation/network/">configuration</a>),
NetBSD/macppc seems to have a problem using network interfaces if the date 
stored in the PRAM is too old (such as if your system has lost power or 
gotten reset in such a way that the date is set to 1904 or 1956).  The symptom
is that <tt>ifconfig</tt> doesn't complain, but no packets are sent or received.
<pre>% <b>ping 10.0.1.1</b>
PING 10.0.1.1 (10.0.1.1): 56 data bytes
<b>^C</b>
----10.0.1.2 PING Statistics----
0 packets transmitted, 0 packets received,</pre>


<ENTRY>power-off Woah, my machine just powered off!

Well, that's probably because you're using a recent laptop (iBook,
PowerBook (FireWire), or PowerBook G4 (Titanium)).
<p>
The page up key sequence (<tt>FN-uparrow</tt>) will panic a NetBSD 1.5.x
kernel.  This is fixed in NetBSD-current.  If you're prone to pressing
page up, you should compile a new kernel.
<p>
The "brightness" keys (F1 and F2) will power off your machine and zap your 
clock.  You will need to build a new kernel without the <tt>abtn</tt> option.
Remove the following line from your 
<a href="../../Documentation/kernel/#how_to_build_a_kernel">
kernel configuration</a>:

<pre>#abtn*  at adb?</pre>

<ENTRY>power-manager My PowerBook or iBook won't power on, charge the battery, or recognize the charger
Your power manager memory might be corrupted.
<p>
See <a href="http://til.info.apple.com/techinfo.nsf/artnum/n14449">TIL 14449</a>
for info on how to reset it.

<ENTRY>timedrift My PowerComputing clone's clock drifts too much.
Yeah, it appears that the <tt>timebase</tt> in Open Firmware doesn't match
the hardware.  You need to correct it.

<p>See the 
<a href="http://mail-index.netbsd.org/port-macppc/2001/08/03/0003.html">post</a>
by Adam Lebsack.

<ENTRY>dash-a Why does the kernel always prompt me for the root device?
Various people have reported that they can't get their NetBSD/macppc
systems to boot unattended.  What happens is that Open Firmware loads the
kernel just fine, but the kernel can't seem to find the root device
(i.e. where the / filesystem is located).

<p>At the prompt, type in the device name for your root disk (usually
something like <tt>sd0a</tt> or <tt>wd0a</tt>), swap (usually something
like <tt>sd0b</tt> or <tt>wd0b</tt>), and filesystem type (usually
<tt>ffs</tt>, <tt>nfs</tt>, or <tt>cd9660</tt>). 

<p>
Until this situation is fixed, there is a workaround.  You need to 
<a href="../../Documentation/kernel/#how_to_build_a_kernel">
build a kernel</a> with the following setting:
<pre>#config		netbsd	root on ? type ? #to automatically detect root device
config		netbsd	root on sd0 type ffs #for SCSI disk
#config		netbsd	root on wd0 type ffs #for IDE disk
#config		netbsd	root on ? type nfs #for netboot
</pre>

where <tt>sd0</tt> is the name of the device with your root filesystem.


<!-- ======================================== -->
<SECTION>Supported Hardware

<ENTRY>supported-models NetBSD/macppc supported models
See the <a href="models.html">NetBSD/macppc supported models list</a>.  Also, 
see the list of <a href="#peripherals">supported peripherals</a>.

<ENTRY>nubus Are NuBus-based Power Macs supported (7100, 8100, etc)?

No. NetBSD/macppc doesn't support NuBus. In addition,the NuBus-based
Power Macs don't have Open Firmware, which NetBSD/macppc depends on
heavily for bootstrapping and console operations.

<p>
There are four groups of NuBus based Power Macintosh machines:
<ul>
<li><b>Apple PDM</b><br>
    Any x1xx machine, e.g. 6100, 6150, 7100, 8100
<li><b>Apple PERFORMA class</b><br>
    52xx, 53xx, 62xx, 63xx (except 6360)
<li><b>Apple POWERBOOK (or 'M2') class</b><br>
    1400, 2300, 5300
<li><b>Power Computing "Power" series</b><br>
    Such as the "Power 100" and "Power 120"
</ul>

<p> These systems won't work even if you upgrade the processor to a
G3, because the remaining hardware is still unsupported. (But if you
get a complete logic board upgrade, they will work, because they then
essentially become a new machine)

<p> At the current time, we don't know of anyone working on supporting
these systems. If you are interested in trying to get one of them
working, <a href="mailto:port-macppc@NetBSD.org">send mail</a>.

<p>We already have support for the 603 microprocessor, and the RS/6000 porting
effort is working on the 601 microprocessor support.  We have support
for the motherboard chipsets in <a href="../mac68k/">NetBSD/mac68k</a>.  
It's just a matter of sharing these drivers and figuring out a bootloader
that's compatable with the Open Firmware method of booting the currently
supported macppc models.


<ENTRY>68k-upgrade Are 68k-based Macs with PowerPC processor upgrades supported?

No, for the same reasons as above. (This applies only to
<em>processor</em> upgrades. If you upgrade the whole motherboard, it
essentially becomes a new machine, in which case it may be supported.)


<ENTRY>601 Are the Power Macintosh 7200 or 7500 supported?  (601 processor)

These machines have PCI and Open Firmware, but use the PowerPC 601
processor, which is not currently supported. However, the 7500's
processor is upgradable, so if you buy a 603/604/G3/G4 upgrade for it,
NetBSD will work.  See <a href="#cpu-upgrade">below</a>.

<p> In addition, some work is in progress on a rs6000 port, and it
will bring 601 support to NetBSD.  Once this is done, it will be a
matter of sharing this code between rs6000 and macppc.

<ENTRY>powerbook Are PowerPC-based PowerBooks supported?

Some of them.  See the <a href="models.html">NetBSD/macppc supported
models list</a>. 

<p>The PowerBook 2400 and all G3 PowerBooks are
supported. The PowerBook 1400, 2300, and 5300 are not supported,
because they do not have Open Firmware. Most of the later models work fine.

<p>Some of the most recent models (iBook. iBook SE, iBook (Dual USB), PowerBook 
(FireWire), and PowerBook G4 (Titanium)) have keyboards that were first 
supported in NetBSD 1.5.1.  Versions of NetBSD prior to this required a 
kernel patch.

<p> Note that power management is not yet supported, so it is not
possible to suspend and resume a PowerBook while running NetBSD.

<p>See also <a href="#power-off">Woah, my machine just powered off!</a>,
<a href="#power-manager">My PowerBook or iBook won't power on, charge the 
battery, or recognize the charger</a>, and <a href="#pb418">PowerBook 
(FireWire), PowerBook G4 (Titanium), and BootROM 4.1.8</a>.

<ENTRY>cpu-upgrade Are PowerPC CPU upgrades supported?
Sure!
<p>
Many people upgrade their slow 601, 603, 604, or G3 CPUs with a faster 604, G3, 
or G4 CPU.  Actually, it's currently necessary if you have a PowerMacintosh 
7500 with the original PowerPC 601 chip.
<p>
People have reported success with upgrading the CPU in 
original PCI PowerMacintosh systems (7300 - 9600), supported PowerBooks, and
earlier G3 systems.  The common manufacturers are Newer Technology, 
Powerlogix, Sonnet, and XLR8.  If the CPU works in MacOS, it should work in
NetBSD.  There is apparently no need for the MacOS "virtual firmware" type
of patch -- NetBSD initializes the CPU just fine.
<p>
Unfortunately, the Metabox Jocard G4 has some problems.  See Thomas Michael Wanka's
<a href="http://mail-index.netbsd.org/port-macppc/2001/09/01/0002.html">post</a> 
on this topic.
<p>
In rare circumstances, you may need to compile a special kernel to enable the
L2 cache on G3 or G4 CPUs in older systems.  Usually this is not necessary, and
it "just works".  When it doesn't, you'll see a message like the following:
<pre>cpu0 at mainbus0: L2 cache not enabled</pre> 

<p>If, when you boot, there is a message like this, 
then you should follow the directions in this
<a href="http://mail-index.netbsd.org/port-macppc/2001/01/05/0000.html">post</a>
and this
<a href="http://mail-index.netbsd.org/port-macppc/2001/01/05/0007.html">post</a>.

<ENTRY>peripherals What peripherals are supported?
The 
<a href="ftp://ftp.NetBSD.ORG/pub/NetBSD/NetBSD-1.5.2/macppc/INSTALL.html">
NetBSD/macppc 1.5.2 Install Notes</a> have a full list of supported hardware.  
<br>Unless otherwise specified, third-party devices (such as PCI and cardbus 
cards) cannot be used to boot NetBSD/macppc.

<p>
<ul>
  <p><li> <strong>CPU</strong>
  <ul>
    <li>PowerPC 603, 604, G3, and G4 (and variants of each)<br>
     <a href="#cpu-upgrade">See above</a> for more details on CPU upgrades
  </ul>
  <p><li> <strong>Ethernet</strong> 
  <ul>
    <li> On-board 79C950 (MACE) ethernet (<i>mc</i>)
    <li> On-board bmac ethernet, 10Base-T only (<i>bm</i>)
    <li> On-board gmac ethernet (<i>gm</i>)
    <li> On-board AirPort (<i>wi</i>)<br>
        <i>See <a href="#airport">below</a></i>
    <li> PCI, PCMCIA, cardbus, and USB ethernet devices
        (<i>tlp</i>, <i>epic</i>, <i>ex</i>, <i>fxp</i>, <i>rtk</i>, <i>vr</i>,
         <i>ne</i>, <i>aue</i>, <i>cue</i>, and <i>kue</i>)<br>
       such as 
       Asante, Farallon, SMC, 3Com, Intel, RealTek, D-Link, NE2000, and other
       compatible devices
  </ul>

  <p><li> <strong>SCSI</strong>

  <ul>
    <li> On-board 53c94 SCSI controller (<i>esp</i>)
    <li> On-board MESH SCSI controller (<i>mesh</i>)
    <li> Adaptec / Future Domain PCI SCSI (<i>ahc</i>)<br>
        Many Adaptec cards have Macintosh firmware on them and can be
        used to boot NetBSD/macppc.
	<i>See <a href="#boot-pci">below</a></i>
    <li> Advansys 1200[A,B] 9xx[U,UA] PCI SCSI (<i>adv</i>)
    <li> AMD 53c974 (<i>pcscp</i>)
    <li> NCR/Symbios 53c8xx (<i>ncr</i> or <i>siop</i>)
  </ul>

  <p><li><strong>IDE</strong>
  <ul>
    <li> On-board IDE controllers (<i>wdc</i>)
    <li> Promise Ultra66 (<i>pciide</i>)
  </ul>

  <p><li><strong>Input devices</strong>
  <ul>
    <li>Most ADB keyboards, mice, trackballs, and trackpads 
    <li>Most USB keyboards, mice, trackballs, and trackpads 
    <li>Most PS/2 keyboards, mice, and trackballs (middle button on 3-button 
      mice may not work) 
  </ul>

  <p><li> <strong>Video</strong> (see <a href="#ofw-boot-video">below</a>)
  <ul>
    <li> On-board video on most all models (<i>ofb</i>)<br>
      The following models are <i>not</i> able to use their on-board video
      when running NetBSD/macppc:<br>
      <i>Performa 54xx, 6360, 6400, PowerComputing PowerTower, Umax C600, and
      Apus 3000</i>
    <li> PCI video cards with Open Firmware support (<i>ofb</i>)<br>
      ATI, IMS, Matrox, and NVIDIA all have models that support Open Firmware
  </ul>

  <p><li> <strong>Audio</strong>
  <ul>
    <li>On-board AWACS audio on most models (untested) (<i>awacs</i>)
    <li>USB audio (<i>uaudio</i>)
    <li>PCI audio cards, although only the Ensoniq AudioPCI (<i>eap</i>) has 
        been thoroughly tested
  </ul>

  <p><li> <strong>Serial</strong>
  <ul>
    <li> On-board RS-422 serial ports (modem port is <i>ttya</i> and 
      printer port is <i>ttyb</i>)<br>
      On-board Serial support is very poor and may cause your system to hang.  
      <i>See <a href="#badserial">below</a></i>
    <li> Gee Three Stealth Serial Port and Griffin Technology gPort<br>
      These replace the internal modem on desktop G3 and G4 models and
      can be used as serial consoles
    <li> USB, PCI, and cardbus-based serial ports
  </ul>

  <p><li> <strong>USB devices</strong>
  <ul><li>Many add-on USB devices are supported.  See the page on the
    <a href="../../Hardware/usb.html">Machine-independent USB drivers</a>.
  </ul>

  <p><li> <strong>PCMCIA and CardBus cards</strong>
  <ul><li>Many cards are supported, but untested with NetBSD/macppc.  
    See the pages on the
    <a href="../../Hardware/pcmcia.html">Machine-independent
    PCMCIA drivers</a> and the
    <a href="../../Hardware/cardbus.html">Machine-independent Cardbus
    drivers</a>.
  </ul>

  <p><li> <strong>PCI cards</strong>
  <ul><li>Many cards are supported, but untested with NetBSD/macppc
    See the pages on the
    <a href="../../Hardware/pci.html">Machine-independent PCI drivers</a>.
  </ul>
</ul>

<p>
NetBSD/macppc does not yet support

<ul>
  <li> Floppy drives (built-in or USB), other than for booting
  <li> Power management
  <li> full wscons capabilities such as virtual terminals and color text
  <li> Use of more than one processor (the extra CPUs sit idle)
  <li> Common FireWire (IEEE 1394)devices, such as disks, CD-RWs, and scanners
  <li> On-board video capture
</ul>

<ENTRY>badserial I'm having troubles using my serial port!
That's because the built-in serial ports don't work very well.  Actually, 
they're really only good enough for console use (and even then, they're
sometimes flaky).
<p>
Until someone fixes this, don't assume you can run a modem, ppp, sync your 
palm, or whatever.  If you have any experience with serial drivers and a 
willingness to help, please contact 
<a href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a>.

<ENTRY>pppmacppc How do I get ppp working?
Ouch.  Unfortunately, since the built-in serial ports don't work, there
are a few bugs in the ppp drivers that haven't been quashed.

<p>See Donald Lee's 
<a href="http://mail-index.netbsd.org/port-macppc/2001/07/26/0023.html">post</a>
on how he got his Cyclades PCI card to run ppp.

<ENTRY>airport Is AirPort or AirMac supported?
Yes, but not in NetBSD 1.5.x or earlier.  You will need to 
<a href="../../Documentation/kernel/#how_to_build_a_kernel">build a
kernel</a> from -current sources, with the <tt>wi</tt> driver.
<p>
Once you have rebooted with your new kernel, you can follow the instructions
on the <a href="../../Documentation/network/wavelan.html">Using
WaveLAN IEEE under NetBSD</a> page.
<p>
If your AirPort base station was set up under MacOS and you use encryption, 
you may need to run the <tt>AirPort Admin Utility</tt>, configure your 
base station, and find the equivalent network password.


<!-- ======================================== -->
<SECTION>Open Firmware

<ENTRY>ofw What is Open Firmware, and why do I care?

Briefly, it is a command environment using the FORTH language which the
NetBSD kernel uses to gether information about your system, and to control
some of your devices. It is part of the boot ROMs in most PowerPC-based
Macintosh systems, and we use it to load the kernel from disk or network.

<p>Open Firmware, as specified by "IEEE Std 1275-1994: IEEE Standard
for Boot Firmware (Initialization Configuration) Firmware: Core
Requirements and Practices" and its supplements, is a
platform-independent boot firmware. It is based on Sun's OpenBoot
firmware, and uses ANS Forth as a processor-independent interface
language.

<p>You can find more about Open Firmware at the <a
href="http://playground.sun.com/1275/home.html">Open Firmware Working
Group home page</a> or at the
<a href="http://bananajr6000.apple.com">Apple Computer Open Firmware Home 
Page</a>.

<ENTRY>ofw-version Which version of Open Firmware does my machine have?

Look at the <a href="models.html">Model Support</a> page.  If your machine
isn't listed, you can find out from within Open Firmware.  From the Open 
Firmware prompt, type:
<pre>0 &gt; <b>dev /openprom .properties</b>
name                    openprom
device_type             BootROM
model                   OpenFirmware 3
relative-addressing     
supports-bootinfo       

 ok</pre>
<p>
Alternatively, any machine which did not ship with a G3 or G4 processor is
either Open Firmware 1.0.5 or 2.0.x.  All desktop models without an internal 
floppy drive have Open Firmware 3.  All laptop models without built-in SCSI
have Open Firmware 3.

<p><i>Note:</i> Open Firmware 3 systems have a rewritable "firmware", also
called the <em>BootROM</em>. When you use an Apple firmware updater, it
updates the BootROM. This will <b>not</b> change the version of Open
Firmware in your machine - it will still be Open Firmware 3. The BootROM
is what is first executed when you power on or reset your system. The
BootROM then loads Open Firmware, which boots your operating system.
<p>
This BootROM 
version can be found using Apple System Profiler in MacOS.  Often, it is 
listed on the first line of your screen when you first boot into Open 
Firmware.  For example, my PowerBook (FireWire) prints:

<p><pre>Apple PowerBook3,1 2.1f1 BootROM built on 01/29/00 at 22:38:07
Copyright 1994-2000 Apple Computer, Inc.
All Rights Reserved

Welcome to Open Firmware.
[...]</pre>

<p>indicating that the BootROM version is 2.1f1.

<ENTRY>ofw-bugs Are there bugs in my machine's Open Firmware implementation?

Probably.  
<p>

If you have a mac with Open Firmware 3.0 or higher, you might be able to
download a new FirmWare (i.e. BootROM) for your machine on the <a
href="http://asu.info.apple.com/">Apple Software Updates</a> web site.  
Search for <tt>firmware</tt> and download the most recent file appropriate
for your model.  See <a href="#ofw-version">above</a> on how to 
distinguish Open Firmware version from BootROM version.
<p>

<i>Warning about FirmWare Update 4.1.7 and 4.1.8</i><br>
    Apple recently released a new version of firmware for recent
    models.  Many people
    are having problems with their third-party RAM.  See this
    <a href="http://www.macfixit.com/archives/april.01.a.shtml#firm-04-07">
    discussion on www.macfixit.com</a> before deciding to upgrade.
    PowerBook (FireWire) and PowerBook G4 (Titanium) owners should also 
    see <a href="#pb418">above</a>.
    <p>

<i>Warning about FirmWare Update 4.1.9 on iMac (Summer 2000)</i><br>
There are reports that this combination with NetBSD 1.5.2 will prevent the 
CD-ROM and the hard drive from operating together.  See
<a href="#wdc-lost-interrupt">above</a>.<p>

If you have an older model mac (i.e. one that does not have a flash
upgradable firmware), you can still patch your system.  Open Firmware
provides a small nvram area to patch problems found after
the machine was built.  Apple has kindly published a MacOS utility which
will patch most known problems and will allow you to set various Open
Firmware variables.  People have found the patches from this utility will
allow them to use Open Firmware to boot from otherwise unbootable drives.
<p>

To patch your system, merely download 
<a href="ftp://ftp.apple.com/developer/macosxserver/utilities/SystemDisk2.3.1.smi.bin">
SystemDisk</a>, run the <tt>System Disk</tt> program from the disk
image, then click on <tt>Power User (Open Firmware)</tt>, and click on
<tt>Save</tt>.  For more detailed instructions, see the
<a href="SystemDisk-tutorial">NetBSD/macppc System Disk Tutorial </a>

<p>Note: <i>zapping your PRAM <tt>Command-Option-P-R</tt>
will erase these nvram patches.</i>
<p>Note 2: <i>Booting your Open Firmware 1.0.5 system into MacOS will erase 
these nvram patches.</i>
<p>

If you have a system with Open Firmware 1.0.5, there are a few additional 
<a href="SystemDisk-tutorial/of105patch.html">patches</a> that you may
wish to apply that are <i>not</i> included in the System Disk utility.  

<ENTRY>ofw-access How do I get to the Open Firmware prompt?

Read the 
<a href="ftp://ftp.NetBSD.ORG/pub/NetBSD/NetBSD-1.5.2/macppc/INSTALL.html">NetBSD 
1.5.2 install notes</a>.  In particular, scroll down to the section on
"Getting to the Open Firmware Prompt" for your particular version of Open Firmware.

<p>For the lazy, you can use Apple's <tt>System Disk</tt> to set your
machine to always boot into Open Firmware.  See the brief <a
href="SystemDisk-tutorial/">tutorial</a> on how to do this, unless your <a
href="models.html#no.sysdisk">model isn't supported by System Disk</a>.

<ENTRY>ofw-boot-serial I tried to get into Open Firmware, but it just stopped booting, and my monitor isn't showing anything.

You didn't read the
<a href="ftp://ftp.NetBSD.ORG/pub/NetBSD/NetBSD-1.5.2/macppc/INSTALL.html">NetBSD 
1.5.2 install notes</a>.  In particular, scroll down to the section on
"Older Open Firmware System Preparation".  It's a bit lengthy, but very clear
in describing the proper steps to set up Open Firmware.

<p>Briefly, all Open Firmware 1.0.5 and most Open Firmware 2.0.x systems
will default to using the `Modem' serial port for the console instead of
the ADB keyboard and the monitor attached to the on-board video. Unless
you use a MacOS-based utility to set these variables correctly, you
<i>will</i> need to hook up a serial console temporarily to set them
before you can use your keyboard and screen. 

<p><a href="#ofw-input-output-devices">See below</a> for help determining
your <tt>input-device</tt> and <tt>output-device</tt>.

<ENTRY>ofw-boot-video How do I use a PCI video card?
This section describes how to tell Open Firmware to use your PCI-based
video card, whether you purchased it separately from your computer, or it
came with it. Some models of Macintosh and some clones shipped without an
on-board video interface (such as PowerMacintosh 9500 and 9600,
PowerComputing PowerTowerPro, and Umax S900).  These models shipped with a
video card in one of the PCI slots. 

<p>In all cases, your video card must have Open Firmware support on it.

<p>Open Firmware uses a different device path depending on the model of the 
card and the PCI slot it is located in.  You will need to figure out
what the path is to your video card, and how to tell Open Firmware to use it.
<p>
<ol>
 <li>Boot into Open Firmware (i.e. get to the <tt>0 &gt;</tt> prompt)<br>
  Older models may need to use a serial console to start with
 <p><li>If this is your first experience with Open Firmware, you might want to read
  about <a href="#ofw-use">use Open Firmware</a>.
 <p><li><pre>0 &gt; <b>dev / ls</b></pre>
  This will list all of the devices present in your system.  Look for something
  matching your video card.  For example, part of the listing from a 
  PowerMacintosh 9500/150 is:
<pre>0 &gt; <b>dev / ls</b>
  [...]
FF8313F0: /bandit@F4000000
  [...]
FF83F8A0:   /ATY,mach64@D
  [...]
 ok</pre>
Typically, if a card has Open Firmware 
support, it will list a four character vendor ID similar to the vendor's name
(such as <tt>ATY</tt> for ATI, <tt>IMS</tt> for IMS, and <tt>ADPT</tt> for 
Adaptec), and a string describing the model of the card.  The "@" sign
separates the card name from its address in the computer.

<p>Now, note that the <tt>/ATY,mach64@D</tt> entry is indented below the
<tt>/bandit@F4000000</tt> entry.  This means that the <tt>bandit</tt>
device contains the <tt>ATY</tt> device.  In this case,
<tt>/bandit@F4000000</tt> is Open Firmware's name for the PCI bus, and the
ATI card is located on the PCI bus. 

<p><li>Therefore, <tt>/bandit@F4000000/ATY,mach64@D</tt> is it's path in the 
Open Firmware device tree.  Now, to confirm if it
really supports Open Firmware, type the following:
<pre>0 &gt; <b>dev /bandit@F4000000/ATY,mach64@D words</b></pre>
If the word "<tt>open</tt>" is among those listed, then chances are very high
that your card should work.

<p><li>Now, you'd want to type the following 
to set up an Mach64 card to be the Open Firmware output device in your system:
<pre>0 &gt; <b>setenv output-device /bandit@F4000000/ATY,mach64@D</b> ok
0 &gt; <b>reset-all</b></pre>

</ol>

<p>If the monitor attached to your video card stays black after the computer
resets, then there was a problem (possibly you mistyped the path to the card
or the card doesn't really support Open Firmware).


<ENTRY>non-sync-monitor My monitor doesn't always sync when I enter Open Firmware
This is a problem with the PowerMacintosh 7300 - 8600 machines, 
wherein the video signals do not settle quickly enough.  You should apply the 
<a href="SystemDisk-tutorial/of105patch.html">patches</a> for Open Firmware 
1.0.5.

<p>
If you have a Twentieth Anniversary Macintosh, there is no known
solution.  See 
<a href="http://mail-index.netbsd.org/port-macppc/2001/04/26/0008.html">this
post</a> describing the issues.
At this time, no one has reported a successful install onto a
TAM, although, this should be possible by setting the input and output
devices to <tt>ttya</tt> with 
<a href="SystemDisk-tutorial/">System Disk</a> and connecting a serial
cable to another machine running a terminal emulator.


<ENTRY>ofw-use What can I do at the Open Firmware prompt?
<a name="ofw-misc">
You can configure various properties of your system related to booting.</a>
This table merely lists the common commands you might be using and their syntax.

<table border=1 cellpadding=5>
<tr><th>command name</th><th>comment</th></tr>
<tr><td><tt>dev <i>device</i></tt></td><td>changes to current <i>device</i> in 
  Open Firmware device tree (similar to <tt>cd</tt> in a filesystem)</td></tr>
<tr><td><tt>ls</tt></td><td>lists the devices below the current node in the 
  device tree (similar to <tt>ls</tt> in a filesystem)</td></tr>
<tr><td><tt>pwd</tt></td><td>lists the location of the current node in 
  the device tree (similar to <tt>pwd</tt> in a filesystem)</td></tr>
<tr><td><tt>words</tt></td><td>lists the FORTH commands available at the
  current node in the device tree<br>
  to boot, a device must have at least the word `<tt>open</tt>'</td></tr>
<tr><td><tt>.properties</tt></td><td>lists the properties of the current
  node in the device tree</td></tr>
<tr><td><tt>printenv</tt></td><td>prints the current and default values of
  the settings in the Open Firmware environment</td></tr>
<tr><td><tt>setenv <i>variable</i> <i>value</i></tt></td><td>sets a new 
  <i>value</i> for a particular Open Firmware <i>variable</i>.
  See below for a list of <a href="#ofw-variables">Open Firmware
  variables</a></td></tr>
<tr><td><tt>set-default <i>variable</i></tt></td><td>sets the <i>variable</i>
  to its default value.
  See below for a list of <a href="#ofw-variables">Open Firmware
  variables</a></td></tr>
<tr><td><tt>boot <i>boot-device</i> <i>boot-file</i></tt></td><td>loads and 
  runs a program <i>boot-file</i> on <i>boot-device</i>, we use it to load
  <tt>ofwboot</tt> (the "partition zero" bootloader) or 
  <tt>ofwboot.xcf</tt> and then the NetBSD kernel</td></tr>
<tr><td><tt>dir <i>device</i></tt></td><td>print a listing of the files in a 
  particular <i>device</i> (the same as <tt>ls</tt> in unix)</td></tr>
<tr><td><tt>eject fd</tt></td><td>eject a floppy disk</td></tr>
<tr><td><tt>reset-all</tt></td><td>permanently store the Open Firmware
  environment variables and reboot the computer</td></tr>
<tr><td><tt>shut-down</tt></td><td>permanently store the Open Firmware
  environment variables and power down the computer</td></tr>
<tr><td><tt>bye</tt></td><td>Boot MacOS on an Open Firmware 1.0.5, 2.0.x, or
  2.4 system</td></tr>
<tr><td><tt>mac-boot</tt></td><td>Boot MacOS on an Open Firmware 3 
  system</td></tr>
<tr><td><tt>devalias <i>alias</i> <i>device</i></tt></td><td>modify or create 
  an <i>alias</i> to a <i>device</i> (similar to
  <tt>alias</tt> in <tt>csh</tt> and its variants)<br>
  With no options, it lists all current device aliases</td></tr>
</table>

<p>Additionally, here are a few handy keystrokes for effective Open Firmware
use:
<table border=1 cellpadding=5>
<tr><th>keystroke</th><th>function</th></tr>
<tr><td>Backspace</td><td>delete back one character</td></tr>
<tr><td>Delete</td><td>delete back one character</td></tr>
<tr><td>^h</td><td>delete back one character</td></tr>
<tr><td>^d</td><td>delete forward one character</td></tr>
<tr><td>Enter</td><td>send line to FORTH parser</td></tr>
<tr><td>^b</td><td>move back one character</td></tr>
<tr><td>^f</td><td>move forward one character</td></tr>
<tr><td>ESC b</td><td>move back one word</td></tr>
<tr><td>ESC f</td><td>move forward one word</td></tr>
<tr><td>^a</td><td>move back to beginning of line</td></tr>
<tr><td>^e</td><td>move forward to end of line</td></tr>
<tr><td>ESC h</td><td>delete and save back to beginning of word</td></tr>
<tr><td>^w</td><td>delete and save back to beginning of word</td></tr>
<tr><td>ESC d</td><td>delete and save forward to end of word</td></tr>
<tr><td>^k</td><td>delete and save forward to end of line</td></tr>
<tr><td>^u</td><td>delete and save entire line</td></tr>
<tr><td>^r</td><td>retype line</td></tr>
<tr><td>^q</td><td>quote next character</td></tr>
<tr><td>^y</td><td>insert saved characters before cursor</td></tr>
<tr><td>^p</td><td>previous line in history</td></tr>
<tr><td>^n</td><td>next line in history</td></tr>
<tr><td>^l</td><td>display history</td></tr>
<tr><td>^space</td><td>if word so far has a unique completion, complete it
if word so far has several completions, fill in as many characters as possible
if word so far has no completions, erase characters until there is at least 
one completion
<tr><td>^/</td><td>show completions (maybe none) for word so far</td></tr>
<tr><td>^?</td><td>show completions (maybe none) for word so far</td></tr>

<tr><td>^@</td><td>same as ^space (Apple-specific)</td></tr>
<tr><td>^o</td><td>same as ^/ (Apple-specific)</td></tr>
<tr><td>^\</td><td>same as ^b (Apple-specific)</td></tr>
<tr><td>^]</td><td>same as ^f (Apple-specific)</td></tr>
<tr><td>^^</td><td>same as ^p (Apple-specific)</td></tr>
<tr><td>^_</td><td>same as ^n (Apple-specific)</td></tr>
</table>

<p>Also see the <a href="nvedit.html">NetBSD/macppc nvedit HOW-TO</a>, the 
<a href="http://karchive.info.apple.com/article.html?artnum=60285">Apple 
Network Server 500,700: Open Firmware Read Me</a> technote, the
<a href="http://bananajr6000.apple.com/">Apple Computer Open Firmware Home
Page</a>
<a href="http://developer.apple.com/technotes/tn/tn2001.html">"Technote 
2001 - Running files from a hard drive in Open Firmware</a>,
and the <a href="http://playground.sun.com/1275/home.html">Open Firmware
Working Group home page</a>.

<ENTRY>ofw-variables The Open Firmware variables of interest
These are variables that are used by and stored in Open Firmware that affect
booting.  Use the <tt>printenv</tt>, <tt>setenv</tt>, and <tt>set-default</tt>
commands to modify these variables (<a href="#ofw-use">see above</a>), or use
the MacOS SystemDisk utility (see the 
<a href="SystemDisk-tutorial/">tutorial</a>).  Use
the commands in the <a href="nvedit.html">NetBSD/macppc nvedit HOW-TO</a>
to modify the information in the <tt>nvramrc</tt> variable.  Alternatively,
you can hack System Disk with ResEdit. Look in the <tt>OFtc</tt> resource to 
determine which ID System Disk uses for your model. Then edit the appropriate 
<tt>OFpt</tt> resource.

<p>Make sure that, after you are done modifying your settings, that you store
them permanently, by typing:
<pre>0 &gt; <b>reset-all</b></pre>

<p><table border=1>
<tr><th>variable name</th><th>typical value</th><th>function</th></tr>
<tr><td><tt>auto-boot?</tt></td><td>false</td>
  <td>If <tt>false</tt>, stops at Open Firmware prompt when computer is reset<br>
   If <tt>true</tt>, executes <tt><i>boot-command boot-device boot-file</i></tt>
   </td></tr>
<tr><td><tt>use-nvramrc?</tt></td><td>true</td>
  <td>If <tt>true</tt> runs commands in variable <tt>nvramrc</tt></td></tr>
<tr><td><tt>real-base</tt></td><td><i>depends on Open Firmware version</i></td>
  <td>Kernel memory location. <a href="#ofw-real-base">See below</a> for more 
    info</td></tr>
<tr><td><tt>load-base</tt></td><td><i>use default value</i></td>
  <td>XCOFF bootloader memory location. <a href="#ofw-load-base">See below</a>
   for more info</td></tr>
<tr><td><tt>boot-device</tt></td><td><i>depends on configuration</i><br>
  See <tt>ofwboot(8)</tt> for suggestions</td>
  <td>Device from which to load primary bootloader</td></tr>
<tr><td><tt>boot-file</tt></td><td><i>depends on configuration</i><br>
  See <tt>ofwboot(8)</tt> for suggestions</td>
  <td>kernel location</td></tr>
<tr><td><tt>input-device</tt></td><td><i>depends on hardware</i><br>
  <a href="#ofw-input-output-devices">See below</a> for suggestions</td>
  <td>ADB keyboard, USB keyboard, or serial console</td></tr>
<tr><td><tt>output-device</tt></td><td><i>depends on hardware</i><br>
  <a href="#ofw-input-output-devices">See below</a> for suggestions</td>
  <td>On-board video, PCI video, or serial console</td></tr>
<tr><td><tt>nvramrc</tt></td><td><i>entered by System Disk</i></td>
  <td>If <tt>use-nvramrc?</tt> is set to <tt>true</tt>, these FORTH
   commands will be run when the computer is reset</td></tr>
<tr><td><tt>boot-command</tt></td><td>boot</td>
  <td>If <tt>auto-boot?</tt> is <tt>true</tt>, this command will be executed
   when the computer is reset</td></tr>
</table>

<p>Note: <i>zapping your PRAM <tt>Command-Option-P-R</tt> will erase any
settings you have made to these Open Firmware variables.</i>
<p>
Note 2: <i>Booting your Open Firmware 1.0.5 system into MacOS will erase 
any settings you have made to these Open Firmware variables.</i>
<p>
Note 3: <i>In some extreme cases, you may have messed up your Open
Firmware settings such that your system won't boot anymore.  Zapping the
PRAM doesn't fix it.  In this case, you will need to unplug your system
and remove the battery from your motherboard for about 10 minutes.  On a
PowerBook, the equivalent is to resetting your power manager.</i>

<ENTRY>ofw-load-base What's the deal with the "load-base" setting?

The Open Firmware environment variable <tt>load-base</tt> is the address
at which an XCOFF binary will be loaded into memory.  The default value in Open
Firmware 1.0.5 and 2.X is 4000.  If this address is used, then
<tt>ofwboot.xc</tt>f will overwrite Open Firmware and will not load
NetBSD.  We reccommend a <tt>load-base</tt> of 600000 for Open Firmware
1.0.5 and 2.X machines, which is in a safe address range.  Apple realized
they have the same problem with MacOS X, and running the <a
href="SystemDisk-tutorial/">System Disk</a> utility will automatically set
Open Firmware 1.0.5 and 2.X machines to use a <tt>load-base</tt> of 600000.  
Note
that mkLinux uses a different <tt>load-base</tt>, don't try their setting.
<p>
Open Firmware 3 machines have re-writable firmware, and users have found
that setting the <tt>load-base</tt> to 600000 will overwrite their firmware,
rendering their machines dead (requiring an expensive trip back to
Apple).  <b>Do not change the <tt>load-base</tt> on an Open Firmware 3
machine.</b>  Apple has also chosen a more reasonable default value of
<tt>load-base</tt> in Open Firmware 3, so it's not necessary to change it
anyways.
<p>
You should only need to set the load-base when you are booting ofwboot.xcf
directly from Open Firmware.  Note that installboot and the NetBSD
installer do <i>not</i> set up filesystems to contain
<tt>ofwboot.xcf</tt>.  These filesystems have a fake Apple Partition Map
entry with <tt>ofwboot</tt> in the partition map.  This variant of the
bootloader does not have any of these problems associated with
<tt>ofwboot.xcf</tt>.  So, when you are using, for example,
<tt>scsi/sd@0:0</tt> or <tt>fd:0</tt> as a boot device, you are not using
<tt>ofwboot.xcf</tt> and do not need to set your <tt>load-base</tt>.
<p>
Once you are entirely positive that your machine has Open Firmware 1.0.5
or 2.X (see <a href="#ofw-version">above</a>), run the following command
to set your <tt>load-base</tt> properly
(remember, System Disk will do this automatically):

<pre>0 &gt; <b>setenv load-base 600000</b></pre>

You should double-check that this value has been set using the
<tt>printenv</tt> command.


<ENTRY>ofw-real-base What's the deal with the "real-base" setting
The Open Firmware environment variable <tt>real-base</tt> is the address
at which <tt>ofwboot</tt> loads the kernel into memory.  Many users have
reported that the default value of <tt>real-base</tt> causes problems that
manifest themselves as strange SCSI problems, or <tt>ofwboot</tt> hanging
while loading a large kernel (typically over 3 MB in size).
Makoto Fujiwara
<a href="http://mail-index.netbsd.org/port-macppc/2000/08/13/0004.html">
reports</a> that changing the <tt>real-base</tt> will fix this problem.
<p>
Open Firmware 3 machines have re-writable firmware, and users have found
that changing the <tt>real-base</tt> will overwrite their firmware,
rendering their machines dead (requiring an expensive trip back to
Apple).  <b>Do not change the <tt>real-base</tt> on an Open Firmware 3
machine</b>.  In any case, Open Firmware 3 does a much better job of 
dealing with large kernels, so this is not really an issue.
<p>
Once you are entirely positive that your machine has Open Firmware 1.0.5,
2.0.x, or 2.4 (see <a href="#ofw-version">above</a>), run the following commands
to set your <tt>real-base</tt> properly (note, System Disk will <b>not</b>
set this variable properly -- you will need to re-set your
<tt>real-base</tt> after each use of System Disk):
<pre>0 &gt; <b>setenv real-base F00000</b>
0 &gt; <b>reset-all</b></pre>
<p>
You should double-check that this value has been set using the
<tt>printenv</tt> command.
<p>
A workaround for this problem is that you can build a kernel that is less
than 3 MB in size.  Since none of the Open Firmware 1.0.5, 2.0.x, or 2.4 models 
have built-in USB, you can 
build a kernel without any USB drivers (unless you have a PCI USB card).


<ENTRY>ofw-input-output-devices How do I figure out my <tt>input-device</tt> and <tt>output-device</tt>?

This depends entirely on what devices you want use to interact with Open 
Firmware (and thus NetBSD/macppc), as well as the version of Open Firmware
you are using and the hardware you are using.

<p>Once you figure this out, you will need to set these values and store them.
See <a href="#ofw-use">above</a> for info on interacting with Open Firmware.
Briefly, you'll want to execute the following three commands (where
<i>in-device</i> and <i>out-device</i> are what you chose to use):
<pre>0 &gt; <b>setenv input-device </b><i>in-device</i>
0 &gt; <b>setenv output-device </b><i>out-device</i>
0 &gt; <b>reset-all</b></pre>

<p><h3>Open Firmware 1.0.5, 2.0.x, or 2.4 using a keyboard and monitor 
(or built-in LCD)</h3>
By default, most of these models default to a serial console (which is why
many novice users find that when they boot into Open Firmware, their
monitor stays black).  Additionally, some of these models (Performa 54xx, 
6360, 6400, PowerComputing PowerTower, Umax C600, and Apus 3000) have troubles 
using the on-board video device in Open Firmware (and in NetBSD/macppc).  For
these troublesome systems, your only options are a PCI video card or
a serial console.

<p>Go to the <a href="models.html">NetBSD/macppc Model Support Page</a>
and look up your model.  It should list an <tt>output-device</tt> for
your system.  If there is no <tt>output-device</tt> listed, then you should
use <tt>screen</tt>.

<p>If you're using a PCI video card, <a href="#ofw-boot-video">see above</a>
for suggestions on figuring out your <tt>output-device</tt>.

<p>For all these systems, the <tt>input-device</tt> for an ADB or built-in 
keyboard is <tt>kbd</tt>.

<p><h3>Open Firmware 3 using a keyboard and monitor (or built-in LCD)</h3>
By default, all of these systems default to using the USB or built-in keyboard
and the on-board video or built-in LCD.  You shouldn't have to do anything.

<p>If you're using a third-part PCI video card, <a href="#ofw-boot-video">see 
above</a> for suggestions on figuring out your <tt>output-device</tt>.

<p>The default values are that <tt>input-device</tt> is <tt>keyboard</tt> 
(using the built-in or USB keyboard), and <tt>output-device</tt> is 
<tt>screen</tt> (using the built-in LCD, screen, or video interface).


<p><h3>Open Firmware 1.0.5, 2.0.x, or 2.4 using a serial console</h3>
Open Firmware calls your computer's "modem" serial port <tt>ttya</tt>, and its 
"printer" serial port <tt>ttyb</tt>.  Some systems have an internal modem 
(such as the Performa 54xx, 6360, 6400, and 6500) that 
blocks off the built-in serial port.  You will need to set and use your 
printer port <tt>ttyb</tt> for serial console on these models.

<p>On almost all of these machines, the default values for both 
<tt>input-device</tt> and <tt>output-device</tt> is <tt>ttya</tt>, which is 
why many novice users find that when they boot into Open Firmware, their
monitor stays black.

<p>Your serial console settings should be 38400 bps, 8 bits, no parity, 1
stop bit, no flow control, and you can typically use a standard Mac
"printer" cable to connect two Macs (even m68k-based Macs).  See the
<a href="../../Documentation/Hardware/Misc/serial.html">NetBSD Serial 
Port Primer</a> for additional help.

<p><h3>Open Firmware 3 using a serial console</h3>
None of the Open Firmware 3 models ship with serial ports.  Most do, however
have internal modems.  You can purchase a third party device which replaces
the internal modem on most desktop systems with a serial port (such as the Gee 
Three Stealth Serial Port and Griffin Technology gPort).  If you purchase one 
of these, you can set it up to be a serial console.  Set <tt>scca</tt> for both 
your <tt>input-device</tt> and <tt>output-device</tt>.

<p>Your serial console settings should be 57600 bps, 8 bits, no parity, 1
stop bit, no flow control, and you can typically use a standard Mac
"printer" cable to connect two Macs (even m68k-based Macs).  See the
<a href="../../Documentation/Hardware/Misc/serial.html">NetBSD Serial 
Port Primer</a> for additional help.

<ENTRY>ofw-disk-list How do I get a listing in Open Firmware of my SCSI drives
With the following command!  This is the listing on my PowerMacintosh 7300, where
<tt>scsi-int</tt> is the internal SCSI bus, and I've got a hard drive at address
0 and a CD-ROM at address 3.  You'll need to use the <tt>devalias</tt> command
to determine what the name of your disk interface is called (usually one of
<tt>scsi</tt>, <tt>scsi-int</tt>, or <tt>scsi-ext</tt>).  Make sure you include
the space between the first quotation mark and the name of your disk interface.

<pre>0 &gt; <b>" scsi-int" select-dev show-children unselect-dev</b>
Target 0
  Unit 0  Disk     IBM     DCAS-32160      S65A
Target 3
  Unit 0  Removable Read Only device    SONY    CD-ROM CDU-8005 1.0j</pre>


<SECTION>Booting

<ENTRY>boot-support What are the supported ways of booting NetBSD/macppc?

NetBSD/macppc uses Open Firmware to boot, so you can boot NetBSD
from any device that you can boot MacOS from. This includes all variety of
SCSI
and IDE drives (with supported controllers), internal floppies, and
CD-ROMs. (The <a href="../../Sites/cdroms.html#netbsdmissionrelease">NetBSD
Mission 1.5 Release CD-ROM</a> is macppc-bootable.)

<p>You can also boot NetBSD (or MacOS for that matter) off the network,
if your ethernet hardware supports Open Firmware booting. The built-in
ethernet on all supported models is capable of netbooting.
Asante makes an Open Firmware-compliant PCI
ethernet card (the 10NIC PCI), but it's not clear that this card is
supported by NetBSD after you boot it.  There are some Adaptec PCI SCSI
cards with which can boot NetBSD.  See 
<a href="#boot-pci">below</a> for info on booting from a PCI card.

<p>You cannot boot from SCSI drives attached to non-Macintosh SCSI
cards, or non-bootable Macintosh SCSI cards, even if the SCSI card is
supported by NetBSD. Open Firmware also does not support booting off
any USB devices on the earlier machines with built-in USB.  It should be
possible to boot from a USB hard drive on the newer machines, although no
one has tried.

<p>
To add to the confusion, the NetBSD kernel is loaded in anywhere from one
to three stages, each requiring additional setup.

<table border=1>
<tr><td>stage name</td><td>OF 1.0.5 and 2.0.X</td><td>OF 2.4</td><td>OF 3</td>
<td>function</td></tr>

<tr><td><tt>bootxx</tt></td>
<td>yes (optional)</td>
<td>yes (optional)</td>
<td>no</td>
<td>simple first stage bootloader placed in partition "zero" of a disk to
load <tt>ofwboot.xcf</tt><br>
In its current incarnation, this takes the place of the Apple
Partition Map, meaning you can't share a MacOS and NetBSD drive
using <tt>bootxx</tt></td></tr>

<tr><td><tt>ofwboot.xcf</tt></td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>necessary bootloader (loaded from filesystem Open Firmware understands,
<tt>bootxx</tt>, or over ethernet) that understands NetBSD filesystem and
disklabel and can load the ELF kernel (or a gzip'ed kernel)</td></tr>

<tr><td><tt>netbsd</tt></td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>the kernel, needed to run NetBSD.  Loaded by
<tt>ofwboot.xcf</tt>.  On Open Firmware 3 machines, Open Firmware can
load the kernel directly from any filesystem it understands or over
ethernet</td></tr>
</table>

<p>
What makes all this necessary is that no version of Open Firmware
understands the filesystem that NetBSD uses.  This means that you need to
have your system set up such that the necessary files are placed in
filesystems that Open Firmware understands.
<p>
<table border=1>
<tr><td>filesystem type</td><td>OF 1.0.5 and 2.0.X</td><td>OF 2.4</td><td>OF 3</td>
<td>comment</td></tr>

<tr><td>"partition zero"</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>This is where <tt>bootxx</tt> is placed.  Currently, <tt>bootxx</tt>
doesn't support Open Firmware 3 machines</td></tr>

<tr><td>ethernet</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>See <a href="../../Documentation/network/netboot/">The Diskless
HOW-TO</a> for more info</td></tr>

<tr><td>ISO 9660</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
<td>Standard CD-ROM format.  See <a href="#boot-cd">below</a> for more
info</td></tr>

<tr><td>floppy</td>
<td>yes</td>
<td>maybe</td>
<td>no</td>
<td>Open Firmware 3 machines don't ship with floppy drives.  Open Firmware 
2.4 machines have been reported to have problems booting from floppies.
See <a href="#write-floppy">below</a> for tips on how to write a
floppy image.</td></tr>

<tr><td>MS-DOS</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>Note, however, that the bootloader <tt>ofwboot.xcf</tt>
does not understand MS-DOS filesystems and can't load a
kernel on a MS-DOS filesystem.</td></tr>

<tr><td>HFS and HFS+</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>Note, however, that NetBSD doesn't understand HFS filesystems, and if
you place a bootloader or kernel there, you can't upgrade it without using
MacOS or <a
href="ftp://ftp.netbsd.org/pub/NetBSD/packages/pkgsrc/sysutils/hfsutils/README.html">
hfsutils</a></td></tr>
</table>
<p>


Hopefully this clarifies it for you.



<ENTRY>boot-disk How do I make a disk bootable, and what are the Open Firmware commands to boot from it?

This depends entirely on what version of Open Firmware your machine
has.  See <a href="#ofw-version">above</a> for info on determining which
version of Open Firmware your machine has.
<p>

<ul>
<li><h4>Open Firmware 1.0.5 and 2.0.X:</h4> These versions of Open Firmware
 only support booting an XCOFF binary from the following:  ISO 9660 disks, 
 MS-DOS disks, network, and
"whole" disks (partition "0").  For the latter option, there is a very
simple <tt>bootxx</tt> program that will load the second stage bootloader 
(<tt>ofwboot.xcf</tt>).  The <tt>bootxx</tt> bootloader must be installed
in the same
location as the MacOS partition table.  This, of course, makes it
impossible to use share NetBSD "whole" disks with MacOS.
<p>
NetBSD/macppc has a special XCOFF bootloader to load the ELF kernel.  
You need to make sure that Open Firmware uses the same "load-base" as 
the XCOFF bootloader is expecting.  This is set by typing (in Open Firmware)
"<tt>setenv&nbsp;load-base&nbsp;600000</tt>".
To get Open Firmware to load this XCOFF program, you need to do one of 
the following:
<p>

<ul>
<li>Follow the <a href="../../Documentation/network/netboot/">Diskless
HOW-TO</a> and load <tt>ofwboot.xcf</tt> over the network<br>
<tt>boot&nbsp;enet:,\ofwboot.xcf</tt>
<p>

<li>Install <tt>bootxx</tt> and <tt>ofwboot</tt> using the
<tt>installboot</tt> program (the
NetBSD/macppc installer will do this automatically).  To do this
manually from within NetBSD/macppc:<br>
<tt>cp /usr/mdec/ofwboot </tt><em>bootfile</em><br>
<tt>/usr/mdec/installboot </tt><em>bootfile</em><tt> /usr/mdec/bootxx
</tt><em>bootdev</em>
<p>

where <em>bootfile</em> is a path to the file "<tt>/boot</tt>" on
the root filesystem of the disk you want to make bootable, and
<em>bootdev</em> is the raw device node for the device containing that
file.
<p>

So if you have booted off floppy or network, and have the
filesystem (say it's sd0) mounted on /mnt, you would do:

<pre>
	cp /usr/mdec/ofwboot /mnt/boot
	/usr/mdec/installboot /mnt/boot /usr/mdec/bootxx /dev/rsd0a
</pre>
<p>

Note that since installboot needs access to both the raw device and
the mounted filesystem, it is only possible to run it in single-user
mode, or from an "options INSECURE" kernel.
<p>

<li>Copy <tt>ofwboot.xcf</tt> to the top level of an ISO 9660 format
CD-R.  To load it from an ISO 9660-formatted SCSI
CD-ROM drive, you might use something like:<br>
<tt>boot&nbsp;scsi/sd@3:0,ofwboot.xcf</tt>
<p>

See <a href="#boot-cd">below</a> for more detail.
<p>

<li>Have <tt>bootxx</tt> and <tt>ofwboot.xcf</tt> located on a floppy
disk (such as the NetBSD/macppc install floppy)<br>
<tt>boot fd:0</tt>

<li>Have <tt>ofwboot.xcf</tt> located on a DOS format floppy disk<br>
<tt>boot fd:1,ofwboot.xcf -a</tt><br>
Note that ofwboot does <i>not</i> know how to load files from a
DOS filesystem (such as the kernel).
</ul>

<p><li><h4>Open Firmware 2.4:</h4> This version of Open Firmware only supports
booting and XCOFF image from the following: HFS and HFS+ disks, ISO 9660 
disks, MS-DOS disks, and
network.  You cannot use the same <tt>installboot</tt> program that is
used for earlier versions of Open Firmware.
<p>NetBSD/macppc has a special XCOFF bootloader that will load the ELF
kernel.  
You need to make sure that Open Firmware uses the same "load-base" as 
the XCOFF bootloader is expecting.  This is set by typing (in Open Firmware)
"<tt>setenv&nbsp;load-base&nbsp;600000</tt>".
To get Open Firmware to load this XCOFF program, you need to do one of the
following:
<p>

<ul>
<li>Follow the <a href="../../Documentation/network/netboot/">Diskless
HOW-TO</a> and load <tt>ofwboot.xcf</tt> over the network<br>
<tt>boot&nbsp;enet:0,\ofwboot.xcf</tt>
<p>

<li>Copy <tt>ofwboot.xcf</tt> to the top level of a MacOS formatted
drive on a HFS or HFS+ format partition (make sure you transfer it in
binary mode).
<p>

<li>Copy <tt>ofwboot.xcf</tt> to the top level of an ISO 9660 format
CD-R.
<p>

See <a href="#boot-cd">below</a> for more detail.
<p>

<li>Have <tt>ofwboot.xcf</tt> located on a DOS format floppy disk<br>
<tt>boot fd:1,ofwboot.xcf -a</tt><br>
Note that ofwboot does <i>not</i> know how to load files from a
DOS filesystem (such as the kernel).
</ul>

<p><li><h4>Open Firmware 3.0 and later:</h4> This version of Open Firmware 
only supports loading ELF binaries from the following: HFS and HFS+ disks,
MS-DOS disks, and network.  
<p>
NetBSD/macppc has a special ELF bootloader that will load the kernel.  
Also, these machines support support loading the ELF kernel directly, To
get Open Firmware to load this ELF program, you need to do one of
the following:
<p>

<ul>
<li>Follow the <a href="../../Documentation/network/netboot/">Diskless
HOW-TO</a> and load <tt>ofwboot.xcf</tt> or <tt>netbsd</tt> over the
network<br>
<tt>boot&nbsp;enet:0,\ofwboot.xcf</tt>
<p>

<li>Copy <tt>ofwboot.xcf</tt> or <tt>netbsd</tt> to the top level of a
MacOS formatted
drive on a HFS or HFS+ format partition (make sure you transfer it in
binary mode)<br>
<tt>boot hd:,ofwboot.xcf</tt>
<p>

<li>Copy <tt>ofwboot.xcf</tt> and <tt>netbsd</tt> to the top level of a
hybrid HFS/ISO 9660 format CD-R<br>
<tt>boot cdrom:ofwboot.xcf</tt>
<p>
See <a href="#boot-cd">below</a> for more detail.
</ul>
</li>
</ul>


<ENTRY>write-floppy How do I write the floppy image?
First, have you done a low-level format with verification and found a floppy
with no bad sectors?  OK, good -- failing to do this leads to problems later.

<p>There are a number of ways to write a raw image to floppy disk:
<ul>
<li>Use dd(1) under NetBSD or another unix.
<li>Use rawrite.exe (as supplied with <a href="../i386/">NetBSD/i386</a>) 
  on a DOS/Windows machine.
<li>Use 
<a href="ftp://ftp.netbsd.org/pub/NetBSD/arch/macppc/floppy/README.rawdisk">suntar</a> 
  under MacOS.
<li>Under certain circumstances, Apple's Disk Copy utility can do it.
<ol>
 <p><li>If you are using MacOS 8.6 or earlier, you will need to
  change the type and creator of the disk image to <tt>ddsk</tt> and <tt>dimg</tt>
  before Disk Copy will open the file.
 <p><li>Download, install, and run
  <a href="http://til.info.apple.com/techinfo.nsf/artnum/n60353">Disk Copy</a> 
  6.3.3.
 <p><li>From the <tt>Utilities</tt> menu, pick <tt>Make a Floppy</tt>
 <p><li>Chose <tt>boot.fs</tt> in the dialog box
 <p><li>Insert a floppy
</ol>
</ul>

<p>Note that you can't just boot off this floppy like you would boot
off a MacOS floppy: you must boot into Open Firmware and then type
"<tt>boot fd:0</tt>".

<ENTRY>boot-pci How do I boot from a PCI card?
Some PCI cards have Open Firmware drivers and you can boot from them.  In
particular, Asante makes some ethernet cards with Open Firmware drivers and
most of Adaptec's SCSI cards have Open Firmware drivers.  Note, that just 
because a card works in Open Firmware does not mean it's supported by 
NetBSD (and vice versa).
<p>
The first step is to figure out what the PCI card is called in terms of
Open Firmware names.  Apple created aliases for the common devices
built-into their machines (such as scsi, hd, and enet).  Third parties
(i.e. makers of PCI cards) cannot do this.  You can get a list of all of
the devices with Open Firmware drivers by typing at the Open Firmware 
prompt:<br>
<tt>0 &gt; <b>dev / ls</b></tt>
<p>Now, it's just a matter of figuring out what your device is
called.  Usually the vendor name is embedded in the name of the device,
such as <tt>/pci/pci-bridge@d/ADPT,2930@3</tt> (which has ADPT signifying
this is an Adaptec product, and the model number is 2930).
<p>
Next, you need to make sure your device is bootable.  It needs the
Open Firmware "word" <tt>open</tt>.  You can find this out by looking at
the Open Firmware "words" this device supports:<br>
<tt>0 &gt; <b>dev /pci/pci-bridge@d/ADPT,2930@3</b><br>
0 &gt; <b>words</b></tt>
<p>
If the "open" word is present in this list, then your device should be
bootable from Open Firmware.  You'd need to boot with something like the
following:<br>
<tt>0 &gt; <b>boot /pci/pci-bridge@d/ADPT,2930@3/@5:0</b></tt><br>
where the 5 is the SCSI ID of the drive you're attempting to boot from,
and 0 is the partition number.
<p>
Note, you can shorten the name <tt>/pci/pci-bridge@d/ADPT,2930@3</tt> to
<tt>/pci/@d/@3</tt> all that really matters is the address behind the at
sign.

<p><i>Note about the Adaptec 2940 series of SCSI cards</i>.  There are
three versions of the Firmware for this series of SCSI cards.  If you are
using this card on a PowerMacintosh 7300 thru 9600, then you cannot use
the card to boot from Open Firmware.  See 
<a href="http://mail-index.netbsd.org/port-macppc/2001/04/27/0000.html">this
post</a> which has more information.

<ENTRY>boot-net How do I set up netbooting?

See the <a
href="../../Documentation/network/netboot/">Diskless NetBSD
HOW-TO</a>.

<p>Mitchell Spector has also created a page containing a concise <a
href="http://www.enchantedlearning.com/tech/netbsd_imac.shtml">iMac-specific
netbooting information</a>.

<ENTRY>netboot-probs Common netboot problems
<ul>
<p><li><pre>0 &gt; <b>boot enet:,\ofwboot.xcf </b>BOOTP failed
 can't OPEN enet:
 ok</pre>
Bootp or DHCP server isn't responding to client's request.  Check that the 
server is running, that it's on the same ethernet subnet, and that it has 
the correct ethernet hardware (MAC) address for the client.  Look for
<tt>local-mac-address</tt> in the output of:
<pre>0 &gt; dev enet .properties</pre>

<p><li><pre>CLAIM failed</pre>
See <a href="#ofw-claim-failed">above</a>.

<p><li><pre>TFTP timeout</pre>
Either the server's TFTP server isn't running, or you're using a model with
Open Firmware 1.0.5 and not specifying the location of the bootloader.
Unfortunately, on the early models, <tt>ofwboot.xcf</tt> gets confused and
doesn't work right unless you load it explicitly from the <tt>boot-device</tt>,
even if the bootp or DHCP server provides the correct information.
You need boot with a command like:
<pre>0 &gt; <b>boot enet:,\ofwboot.xcf</b></pre>

<p><li><pre>enet:,/netbsd.ram.gz: Inappropriate file type or format</pre>
Although <tt>ofwboot.xcf</tt> should be able to handle gzip'ed kernels, 
on Open Firmware 1.0.5 systems, it can't.  Uncompress it.
</ul>

<ENTRY>cdr151 Where is the official NetBSD/macppc 1.5.x CD-R image stored?
Look for the <a href="../../mirrors/#iso">NetBSD Download Site</a>
closest to you.
<p>
The command to boot an Open Firmware 1.0.5, 2.0.x, or 2.4 system from a SCSI 
drive is (make sure to capitalize the filenames):
<pre>boot <i>scsi-int</i>/sd@3:0,\OFWBOOT.XCF NETBSD.MACPPC</pre>
<p>
You may need to replace <tt><i>scsi-int</i></tt> with the devalias of your 
CD-ROM device.
<p>
The command to boot an Open Firmware 3 system is (make sure to use lower case
file names):
<pre>boot cd:,\ofwboot.xcf netbsd.macppc</pre>

<p>
<i>Note: The install kernel on this CD will not recognize  the IDE bus in the
PowerMacintosh G3 (Blue & White) systems.</i>  <a href="#nodisk">See below</a>.


<ENTRY>boot-cd How do I set up my own bootable CD-ROM?
Create an ISO 9660 image with <tt>ofwboot.xcf</tt> and a
<i>gunzip</i>ed kernel.  Be careful with some of the MacOS gunzip
programs, as they may extract the kernel as an ASCII file.  Place both the
ofwboot and kernel files are at the top level of the CD
(i.e. <tt>/</tt>).  You may also wish to place the other distribution
files on the CD for installation (such as base.tgz, etc.tgz, and so on).
<p>
Burn the CD.  Boot into Open Firmware.  From Open Firmware, boot your
machine from the CD.  Depending on which Open Firmware version, you may need a
different boot command.  For example:

<table cellpadding=5>
<tr><td><tt>boot scsi/sd@3:0,ofwboot.xcf -a</tt></td>
<td>for an Open Firmware 1.0.5 machine with CD on the "scsi" Open Firmware bus<br>
<i>Note: Open Firmware 1.0.5 cannot load <tt>ofwboot.xcf</tt> from a hybrid 
ISO/HFS CD, only pure ISO</i></td></tr>
<tr><td><tt>boot&nbsp;ata/atapi-disk:0,ofwboot.xcf&nbsp;-a</tt><br>
<tt>boot ide1/disk@0:0,ofwboot.xcf -a</tt></td>
<td> for an Open Firmware 2.0.X machine without a <tt>cd</tt> devailas</td></tr>
<tr><td><tt>boot cd:ofwboot.xcf -a</tt></td>
<td>for an Open Firmware 2.0.X, 2.4, or 3 machine</td></tr>
<tr><td><tt>boot cd:netbsd</tt><br>
<td>for an Open Firmware 3.0 machine<br>
<i>Note: Open Firmware 3 can only load from a hybrid HFS/ISO CD</i></td></tr>
</table>
<p>
When it prompts you for a kernel, type in <tt>netbsd</tt>
<p>
Alternatively, if this ends up being problematic, you can just burn the
boot floppy image directly to CD-ROM.  Note, this will only work with
machines that have Open Firmware 1.0.5 or 2.X (i.e. not Open Firmware 3.0 or
greater).  If you take this route, then do not specify
<tt>ofwboot.xcf</tt> as the filename.  Instead, you'll be using the zeroth
partition, as the bootxx bootloader has already been installed in this
filesystem image.  You'd use something like <tt>boot&nbsp;scsi/sd@3:0</tt>
or <tt>boot&nbsp;cd:0</tt>.



<ENTRY>bootx Can I use the Linux BootX utility to boot NetBSD/macppc?
No, although the BootX maintainer has said he will accept patches for
NetBSD support if someone else writes them. (See the <a
href="http://mail-index.netbsd.org/port-macppc/1999/03/12/0002.html">port-macppc
mail archives</a>.)
<p>
Note, this is entirely different than the Darwin BootX bootloader.

<ENTRY>bootx-darwin Can I use the Darwin/MacOS X BootX bootloader to boot NetBSD/macppc?
No, although it should be easier to port to NetBSD/macppc than the linuxppc
BootX, since the Darwin BootX uses Open Firmware.

<p>
See <a href="http://mail-index.netbsd.org/port-macppc/2000/12/12/0003.html">
this post</a> for instructions on getting the BootX source code if you're
interested in working on this.

<p>
This repository also contains nvram patches for machines with Open
Firmware 2.4 and earlier, based on the patches in System Disk.


<ENTRY>ofw-boot-keys Are there any other magic keys to change the boot sequence?

Besides the familiar Command-Option-P-R to reset the PRAM (which will
erase your Open Firmware settings), and the
slightly-less-familiar Command-Option-Shift-Delete to boot from the
first bootable device other than the normal boot device, on some
machines you can also hold down "C" to boot off the internal CD-ROM
drive, "N" to net boot, "Z" to boot from an internal Zip drive, or "D"
for force booting from the internal disk if the default boot device
has been set to something else. (These are referred to as "snag keys"
in Apple's literature.)

<p>These actually use the "cd", "enet", "zip", and "hd" devaliases in
Open Firmware, respectively, so changing the aliases will change the
effects of these keys. Some models do not support all of the keys.


<SECTION>Booting problems

<ENTRY>common-of-probs Common Open Firmware Booting Problems
See info on <a href="#ofw-boot-serial">black monitors</a>,
<a href="#ofw-claim-failed"><tt>CLAIM failed</tt></a>,
<a href="#default-catch"><tt>DEFAULT CATCH!</tt></a>,
<a href="#ofw-load-base"><tt>load-base</tt></a>,
<a href="#cant-open"><tt>can't OPEN</tt></a>,
<a href="#formatstate-not-valid"><tt>unrecognized Client Program</tt></a>,
<a href="#bad-partition"><tt>bad partition number</tt></a>,
and <a href="#ofw-real-base"><tt>real-base</tt></a>.

<ENTRY>ofw-claim-failed <tt>CLAIM failed</tt>

This is a general message from Open Firmware to the effect that it failed
to allocate some memory.  There are several known causes for this to
happen.
<p>
This often means that the memory is messed up.  If you tried something and
it failed, then you tried another and got a "CLAIM failed" message, then
this is an indication that you should reboot between attempts (the Open Firmware
command is "reset-all").

<p>If your machine is Open Firmware version 1.0.5 or 2.X, this error
does sometimes appear randomly.  You might try the boot command a second
time (this is
known to work on some models).  Otherwise, if you are not
using a serial console, there might be a conflict between the screen
driver and Open Firmware which prevents Open Firmware from loading
ofwboot.xcf.  There are several models that cannot be booted while
using the screen and keyboard.  In particular, if your system uses the 
"valkyrie" style video (type <tt>'devalias screen'</tt> to see), you 
must boot from a serial console.  The
only known workaround is to use a serial console (i.e. set your input and
output devices to ttya or ttyb).  You can use the System
Disk utility (see the <a href="SystemDisk-tutorial/">tutorial</a>)
to set the input and output to ttya, or in Open Firmware,
type: 
<pre>0 &gt; <b>setenv input-device ttya</b>
0 &gt; <b>setenv output-device ttya</b>
0 &gt; <b>reset-all</b></pre>
<p>
This will reset the machine and send console messages out the modem port
at 38400 bits per second, 8 bit bytes, 1 stop bit and no parity.

<ENTRY>default-catch <tt>DEFAULT CATCH!</tt>
If your machine is Open Firmware version 1.0.5 or 2.X, this error
does sometimes appear randomly.  You might try the boot command a second
time (this is
known to work on some models).  It's also an indication that either your
floppy disk is bad, or the floppy drive is bad.

<p>Otherwise, if you are not
using a serial console, there might be a conflict between the screen
driver and Open Firmware which prevents Open Firmware from loading
ofwboot.xcf.  There are several models that cannot be booted while
using the screen and keyboard.  The
only known workaround is to use a serial console (i.e. set your input and
output devices to ttya or ttyb).  You can use the System
Disk utility (see the <a href="SystemDisk-tutorial/">tutorial</a>)
to set the input and output to ttya, or in Open Firmware,
type: 
<pre>0 &gt; <b>setenv input-device ttya</b>
0 &gt; <b>setenv output-device ttya</b>
0 &gt; <b>reset-all</b></pre>
<p>
This will reset the machine and send console messages out the modem port
at 38400 bits per second, 8 bit bytes, 1 stop bit and no parity.

<ENTRY>cant-open <tt>can't OPEN</tt>
Open Firmware either can't open the device you specified (because it is not
present or the device path is mistyped) or the file you specified. Check
your typing and check to make sure that the media has the files you think
it has. 

<ENTRY>formatstate-not-valid <tt>unrecognized Client Program formatstate not valid</tt>
This is a general Open Firmware error message indicating that the filename
you tried to open either doesn't exist or is in the wrong format. For
Open Firmware 1 and 2 machines, it must be an XCOFF file (such as
<tt>ofwboot.xcf</tt>)
and for Open Firmware 3 machines, it must be either XCOFF or ELF (such as
a kernel).

<ENTRY>bad-partition <tt>bad partition number, using 0no bootable HFS partition</tt>
You tried booting an Open Firmware 1.x or 2.0.x machine from a device
which has an HFS filesystem on it (such as a hybrid CD-R or a hard drive
with MacOS partitions). 

<ENTRY>pb418 PowerBook (FireWire), PowerBook G4 (Titanium), and BootROM 4.1.8
The two models listed above will fail to boot NetBSD 1.5.x and earlier if 
they have have <a href="#ofw-version">BootROM</a> version 4.1.8 or later.
<p>
Unfortunately, you will either need to 
<a href="../../Documentation/kernel/#how_to_build_a_kernel">build a new 
kernel</a> from -current to boot
NetBSD on these models, or send your machine back to Apple to be flashed to an
earlier BootROM version.


<ENTRY>grey-screen Why does the screen turn grey with a flashing question-mark when I try booting?
This means that your system is trying to boot MacOS.  You might get to this state
if you didn't properly <a href="#ofw-access">enter Open Firmware</a>, or if
your Open Firmware boot command is misformed.

<p>If you typed a bad <tt>boot</tt> command, Open Firmware tries to boot
from the <tt>boot-device</tt> variable, whose default value is the MacOS ROM.
The grey screen with the flashing question-mark means that your machine is 
looking for a bootable MacOS filesystem, but can't find one.  The boot floppy 
does not have a bootable MacOS filesystem, it has a bootable NetBSD filesystem.
<p>
Reboot, re-enter Open Firmware and check your syntax carefully.


<ENTRY>black-lcd Why did my screen turn black during boot?
This is a bug.  The NetBSD kernel has turned off your backlight.  Turn up
the brightness on your PowerBook screen to fix this.
<p>
If you don't have a PowerBook, then your system has defaulted to using a
serial console.  See <a href="#ofw-boot-serial">above</a>.

<ENTRY>drive-spinup My hard drive didn't spin up before Open Firmware tried booting
To add a delay before trying to boot (to allow a hard drive to spin up),
put the <a href="SystemDisk-tutorial/of105patch2.txt">following
patch</a> in your nvramrc:

<pre>: wBoot
begin
 boot-device ['] $boot catch drop
 ." -Waiting for boot-device" cr
 d# 500 ms
key? until
;</pre>

Then you need to run <tt>nvstore</tt>.  See the 
<a href="nvedit.html">NetBSD/macppc nvedit HOW-TO</a> for more help patching
your nvramrc.  Now, you need to specify that your
boot command is different, so at the Open Firmware prompt, type:<br>

<tt>0 &gt; <b>setenv boot-command wBoot</b></tt>
<p>

Alternatively, you can just patch the boot-command:<br>

<tt>0 &gt; <b>boot-command begin ['] boot catch 999 ms cr again</b></tt>
<p>
There are reports that this single-line alternative doesn't work on some
early Open Firmware 1.0.5 models.


<ENTRY>nodisk Where's my disk? (a.k.a. sysinst says <tt>I can not find any hard disk for use by NetBSD</tt>)
Well, that's a good question!

<p>The root cause is that NetBSD didn't find your hard drive (or, more 
insidiously, didn't find your drive controller).  There a variety of reasons
why this happens.  First determine whether it found your IDE controller 
(in the boot messages that scroll by, you should see a line with <tt>wdc0</tt>
(for IDE) or <tt>scsibus0</tt> (for SCSI)).  If not, then you'll just have
to use a different kernel that supports your drive bus.  Post to
<a href="mailto:port-macppc@netbsd.org">port-macppc@netbsd.org</a> for help.

<p>Now, eliminate the easy problems (drive plugged in, powered on, and
has jumpers set correctly).  Check that the drive works under MacOS.

<p>If NetBSD still can't find the disk, then for SCSI disks, check the 
termination.  Even though MacOS can use it, NetBSD may be pickier about the
timings on the SCSI bus.

<p>If you have a recent machine which support ATA4, and/or you've 
installed a recent FirmWare update (late 2001), and you're trying to use 
NetBSD 1.5.2, you may run into some problems.  See 
<a href="#wdc-lost-interrupt">above</a>.

<p>If you've got an IDE drive, then you may have a PowerMacintosh
G3 (Blue and White) or an earlier system.  It wasn't until after the B&amp;W
system that Apple fully worked out all the kinks with IDE devices.  Many
people report that they have to put their NetBSD drive on the alternate
IDE bus, and/or make it master (setting the CD-ROM to be slave).

<p>To make the matters worse, the NetBSD 1.5.1 install kernel image does
not support the IDE controller in the PowerMacintosh G3 (Blue and White).  The
real kernel does support it.

<p>Unfortunately, you may need to play around a bit to find the right
combination that works for all the OSes you use on your system.  Keep in
mind that any system that does not have Open Firmware 3 cannot boot from
slave devices (an Open Firmware limitation).

<p>Chris Tribo has posted a good breakdown of the early G3 models and their 
limitations/identification.  See his 
<a href="http://mail-index.netbsd.org/port-macppc/2001/07/26/0019.html">post</a>.
Also see the Apple Knowledgebase 
<a href="http://kbase.info.apple.com/cgi-bin/WebObjects/kbase.woa/24/wa/query?type=id&amp;val=24342">article</a>
on this topic (you need to sign in with 'macppc@netbsd.org' and 'macppc').


<!-- ======================================== -->
<SECTION>Misc

<ENTRY>elf Where is <tt>ldconfig</tt>/<tt>ld.so.conf</tt>?

NetBSD/macppc uses ELF, so it does not have <tt>ldconfig</tt> or
<tt>ld.so.conf</tt>. See the <a
href="../../Documentation/elf.html">NetBSD ELF FAQ</a> for more
details.


<ENTRY>cross-compile How can I cross-compile from another NetBSD architecture?

First, build and install the cross/powerpc-netbsd package in the
packages collection.

To build a kernel, configure it as you normally would, and then build
it with:

<pre>
	make PATH=/usr/pkg/cross/powerpc-netbsd/bin:$PATH \ 
		MACHINE=macppc MACHINE_ARCH=powerpc depend all
</pre>

Cross-compiling userland is slightly more complicated. (XXX finish)

(XXX this should move to an MI FAQ)


<ENTRY>linux Can NetBSD/macppc run MkLinux or LinuxPPC binaries?
Almost! Work is in progress, and we already had some success with some 
binaries such as Netscape Navigator. Please check the Linux compatibility
for NetBSD/PowerPC
<a href="http://gizmo.minet.net:8080/emul_linux/">status page</a> for
more information.
<p>
This feature is <i>not</i> included in NetBSD 1.5.x.  You will need to run
a <tt>-current</tt> kernel or wait for a future release of NetBSD.


<ENTRY>macos Can NetBSD/macppc run MacOS binaries?
Well, some day someone might get <a
href="http://www.ibrium.se/linux/mac_on_linux.html">Mac-on-linux</a>
(for LinuxPPC) to work.  Meanwhile, try
<a href="http://www.uni-mainz.de/~bauec002/B2Main.html">Basilisk II</a>
or <a href="http://www.vmac.org">VMac</a>
both of which emulate a 68k Mac.


<ENTRY>macosx Can NetBSD/macppc run Darwin/MacOS X binaries?
No, although theoretically it should be possible.  The Darwin binaries are in
<tt>Mach-O</tt> format, which is a rarity, as most unix-like OSes use 
<tt>a.out</tt>, <tt>ELF</tt>, or <tt>XCOFF</tt> binaries. 

<ENTRY>keys What do the <img src="../../images/ports/macppc/icon-command.gif" width="13" height="13" alt="command key"> and <img src="../../images/ports/macppc/icon-option.gif" width="17" height="13" alt="option key"> icons mean

Apple has some unusual keys on its keyboards that may confuse some people
(particularly with non-US keyboards).  The key with the
<img src="../../images/ports/macppc/icon-command.gif" width="13" height="13"
alt="command key"> symbol on it is commonly
referred to as the "Command" key.  Some keyboards also have an "open apple"
(<img src="../../images/ports/macppc/icon-open-apple.gif" width="13" height="15"
alt="open apple key">) on the
command key as well.  On non-US keyboards, the key with the
<img src="../../images/ports/macppc/icon-option.gif" width="17" height="13"
alt="option key"> symbol on
it is labeled as the "option" key on US keyboards.
<p>
Often, when you read Mac documentation, you'll see the instruction to hold
down "C-O-p-r" or some other variation.  This means you should hold down
the command and option keys in addition to the letters "p" and "r". 

<ENTRY>german-kbd-at Where's the "at" (@) key on a German ADB keyboard?
Under MacOS, it is Shift-Alt-1, and in Open Firmware, it is Shift-Alt-2.

<ENTRY>adb-short How do I boot my system without an ADB keyboard?
If you're using a serial console, don't have an ADB keyboard, and don't
want to reach behind (or wherever) your real power switch is located, you
can create a hardware hack that appears to the computer to be the
"power" key on an ADB keyboard.  All macs have a real power switch (be it
soft or hard power), it may just be a bit hidden.  This will void your
warrantee, don't hold us liable, etc.  See Chris Tribo's 
<a href="http://mail-index.netbsd.org/port-macppc/2001/06/09/0002.html">post</a>
to the mailing list on this topic.

<!-- ======================================== -->
</LIST>

<a href="./">Up to <em>NetBSD/macppc Port Page</em></a>
<hr>

<DOCLINK>

<hr>
<address>
  <small>
  <a href="../../Misc/feedback.html">(Contact us)</a>
  $NetBSD: faq.list,v 1.93 2001/12/20 07:09:17 mbw Exp $<br>
  <a href="../../Misc/disclaimer.html">Copyright &copy;
    1998, 1999, 2000
    The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
  </small>
</address>

</body>
</html>
