<html>
<head>
<!-- Copyright (c) 2000
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<link rev="made" href="mailto:www@NetBSD.ORG">
<title>How to contribute to NetBSD</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<h1 align=center>
  <big>
    <font face="helvetica, arial">Developing</font>
    <font color="#FF0000" face="helvetica, arial">NetBSD/hpcmips</font>
  </big>
</h1>

<p>
This page contains information that current and potential developers of
NetBSD/hpcmips might find useful.

<LIST>
<SECTION>Environment for developers

<ENTRY>env-dev Self compile Environment

developers needs Ethernet cards and Large disks.
typcal CE system has CF slot and PCMCIA slots.
assign CF to Ethernet card and PCMCIA to ATA/SCSI Interface.

<dl>
  <dt>CF Ethernet card
  <dt>Type1:
  <dd>Socket Communication CF Ether Cards
  <dd>TDK CF Ethernet Cards
  <dt>Type2:
  <dd>Zircom CF Ethernet Cards
  <dt>PCMCIA SCSI Card
  <dt>Adaptec SlimSCSI 1460 series Card with any SCSI Disk works fine.
  <dt>Adaptec SlimSCSI 1480 is Cardbus version,CardBus won't work.
  <dd>If you want to build NetBSD/hpcmips system from source file.
  you have 2G SCSI Disks.
  <dd>If you want to build NetBSD/hpcmips system with all packages
  from source file,5-10G Disks required.
  <dt>PCMCIA ATA Card
  <dd>some ATA-PCMCIA cards works fine,but I recommended SCSI system.
</dl>

<SECTION>Building NetBSD/hpcmips bits

<ENTRY>prep-bins Preparing your system to build a kernel and binaries

<dl>
    <dt>Cross Compiler
    <dd>To make Cross Compiler,use -Dhpcmips option flag.
    <dd>It makes -msoft-float & not use GOFAST lib.
    <dd><a href="ftp://www.cec.co.jp/usr/sakamoto/NetBSD/experiment/cross-netbsd.tgz">cross-netbsd.tgz</a>...  A NetBSD hosted cross environment in pkgsrc format.
    <dd><a href="ftp://ftp.netbsd.org/pub/NetBSD/arch/hpcmips/cross/i386-hpcmips/mipsel-netbsd.tgz">mipsel-netbsd.tgz</a> i386 cross compile environment.(experimental)
 </dl>

<ENTRY>src-cvs Getting Source from NetBSD CVS tree.

NetBSD/hpcmips use same source tree as other NetBSD plathome.
<a href="http://www.netbsd.org/Documentation/current/">
Tracking NetBSD-current </a> helps you.
NetBSD-current source tree URL is <a href="ftp://ftp.jp.netbsd.org/pub/NetBSD-current/tar_files/src/"><i>ftp://ftp.netbsd.org/pub/NetBSD-current/tar_files/src/</i></a>.
<dl>
<dt> getting current source snapshot
<dt> See <a href="http://www.netbsd.org/Sites/net.html#anoncvs">AnonCVS mirrors</a> and select your nearest anoncvs server.
<dt> CVS/Repository path fix to your nearest anoncvs server
<dt> access anoncvs server (cf. to access jp.netbsd.org anoncvs server)
<dd> cvs -d :pserver:anoncvs@jp.netbsd.org:/cvs/cvsroot login
<dd> cvs -d :pserver:anoncvs@jp.netbsd.org:/cvs/cvsroot co src
<dd> cvs update -P -d
</dl>
<pre>
fix CVS Repository Paths to your nearest server.

sh
for f in `find . -name Repository`; do
        mv $f $f.orig
        sed -e 's|^|/cvs|' $f.orig > $f
        rm $f.orig
done
echo ":pserver:anoncvs@sup.jp.netbsd.org:/cvs/cvsroot" > /tmp/A
find . -name Root -exec cp /tmp/A {} \;

</pre>

<ENTRY>build-bins Building a kernel and binaries

<SECTION>NetBSD/hpcmips kernel hacking

<ENTRY>add-platform Adding support for a new system

<!-- XXX REWORK -->
<dl>
  <dt>commit syssrc/sys/arch/hpcmips/hpcmips: platid.def
  <dt>make syssrc/sys/arch/hpcmips/ dir.
  <dd>regen syssrc/sys/arch/hpcmips/include: platid_generated.h platid_mask.h
  <dt>commit syssrc/sys/arch/hpcmips/ dir.
  <dt>add entry /syssrc/sys/arch/hpcmips/stand/pbsdboot/main.c and commit
  <dt>keyboard translation table
  <dd>commit /syssrc/sys/arch/hpcmips/vr/vrkiu.c
</dl>

<SECTION>pbsdboot.exe - boot program from CE environment 

<ENTRY>prep-booter Preparing to build Windows CE programs

<p>
To build the NetBSD/hpcmips Windows CE "standalone" programs, you will
need to use a properly configured Windows NT 4.0 system.  This section
will tell you what you tools you need and how you should configure your
system to build the standalone programs.  You should read the whole
section before you proceed, but beware, some of the names of the
products mentioned here are a bit confusing.

<p>
Building the NetBSD/hpcmips standalone programs <em>requires</em> Japanese
language character encoding ("code page") support in Windows NT.
If your installation of Windows NT does not already support
Japanese language character encoding, you will need to install
the Japanese Language Pack.  (Windows NT installations in the United
States will typically not include this support, even if you've installed
Japanese language support for recent versions of Internet Explorer.)
To install the Japanese Language Pack:

  <ol>
    <li>Put your Windows NT 4.0 CD-ROM into your PC's CD-ROM drive.
    <li>With the Windows NT Explorer, enter the "<tt>langpack</tt>" directory
      in the root of the CD-ROM.
    <li>Right-click on the file named "<tt>Japanese</tt>"
      ("<tt>Japanese.inf</tt>" if you have Explorer set to display known
      file extensions), and select the "<tt>Install</tt>" menu option to
      install the language pack.
    <li>When the system has finished installing the language pack, reboot
      your system.
  </ol>

<p>
Microsoft Visual C++ and the Windows CE Toolkit for Visual C++ are
<em>required</em> to build the NetBSD/hpcmips standalone programs.
Versions 5.0 and 6.0 of Visual C++ are known to build the standalone
programs correctly.  (You might be able to substitute the Windows CE
Platform Builder or the Windows CE Embedded Toolkit in place of the
Windows CE Toolkit if you don't have the latter, but this documentation
assumes that if you have the expensive tools you know how to use them.)
To prepare these tools:

  <ol>
    <li>Install Microsoft Visual C++ 5.0 or 6.0.
    <li>Install the Windows CE Toolkit for Visual C++ corresponding
      to your version of Visual C++ (e.g., the Windows CE Toolkit for
      Visual C++ 6.0, if you're using Visual C++ 6.0.  (If you are
      doing a custom installation, you do not have to install the
      cross-compilation tools for platforms other than "<tt>WCE MIPS</tt>."
      You should install both the Palm-size PC and Handheld PC components
      of the Toolkit.)
  </ol>
<p>
Finally, in order to build a boot loader with support for
directly reading kernels from BSD FFS disk partitions, you will need
the Windows CE raw disk I/O control header, <tt>diskio.h</tt>, to be
present in the "<tt>sys/arch/hpcmips/stand/include</tt>" directory of
your source tree.  (This header
is not required if you're content to build a version of the boot loader
which only supports reading kernels from FAT file systems.)  <tt>diskio.h</tt>
is part of the Windows CE Platform Builder (formerly known as the
"Embedded Toolkit"), and can be found in one of the following locations
depending on Platform Builder/Embedded Toolkit version:

  <!-- gross hack to make indentation nice in NS -->
  <dl>
    <dl>
      <dt>Windows CE Embedded Toolkit for Visual C++ 5.0:
      <dd>Unknown.  If you know, <a href="www@netbsd.org">send us mail</a>.

      <dt>Windows CE Platform Builder 2.11:
      <dd>On Disc 1, at the path "<tt>\public\common\oak\inc\diskio.h</tt>."

      <dt>Windows CE Platform Builder 2.12:
      <dd>Unknown.  If you know, <a href="www@netbsd.org">send us mail</a>.
    </dl>
  </dl>

<ENTRY>build-booter Building the Windows CE Boot Program (pbsdboot.exe)

<ENTRY>build-references Further references for the Microsoft tools

  <ul>
    <li><a href="http://msdn.microsoft.com/visualc/prodinfo/datasheet/default.asp">Visual C++ Datasheet</a>
    <li><a href="http://msdn.microsoft.com/cetools/vcprodinfo/vcdata.asp">Windows CE Toolkit for Visual C++ Datasheet</a>
    <li><a href="http://www.microsoft.com/windowsce/Embedded/start/datasheet.asp">Windows CE Platform Builder Datasheet</a>
  </ul>

<ENTRY>jp-menu Japanese characters in menu

<!-- from port-hpcmips@netbsd.org Date: Wed, 09 Feb 2000 10:21:58 +0900 -->
<p>
Japanese characters in menu is very important for Japanese version
Windows CE users. Because, newer version of Windows CE(Japanese version;
2.11?) treats CF/PC Card folder as 'MEMORIKA-DO' (spelled in Japanese,
Katakana), not 'Storage Card'.

On the other hand, older version of Windows CE(Japanese version; 1.0 and
2.0?) treats them as 'Storage Card'.

Therefore, both of 'Storage Card' and 'MEMORIKA-DO' are necessary for
Japanese users.

(Does GetLocaleInfo API of WindowsCE help us ?)

<ENTRY>fb-names frame buffer type names

<!-- from port-hpcmips@netbsd.org Date: Sun, 6 Feb 2000 21:58:28 +0900 -->
<dl>
  <dt>D2
  <dd>2bpp
  <dt>Dxx_yyyy and M2L_y
  <dd>xx means frame buffer depth 
  <dd>y means the pixel value of the forground color in hexadecimal
  <dt>'M2L means most significant bit to least significant bit. The MSB
  is left pixel and LSB is right pixel if a byte represents two or
  more pixels. 'L2M means reverse order.

  The 'x2' option provides virtual double width screen. For example,
  Palm Size PC, Freestype, which has LCD of 320x240, pretend to has
  LCD of 640x480. It had been hack for debugging until serial port
  got available. Please don't mind about it.
</dl>

<ENTRY>share-source share source tree with other ports

set OBJMACHINE environment.

</LIST>

<a href="">Up to <em>NetBSD/hpcmips Port Page</em></a>
<hr>

<HOMELINK>

<hr>
<address>
  <a href="../../Misc/feedback.html">(Contact us)</a>
  $NetBSD: howto-develop.list,v 1.3 2000/03/22 05:28:46 jun Exp $<br>
  <a href="../../Misc/disclaimer.html">Copyright &copy; 2000
    The NetBSD Foundation, Inc. ALL RIGHTS RESERVED.</a> 
</address>

</body>
</html>

