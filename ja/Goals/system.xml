<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
  PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
         "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd" [
]>

<webpage id="ja-Goals-system">
<config param="desc" value="NetBSD システム"/>
<config param="cvstag" value="$NetBSD: system.xml,v 1.7 2005/07/16 17:13:37 heinz Exp $"/>
<!-- based on english translation: -->
<!-- NetBSD: system.xml,v 1.7 2005/07/16 17:13:37 heinz Exp   -->
<config param="rcsdate" value="$Date: 2005/07/16 17:13:37 $"/>
<head>
<title>NetBSD システム</title>
</head>

<sect1 id="design">
<title>うまく設計された</title>

<para>
NetBSD プロジェクトのおそらく第一の目的は、
正しい設計とうまく書けたコードとを強調することです。
機種独立なバスの基本的枠組がその一例であり、
デバイス(Ethernet や SCSI など)の一つのドライバーを
異なるバス(PCI, EISA, Turbochannel など)で、
いくつものプラットフォーム上(<port>alpha</port>, <port>pmax</port>,
<port>i386</port> など)で使用していて、
機種ごとに調整したいくつもの異なるドライバーを書いて保守するといった
伝統的な手法はとりません。
NetBSD での「調整」とは、小さな `glue' (のりづけ)関数であり、
核となるドライバーの改良に貢献して全ての port に利益をもたらすものです。
</para>

<para>
これにより、多くの場合、新規 port は、
既に書かれているドライバーを利用するために
機種独立のバスの基本的枠組への橋渡しをする機種依存のコードを作成するだけに
簡略化されます。
</para>

<para>
<emphasis>"動けば正しい"</emphasis> の哲学を持つシステムもあるようですが、
NetBSD を同様に記述するならば、
<emphasis>"正しくない限り動かない"</emphasis> となります。
</para>
</sect1>

<sect1 id="completeness">
<title>完全な</title>

<para>
"<emphasis>完全な</emphasis>" システムとは何でしょう?
NetBSD は比較的なコンパクトな標準システムで、
全ての基本機能は BSD システムのものとなっています:
ネットワークプロトコル、自身を再コンパイルできる能力など。
それ以上の機能はパッケージシステムで提供されていて、
サードパーティー製のアプリケーションをソースやコンパイル済みバイナリーで
簡単に追加できます。
これにより、NetBSD の開発者は、核となるシステムの開発に集中することができます。
</para>
</sect1>

<sect1 id="stability">
<title>安定した</title>

<para>
NetBSD は、広範囲の計算機上の、無数に可能な組合せのハードウェアで動作します。
これにより、これを成功させるために不可欠な、良い機種独立な設計ができます。
最終的に、世界中で、何十もの異なるハードウェアプラットフォーム上で、
製品に使われるシステムができ上がります。これが結論です。
</para>
</sect1>

<sect1 id="fast">
<title>高速な</title>

<para>
NetBSD は、最も遅い
<port>vax</port> や <port>hp300</port> 機から、最も大きな
<ulink url="/Ports/alpha/models.html#alpha-server-8200,8400">AlphaServer
8x00</ulink> 
や <ulink url="../Ports/amd64/">Opteron</ulink> 機でまで動作します。
CPU やメモリー資源の限られる機種でも使用に耐えるパフォーマンスを維持する
ことによって、より強力な機種でも同様に恩恵にあずかれます;
コードの増加は最小限に抑えなければなりません。
また、通信ハードウェアについても、遅いシリアルやパラレルデバイスから、
イーサネット、FDDI や (800Mb/s) HIPPI インターフェースまでをサポートしています。
</para>

<para>
こまごまとした最適化はどんなシステムでも可能ですが、
それよりも設計の方が重要です。
あるルーチンを書き直して 80% 高速化したといえば聞こえはいいですが、
そのルーチンは CPU 時間の 5% しか使っていなかったかもしれません。
より広くを見渡して、設計を改良することにより全体を 10% 高速化した方が
2倍を越える効果があります。
NetBSD にはどちらの改良の余地もありますが、私たちは貧弱な実装の調整よりも、
設計を正しくする方を好みます。
</para>
</sect1>

</webpage>
