<?xml version="1.0" encoding="ISO-2022-JP"?>
<!DOCTYPE webpage
 PUBLIC "-//NetBSD//DTD Website-based NetBSD Extension//EN"
        "http://www.NetBSD.org/XML/htdocs/lang/share/xml/website-netbsd.dtd">

<webpage id="ja-developers-releng-howto-pullup">
<config param="desc" value=""/>
<config param="cvstag" value="$NetBSD: howto-pullup.xml,v 1.4 2007/06/02 02:14:16 kano Exp $"/>
<!-- Based on english version: -->
<!-- NetBSD: howto-pullup.xml,v 1.4 2007/06/02 02:14:16 kano Exp   -->
<config param="rcsdate" value="$Date: 2007/06/02 02:14:16 $"/>
<head>
<!-- Copyright (c) 1994-2007
        The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->

<title>CVS pullup を実際に行う方法</title>
</head>



<sect1 id="">



<para>リリースサイクルの期間中、普通はその初期段階に、開発者は
リリースエンジニアの承認を受け、
その後に自分で pullup を行うようになっています。</para>

<para><code>foo.c</code>
1.19から1.21
への変更を pullup する場合を例にしてみましょう。</para>

<note>
 "1.21へ pullup する" という考え方は意味がありません --
常に二つのバージョン間のdiffをあてることになります。
どちらか一方が基本になるタグであるかもしれませんが、とにかくdiffを pullup するので、
変更が起こった二つのバージョンをいつも知っている必要があります。</note>

<para>まず初めに、完全な
  <code>foo.c</code>から始めることを確認します。
  <screen>
  cvs update -rnetbsd-1-4 foo.c
  </screen>
  </para>

<para>(このコマンドの効果については、最後にある注意を参照してください。)</para>


<para>そして、 pullup したい変更を加えるため、foo.cにパッチを当てる必要があります。
これには二つ方法があります。
パッチファイルを作成してあてるか、それを避けるためにcvsコマンドのupdateにある
<code>-j</code> フラグを使う事ができます。</para>

<para>まじない:
  <screen>
   cvs diff -kk -c -r1.19 -r1.21 foo.c &gt;/tmp/patch
  </screen>
  で、以下のコマンドであてることができるパッチファイルを作成できます。
  <screen>
  patch &lt;/tmp/patch
  </screen>
  こうするかわりに、パイプを介してパッチを直接あてることもできます。コマンド
  <screen>
  cvs update -kk -j1.19 -j1.21 foo.c
  </screen>
  は、基本的に上にかいてある二つの段階と同等で、
  同じようにファイルにパッチをあてます。</para>

<para>さあ、あなたが望んだ結果になっているか確認するため、
  ファイルを手動で調べてみましょう。
  <code>foo.c</code>が穂先と一致しているか調べたいならば
  (多分1.21が穂先で、1.19が枝の分岐点か似たようなものでしょう) 、
  こうします
  <screen>
  cvs diff -kk -r1.21 foo.c
  </screen>
  すると、差分はまったくないはずです (-kk は RCS ID の展開を抑止します)。
  もし<code>foo.c</code>が穂先と一致していないと思われるならば、
  手動で大丈夫であることを調べるか、望んだ通りになることを確かめるため
  cvsの創造的なセットを使用するかしなければいけません。</para>


<para>とにかく、一度diffがあてられたら、こうします:
  <screen>
  cvs commit foo.c
  </screen>
  リリース枝のコミットメッセージの形式は、これまでの歴史のなかで、
  追跡や保守を容易にするために標準化されてきました。
  コミットメッセージの一行目は、以下の形式のいずれか、または明らかで軽微な亜種でなければなりません。
  <itemizedlist>
  <listitem><code>Pull up revision 1.45 (requested by
  <emphasis>user</emphasis>):</code></listitem>
  <listitem><code>Pull up revision 1.45 (via patch, requested by
  <emphasis>user</emphasis>):</code></listitem>
  <listitem><code>Pull up revisions 1.1-1.5 (new, requested by
  <emphasis>user</emphasis>):</code></listitem>
  <listitem><code>Apply patch (requested by
  <emphasis>user</emphasis>):</code></listitem>
  </itemizedlist>
 コミットメッセージの二行目以降には、 pullup をした理由の説明を、
自由な形式で記してかまいません。このメッセージでは、なるべく、
修正方法の詳細を厳密に書くのではなく、<emphasis role="bold">何を</emphasis>修正したのかを
"対外的にわかるように" 説明するようにしてください。
この説明は、スペース 2 個で字下げするようにし、
また、パッチリリースに対しては、適切な
CHANGES ファイルにこの説明の項目を加えてください。</para>

<para>この pullup によって、公式に報告されている問題が修正された場合は、
  コミットメッセージの説明の最後に <emphasis role="bold">Fixes PR#nnnn</emphasis>
  のように記してください。</para>

<para>さて、コミットメッセージにリビジョン番号を正確に記録するよう求めましたが、
  これは、同じディレクトリーに対する pullup をまとめてコミットして、"sync
 with trunk," ですませたりしては<emphasis>いけない</emphasis>ということです。これでは
  どのバージョンを pullup したかがわからないからです。</para>


<note>
  コマンド
  <screen>
  cvs update -rnetbsd-1-4 foo.c
  </screen>
 は<code>foo.c</code>を"netbsd-1-4" へ貼り付け
 (<code>CVS/Entries</code>に何が起こっているか見てください) 、
  その後のCVSコマンドはこの"接着剤" を以下のコマンドで取らないかぎり、
  このリリースに適応されることになります。
  <screen>
  cvs update -A foo.c
  </screen></note>


</sect1>

</webpage>
