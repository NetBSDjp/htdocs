<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<html>
<head>
<!-- Copyright (c) 1994-2003
	The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED. -->
<meta http-equiv="Content-Type" content="text/html; charset=ISO-2022-JP">
<link rev="made" href="mailto:www@jp.NetBSD.org">
<title>Misc developer CVS notes</title>
</head>
<body bgcolor="#FFFFFF" text="#000000">

<DEVHEADING>CVS - 開発者用覚書

<LIST>

<SECTION>開発者用 CVS 覚書

<ENTRY>head 'HEAD' が、期待したような使い方をできない理由

HEAD は "main trunk 上の最新版" と同義ではなく、実は、
もっと特別な意味を持っています。 'cat' を例に、見てみましょう。
<p>

<ul>
<li>"<tt><b>cvs update -A</b></tt>" (または "<tt><b>cvs update -Dnow</b></tt>") すると、以下のリビジョンが得られます:
<pre>	Makefile	1.9
	cat.1		1.16
	cat.c		1.21</pre>
<p>

<li>"<tt><b>cvs update -r netbsd-1-4-base</b></tt>" すると、以下のリビジョンが得られます:
<pre>	Makefile	1.8
	cat.1		1.16
	cat.c		1.19</pre>
<p>

<li>"<tt><b>cvs update -r netbsd-1-4-PATCH001</b></tt>" または "<tt><b>cvs
update -r netbsd-1-4</b></tt>" すると、以下のリビジョンが得られます:
<pre>	Makefile	1.8
	cat.1		1.16
	cat.c		1.19.2.1</pre>
</ul>
<p>

どの場合でも、 "<tt><b>cvs update -r HEAD</b></tt>" して得られるのは、
"<tt><b>cvs update -A</b></tt>" や "<tt><b>cvs
update -Dnow</b></tt>" した時と同じものです。
<p>
一方、 "<tt><b>cvs diff -r HEAD</b></tt>" した場合は以下のようになります:
<p>

<ul>
<li>current の場合 (あらかじめ "<tt><b>cvs update -A</b></tt>"
    等としておいた場合) 、以下の diff が得られます:
<pre>	file:		1st -r:	2nd -r:
	-----		-------	-------
	Makefile	1.9	1.9
	cat.1		1.16	1.16
	cat.c		1.21	1.21</pre>

(つまり、何も出てきません。)
<p>

<li><tt>-r netbsd-1-4-base</tt> でアップデートしておいた場合は、以下の diff が得られます:
<pre>	Makefile	1.9	1.8
	cat.1		1.16	1.16
	cat.c		1.21	1.19</pre>
(そう、逆向き (新しいものに対して古いものへの差分) になっています。
"<tt><b>cvs diff -r foo</b></tt>" による比較は、リビジョン foo
のファイルが先に、チェックアウト済みのファイルが後になるからです。)
<p>

<li><tt>-r netbsd-1-4-PATCH001</tt> または <tt>-r netbsd-1-4</tt>
    でアップデートしておいた場合は、以下の diff が得られます:
<pre>	Makefile	1.9	1.8
	cat.1		1.16	1.16
	cat.c		1.19.2.1 1.19.2.1</pre>
</ul>
<p>

いいかえれば、 "<tt><b>cvs update -r HEAD</b></tt>" は、 (少なくとも、
attic 送りになったファイルがない単純な場合に限れば) 
"<tt><b>cvs update -A</b></tt>" または "<tt><b>cvs update -Dnow</b></tt>"
と同義ということです。
<p>
しかし、 "<tt><b>cvs diff -r HEAD</b></tt>" は、各ファイルを、
<em>そのファイルの属するブランチの最新版</em>と比較します。
ブランチ上の一部のファイル (分岐はしたが、そのブランチで変更されていない場合)
は、差分は分岐元のブランチの最新版と比較した結果になります
(上述した例では、 <tt>cat/Makefile</tt> が該当し、 trunk
の最新版と比較されています) 。それ以外のファイル
(分岐後に分岐先ブランチで変更されたファイル) では、
差分は現にチェックアウトされたブランチの最新版と比較した結果になります。
<p>
いいかえれば、 <strong><tt>-r HEAD</tt> に対する <tt>diff</tt>
は、ファイルが trunk の最新版と合致するかの確認用としては、
使えない</strong>ということです。
<p>
そういう用途には <tt>-Dnow</tt> が使えます (ただし、削除済みファイルの存在に関しては、
壊れ気味です……ですが、少なくとも冗長過ぎるということはありません
<p>
ブランチへ commit した後、並列に更新して -kk を使いたい場合は、
以下のように指定することもできます。
<p>
<ol>
<li><tt><b>cvs update -kk</b></tt><br>
    (チェックアウトしたブランチの最新版を、 -kk を指定して取得します。
    このブランチに変更を加えて commit したばかりであれば、
    各ファイルを単に -kk 化するだけです。)
<li><tt><b>cvs update -A -kk</b></tt>
</ol>
<p>
変更/追加/削除されたファイルがなければ、この二つはどちらも同じ結果になります。
<p>
以上ですが、要するに、 HEAD は危険な面もあるので使わないように、ということです。 (cgd)

<ENTRY>cvsignore <TT>.cvsignore</tt> ファイルは使用禁止!

<P><TT>.cvsignore</TT> ファイルは、 NetBSD ソースコードリポジトリーの
大半の部分では、使われていません。 (議論の結果、ソースツリーから
追放されたのです。) <TT>pkgsrc</TT> 以外の全モジュールは、
今もこの禁制下にあります。

<P><TT>.cvsignore</TT> ファイル追放の理由は、簡単に言えば、 NetBSD
の開発上で問題を引き起こすからです。このファイルによる主な問題は
二つあります: 掃除が不完全になることと、
配布物にゴミファイルが残ることです。

<P>掃除が不完全になる問題についていうと、 NetBSD のソースは、
構築してから掃除すると、元のソースファイルだけが残らないといけません。
もし、 <TT>make cleandir</TT> して完全に掃除したあとで、
オブジェクトファイルや中間生成ファイル等のファイルといった、
ソース以外のファイルが残ったら、それはバグです。 <TT>.cvsignore</TT>
ファイルは、このバグを隠してしまうので、使ってはいけないのです。

<P>ゴミファイルを含まない配布物を構築することに関する問題については、
配布物にゴミファイルが含まれていないことを確認する一番簡単な方法は、
"<tt>cvs update</tt>" を "<tt>-I! -ICVS</tt>" を付けて実行することです。
しかし、 <tt>-I</tt> を指定して作業をすると、 <TT>.cvsignore</TT>
で指定されている内容が、 CVS で無視されるファイルのリストに追加されます。
このため、 <TT>.cvsignore</TT> ファイルで指定されたファイルを CVS
が将来にわたって無視するようになってしまうのです!
この結果どういうことになるかは、明らかでしょう: <TT>.cvsignore</TT>
ファイルで指定されたようなファイルが何かの間違いでソーススナップショットに
紛れ込んだ場合、それを除去できなくなります。

<P><tt>.cvsignore</tt> ファイルを含んだパッケージをインポートする場合は、
"<tt>cvs import</tt>" コマンドに "<tt>-I .cvsignore</tt>" オプションを付けて、
CVS がこのファイルを無視するようにしてください。

<ENTRY>moving リポジトリー内のファイルの移動や複製
時には、ファイルを CVS 履歴を保持したままで
移動あるいは複製する必要な事態が起こります。
そういったことは CVS ではサポートしていないので、 CVS の通常の
クライアント-サーバーの仕組みで行うことはできません。
<p>

かつては RCS ファイルそのものを移動するためのスクリプトがありましたが、
今はそういうことはサポートされません。普通にファイルを削除して、
新しい場所にファイルを追加してください。その際、将来追跡がしやすくなるよう、
それぞれに移動先と移動元を書いておいてください。
一度に沢山のファイルを扱う場合は、 cvs add するかわりに cvs import
してもかまいません。

</LIST>

<a href="./"><em>CVS リポジトリー問題</em>に戻る</a>
<hr>

<DEVLINK>

<hr>
<address>
  <small>
  (連絡先 - <a href="http://www.NetBSD.org/cgi-bin/feedback.cgi">英語</a>,
       <a href="mailto:www@jp.NetBSD.org">日本語:
       www@jp.NetBSD.org</a>)<br>
  $NetBSD: notes.list,v 1.15 2003/07/23 16:35:12 keihan Exp $<br>
  <!-- based on english translation: -->
  <!-- NetBSD: notes.list,v 1.15 2003/07/23 16:35:12 keihan Exp   -->
  <a href="../../Misc/disclaimer.html">Copyright &copy; 1994-2003
  The NetBSD Foundation, Inc.  ALL RIGHTS RESERVED.</a>
  </small>
</address>

</body>
</html>
